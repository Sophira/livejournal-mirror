<chapter id="lj.customize.local_cvs">
  <title>Using your own <abbrev>CVS</abbrev> directory</title>
  <para>
    CVS is a version control system for source code.  We don't care
    whether or not you actually use it to control your site-local
    modifications.  However, even if you don't, it's still important
    you put your modifications under a directory in
    <literal>$LJHOME/cvs</literal>.
  </para>
  <para>
    At this point, <link linkend='lj.install.install_files'>you already have</link> a directory named
    <literal>cvs</literal> underneath your <literal><link
    linkend='ljhome_var'>$LJHOME</link></literal> directory.  Further, that directory
      already has under it a directory called <literal>livejournal</literal>, which holds
      the <quote>general</quote> files.
  </para>
  <para>
    What you want to do now is make a directory that holds the
    <quote>local</quote> files.  The LiveJournal tools look for your
    files in a directory beside <literal>livejournal</literal> named
    <literal>local</literal>, but <literal>local</literal> can
    actually be a symlink to your real
    directory.
    <footnote>
      <para>LiveJournal.com uses the directory name
        <literal>ljcom</literal> for its site-local modifications, so
        the <literal>livejournal</literal> directory is entirely free
        of LiveJournal.com-specific code.  If you're helping with
        LiveJournal.com development, you'll want to symlink ljcom to
        local.</para>
    </footnote>
  </para>

  <section id='cvsreport'>
    <title><literal>cvsreport.pl</literal>: Adding &amp; Overlaying</title>
    <para>
      In <literal>$LJHOME/bin</literal> there's a tool named
      <literal>cvsreport.pl</literal> which manages (among other
      things) merging together the general files and your site-local
      files into the live area under <literal>$LJHOME</literal>.
    </para>
    <para>
      The command you'll need most of the time
      is:<screen><prompt>$</prompt> <userinput>cvsreport.pl -c -s</userinput></screen>
      <literal>-c</literal> is short for
      <literal>--cvsonly</literal> (only copies from the
      <literal>cvs</literal> directory back to the live area, not
      vice-versa) and <literal>-s</literal> is short for
      <literal>--sync</literal> (which means actually do the copying,
      don't just print out what it would've done, which is the default
      without <literal>-s</literal>).
    </para>
    <para>
      So, say you want to override the provided
      <literal>htdocs/index.bml</literal> file.  Create the
      <literal>htdocs</literal> under
      <literal>$LJHOME/cvs/local</literal> and put a
      <literal>index.bml</literal> file in it, then run
      <userinput>cvsreport.pl -c -s</userinput> and you're set.
    </para>
    <para>
      More commonly, you'll be adding new files, rather than replacing
      provided ones.  In general, you should never really need to
      replace files, since you should already be able to change all
      the text, images, and layout of any given page.  Replacing a
      file would mean duplicating functionality, and that's bad.
    </para>
    <para>
      One popular strategy with the general code libraries is to look
      for a similarly named file with <literal>-local</literal> in it
      and load that also.  That way you inherit all the functionality
      that's provided, and change only what you want.  When general
      changes, you don't have to update right away... you can change
      things later if you want, or keep the newly added stuff as it
      was given to you.
    </para>
  </section>
  
</chapter>