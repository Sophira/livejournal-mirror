#!/usr/bin/perl
use strict;
use lib "$ENV{LJHOME}/cgi-bin";
use LJ::NewWorker::Manual;
LJ::NewWorker::Manual::CategoryRecentPosts->start();

################################################################################

package LJ::NewWorker::Manual::CategoryRecentPosts;

use strict;
use lib "$ENV{LJHOME}/cgi-bin";
use base 'LJ::NewWorker::Manual';

use LJ::Browse;
use LJ::Browse::Parser;

# how long to wait if we didn't process any at all
my $sleep_when_idle;

## how much entries are to fetch from each community
my $max_count_post_per_comm;

my $verbose;

sub BEGIN {
    $sleep_when_idle = 600;
    $verbose = 0;
    $max_count_post_per_comm = 30;
}

sub options {
    my $self = shift;
    return (
        $self->SUPER::options(),
    );
}

sub help {
    my $self = shift;
    return
        $self->SUPER::help() .
        "-u | --user login  work on one specific user\n";
}

sub work {
    my $class = shift;
    my @uids;

    my $verbose = $class->verbose();

    my $dbh = LJ::get_db_writer();

    my $journals = $dbh->selectall_arrayref ("SELECT cj.catid, cj.journalid FROM categoryjournals cj, category c WHERE cj.catid = c.catid AND c.vert_id <> 0", { Slice => {} });
    foreach my $rec (@$journals) {
        my $journalid = $rec->{journalid};
        my @last_jitemid = $dbh->selectrow_array ("SELECT max(jitemid) FROM category_recent_posts WHERE journalid = ?", undef, $journalid);

        my $u = LJ::load_userid($journalid);
        my @recent = LJ::get_recent_items({
            itemshow    => $max_count_post_per_comm,
            err         => undef,
            userid      => $u->{userid},
            clusterid   => $u->{clusterid},
            remote      => undef,
            afterid     => $last_jitemid[0],
            order       => 'logtime',
        });

        foreach my $entry (@recent) {
            my $sth = $dbh->prepare ("INSERT INTO category_recent_posts (jitemid, timecreate, journalid) VALUES (?, ?, ?)");
            $sth->execute($entry->{itemid}, $entry->{logtime}, $journalid);

            my $e_obj = LJ::Entry->new ($u->{userid}, jitemid => $entry->{itemid});
            my $event = $e_obj->event_raw;

            my $parsed = LJ::Browse::Parser->do_parse (
                text        => $event,
                remove_tags => [ 'b', 'p', 'div', 'span', 'strong', 'font' ],
                max_len     => 400,
                crop_image  => 1,
                entry       => $e_obj,
                need_resize => 1,
            );

            ## Add tags for every entry
            my $poster = $e_obj->poster;
            next if $poster->is_suspended;
            next if $e_obj->is_suspended;
            my @tags = $e_obj->tags;
            if (scalar @tags) {
                my $cat = LJ::Browse->load_by_id ($rec->{catid});
                next unless $cat;
                my $v = $cat->vertical;
                $v->save_tags (is_seo => 0, tags => [ map { { tag => $_, journalid => $u->{userid}, jitemid => $entry->{itemid} } } @tags ] )
                    if $v;
            }
        }

    }

=head
    ## Remove old posts
    my $verticals = $dbh->selectall_arrayref ("SELECT vert_id, not_deleted, remove_after FROM vertical2", { Slice => {} });
    foreach my $vert (@$verticals) {
        next unless $vert->{'remove_after'} && $vert->{'not_deleted'};
        my $cats = $dbh->selectcol_arrayref ("SELECT catid FROM category WHERE vert_id = ?", { Slice => {} }, $vert->{'vert_id'});
        foreach my $catid (@$cats) {
            my $comms = $dbh->selectcol_arrayref ("SELECT DISTINCT journalid FROM categoryjournals WHERE catid = ?", undef, $catid);
            foreach my $journalid (@$comms) {
                my $jitems = $dbh->selectcol_arrayref ("SELECT jitemid FROM category_recent_posts WHERE journalid = ? AND unix_timestamp(timecreate) < unix_timestamp() - ".$vert->{'remove_after'}." * 3600 ORDER BY timecreate DESC", undef, $journalid);
                next unless @$jitems;
                my @to_delete = splice @$jitems, 0, scalar @$jitems - $vert->{'not_deleted'};
                next unless @to_delete;
                my $res = $dbh->do ("DELETE FROM category_recent_posts WHERE jitemid in (".join (",", @to_delete).") AND journalid = ?", undef, $journalid);
            }
        }
    }
=cut

    return 0;
}

sub on_idle {
    return sleep $sleep_when_idle;
}

sub debug {
    print STDERR @_, "\n" if $verbose;
}

1;
