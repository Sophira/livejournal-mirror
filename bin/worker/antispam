#!/usr/bin/perl
use strict;
use lib "$ENV{LJHOME}/cgi-bin";
require 'ljlib.pl';
use LJ::AntiSpam;

package LJ::NewWorker::TheSchwartz::AntiSpam;
use base 'LJ::NewWorker::TheSchwartz';
sub capabilities { return [ 'LJ::Worker::AntiSpam' ] }
__PACKAGE__->start();

package LJ::Worker::AntiSpam;
use base 'TheSchwartz::Worker';
use Net::Akismet::TPAS;

sub work {
    my ($class, $job) = @_;
    my $a  = $job->arg;

    my $jid     = $a->{journalid};
    my $itemid = $a->{itemid};
    my $server  = $a->{server};
    my $posterid = $a->{posterid};
    my $uniq = $a->{remote_uniq};
    my $email; # $a->{email} Not for use with an external spam service
    my $ju      = LJ::load_userid($jid)
        or die "No user able to be loaded\n";
    my $content;

    # Journal Entry
    if ($a->{type} eq 'E') {
        my $entry  = LJ::Entry->new($ju, jitemid => $itemid);

        unless ($entry->valid && $entry->security eq "public") {
            $job->completed;
            return;
        }
        $content = $entry->event_html;
    # Comment
    } elsif ($a->{type} eq 'C') {
        #TODO support comments also
    }

    my $url      = LJ::journal_base($ju) . "/";
    my $name     = $ju->prop("journaltitle") || $ju->{name} || $ju->{user};

    my $poster = LJ::load_userid($posterid);

    unless ($content) {
        $job->completed;
        return;
    }

    my $tpas = Net::Akismet::TPAS->new(
                KEY => "lj_$posterid",
                URL => $url,
                SERVER => 'api.antispam.typepad.com',
               ) or die "Key verification failure!";

    my $verdict= $tpas->check(
                    USER_IP                 => $a->{remote_ip},
                    COMMENT_USER_AGENT      => $a->{remote_ua},
                    COMMENT_CONTENT         => $content,
                    COMMENT_AUTHOR          => $poster->user,
                    COMMENT_AUTHOR_EMAIL    => $email,
                ) or die "Failed to get response from antispam server.\n";

    # How certain is the verdict
    my $score = $tpas->get_confidence;
    my $is_spam = $verdict eq 'true' ? 1 :0;

    LJ::AntiSpam->create( journalid => $jid, itemid => $itemid,
                          type => $a->{type}, posterid => $posterid,
                          eventtime => $a->{timepost},
                          poster_ip => $a->{remote_ip}, email => $email,
                          user_agent => $a->{remote_ua}, uniq => $uniq,
                          spam => $is_spam, confidence => $score );

    $job->completed;
    return;
}

sub keep_exit_status_for { 0 }
sub grab_for { 60 }
sub max_retries { 3 }
sub retry_delay { 100 }

