#!/usr/bin/perl
use strict;
use warnings;
use lib "$ENV{LJHOME}/cgi-bin";
use LJ;
use LJ::NewWorker::Gearman;

LJ::NewWorker::Gearman::SearchLookup->start();

package LJ::NewWorker::Gearman::SearchLookup;
use base 'LJ::NewWorker::Gearman';
use Storable;
use LJ::NewWorker::Gearman;
use LJ::Directory::Search;
use LJ::Directory::Constraint;
use LJ::UserSearch;
use LJ::UserSearch::MetaUpdater;

BEGIN {
    use Class::Autouse;
    Class::Autouse->load("LJ::Directory::Constraint");
};

my $mtime;

sub declare { return [ 'directory_search' => \&dir_search ] }
sub work    { return [ save_result => 1 ] };

sub on_idle {  $mtime = LJ::UserSearch::MetaUpdater::update_users($mtime); }

sub dir_search {
    my $job = shift;
    my $args = eval { Storable::thaw($job->arg) } || [];
    die "Got error: $@" if $@;

    my $dir = $args;
    my @constraints = $dir->constraints;
    return undef unless scalar @constraints;

    my $results = $dir->search_no_dispatch($job);

    return Storable::nfreeze($results);
}

sub init_memory_datastructure {
    my $file = $LJ::USERSEARCH_METAFILE_PATH;
    my $size = -s $file;
    my $filemtime = (stat($file))[9];
    die "Refusing to start until '$file' exists and has nonzero size" unless $size;

    LJ::UserSearch::reset_usermeta($size);
    open (my $fh, $file) or die;
    my $buf;
    my $pushed = 0;
    my $rv;
    while ($rv = sysread($fh, $buf, 256*1024)) {
        LJ::UserSearch::add_usermeta($buf, $rv);
        $pushed += $rv;
    }
    die "Error reading file: $!" unless defined $rv;
    die "Didn't read all file" unless $pushed == $size;
    return $filemtime;
}

sub BEGIN {
    $mtime = init_memory_datastructure();
}

1;
