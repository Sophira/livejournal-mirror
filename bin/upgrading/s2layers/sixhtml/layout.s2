layerinfo type = "layout";
layerinfo name = "Bloggish";
layerinfo redist_uniq = "sixhtml/layout";
layerinfo des = "SixApart's standard HTML structure for blogs, to be styled with CSS.";

propgroup appearance {
    property bool use_6a_base {
        des = "Use 'Base Weblog' styles";
    }    
    set use_6a_base = true;

    property string base_theme {
        des = "Base Theme";
        values = "__none|(None)|powell-street|Powell Street";
    }
    set base_theme = "powell-street";

    property string layout_type {
        des = "Layout Type";
        values = "1C|One column|2CL|Two column (Sidebar on Left)|2CR|Two column (Sidebar on Right)|3C|Three column";
    }
    set layout_type = "2CR";

    property string{} theme_stylesheet {
        noui = 1;
    }
    set theme_stylesheet = {
        "powell-street" => "http://www.typepad.com/.shared/themes/lilia/theme-powell-street.css",
    };
}
propgroup appearance = "Appearance";

propgroup options {

    property bool opt_dayhead {
        des = "Show Day Headings";
    }
    set opt_dayhead = false;

    property use page_recent_items;
    property use page_friends_items;
    property use page_day_sortorder;
    property use page_year_sortorder;
    property use view_entry_disabled;
    property use use_shared_pic;


    property string[][] sidebar_primary {
        des = "Primary sidebar members";
        noui = 1;
    }
    property string[][] sidebar_secondary {
        des = "Secondary sidebar members";
        noui = 1;
    }

    set sidebar_primary = [
        [ "poweredby", "" ],
    ];

}
propgroup options = "Options";

propgroup text {
    property use text_post_comment;
    property use text_read_comments;
    property use text_post_comment_friends;
    property use text_read_comments_friends;
    property use text_view_recent;
    property use text_view_archive;
    property use text_view_friends;
    property use text_view_userinfo;
    property use lang_fmt_date_med;
    property use lang_fmt_time_short;
}
propgroup text = "Text";

function print_custom_stylesheet() {}

function print_stylesheet () {

if ($*use_6a_base) {
"""
/* base css */
@import url(http://www.typepad.com/.shared/themes/common/base-weblog.css);
""";
}

if ($*base_theme != "__none") {
"""/* theme css */
@import url($*theme_stylesheet{$*base_theme});

""";
}

"""

/* user css */
""";
    print_custom_stylesheet();
}

function container_open (string name) {
    "<div id='$name'><div id='$name-inner' class='pkg'>\n";
}

function container_close () {
    "</div></div>\n";
}

function print_banner(Page p) {
    container_open("banner");
      "<h1 id='banner-header'>$p.global_title</h1>";
      "<h2 id='banner-description'>$p.global_subtitle</h2>";
    container_close();
}


function open_module(string intname, string title, string headlink_url) {
    println """<div class="module-$intname module">""";
    if ($title != "") {
        """<h2 class="module-header">""";
        if ($headlink_url != "") { """<a href="$headlink_url">"""; }
        print $title;
        if ($headlink_url != "") { """</a>"""; }
        "</h2>\n";
    }
    println """<div class="module-content">""";
}

function close_module() {
    println "</div></div>";
}

function print_module_list(string[] list) {
    println """<ul class="module-list">""";
    foreach var string s ($list) {
        println """<li class="module-list-item">$s</li>""";
    }
    println """</ul>""";
}

function print_module_userprofile(string title, bool show_profile, bool show_userpic) {
    var Page p = get_page();
    open_module("about", $title, $p.view_url{"userinfo"});
    
    close_module();
}

function print_module_viewlinks(string title) {
    var Page p = get_page();
    open_module("viewlinks", $title, "");
    
    close_module();
}

function print_module_poweredby(string title) {
    var Page p = get_page();
    open_module("powered", $title, "");
    println """Powered by <a href="$*SITEROOT/">$*SITENAME</a>""";
    close_module();
}
function print_module_pagesummary(string title) {
    var Page p = get_page();
    open_module("pagesummary", $title, "");

    close_module();
}
function print_module_tags(string title) {
    var Page p = get_page();
    open_module("categories", $title, ""); # TODO: Link to the TagsPage?

    close_module();
}
function print_module_calendar() {
    var Page p = get_page();
    open_module("calendar", "Month Name Here", "");

    close_module();
}
function print_module_syndicate(string title) {
    var Page p = get_page();
    open_module("syndicate", $title, "");

    close_module();
}
function print_module_customtext(string title, string text, string titlelink_url) {
    var Page p = get_page();
    open_module("customtext", $title, $titlelink_url);
    print safe $text;
    close_module();
}
function print_module_links(string title) {
    var Page p = get_page();
    open_module("typelist", $title, "");

    close_module();
}


function handle_sidebar_array(string[][] list) {
    foreach var string[] item ($list) {
        var string module = $item[0];
        var string title = $item[1];

        if ($module == "userprofile") {
            var bool show_profile = (int($item[2]) != 0 ? true : false);
            var bool show_userpic = (int($item[3]) != 0 ? true : false);
            print_module_userprofile($title, $show_profile, $show_userpic);
        }
        elseif ($module == "viewlinks") {
            print_module_viewlinks($title);
        }
        elseif ($module == "poweredby") {
            print_module_poweredby($title);
        }
        elseif ($module == "pagesummary") {
            print_module_pagesummary($title);
        }
        elseif ($module == "tags") {
            print_module_tags($title);
        }
        elseif ($module == "calendar") {
            print_module_calendar();
        }
        elseif ($module == "syndicate") {
            print_module_syndicate($title);
        }
        elseif ($module == "customtext") {
            var string text = $item[2];
            var string titlelink_url = $item[3];
            print_module_customtext($title, $text, $titlelink_url);
        }
        elseif ($module == "links") {
            print_module_links($title);
        }
    }
}

function Page::lay_sidebar_primary() {
    handle_sidebar_array($*sidebar_primary);
}
function Page::lay_sidebar_secondary() {
    handle_sidebar_array($*sidebar_secondary);
}

function render_layout (Page p, string lay) {
   if ($lay == "1C") {
      container_open("alpha");
      $p->print_body();
      container_close();
      return;
   }

   if ($lay == "2CL") {
      container_open("alpha");
      $p->lay_sidebar_primary();
      container_close();
      container_open("beta");
      $p->print_body();
      container_close();
      return;
   }

   if ($lay == "2CR") {
      container_open("alpha");
      $p->print_body();
      container_close();
      container_open("beta");
      $p->lay_sidebar_primary();
      container_close();
      return;
   }

   if ($lay == "3C") {
      container_open("alpha");
      $p->lay_sidebar_primary();
      container_close();
      container_open("beta");
      $p->print_body();
      container_close();
      container_open("gamma");
      $p->lay_sidebar_secondary();
      container_close();
      return;
   }


}

function get_layout () : string {
   var Page p = get_page();
   var string lay = $*layout_type;
   if ($lay == "1C" or $lay == "2CR" or $lay == "2CL" or $lay == "3C") {
      return $lay;
   }
   return "2CR";
}

function body_class (string lay) : string {
   var string{} map = {
      "1C" => "layout-one-column",
      "2CL" => "layout-two-column-left",
      "2CR" => "layout-two-column-right",
      "3C" => "layout-three-column",
   };
   return $map{$lay};
}

function Page::print () {

 var string lay = get_layout();
 var string body_layout_class = body_class($lay);

   """<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" id="sixapart-standard">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>""" + $this->title() + """</title>""";
  $this->print_custom_head();
"""  <link rel='stylesheet' href='$.stylesheet_url' type="text/css" />
</head>
<body class='$body_layout_class'>""";

container_open("container");
print_banner($this);
container_open("pagebody");

 render_layout($this, $lay);

container_close();
container_close();
"</body></html>";
}



function RecentPage::print_body {
    foreach var Entry e ($.entries) {
        # Print the entry
        $this->print_entry($e);
    }
}


function Page::print_entry(Entry e) {
    "<div class='entry'" + ($e.dom_id ? " id='$e.dom_id'" : "") + ">\n";
      "<h3 class='entry-header'>$e.security_icon $e.subject</h3>\n";
      "<div class='entry-content'>\n";

          "<div class='entry-body'>\n"; $e->print_metadata(); "$e.text\n</div>\n";

         var string sep = "<span class='separator'>|</span>";

         "<p class='entry-footer'>";
             print $e.time->date_format($*lang_fmt_date_med);
             " $sep <a class='permalink' href='$e.permalink_url'>Permalink</a>";

            if ($e.comments.enabled) { " $sep <a href='$e.comments.post_url'>Reply</a> "; }
            if ($e.comments.count)   { " $sep <a href='$e.permalink_url#comments'>$e.comments.count comments</a> "; }
         "</p>";

       "</div>\n";
     "</div>\n";
}
