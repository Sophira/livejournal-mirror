#!/usr/bin/perl
# -*-perl-*-

# LiveJournal configuration file.  Copy this out of the documentation
# directory to cgi-bin/ljconfig.pl and edit as necessary.  The reason
# it's not in the cgi-bin directory already is to protect it from
# getting clobbered when you upgrade to the newest LiveJournal code in
# the future.

# This should be the only file you need to change to get the
# LiveJournal code to run on your site.  If not, it's considered a bug
# and you should report it.

{
    package LJ;

    $HOME = $ENV{'LJHOME'};
    $HTDOCS = "$HOME/htdocs";
    $BIN = "$HOME/bin";
    $TEMP = "$HOME/temp";
    $VAR = "$HOME/var";

    # human readable name of this site
    # CHANGE THIS
    $SITENAME = "Some LiveJournal Site";
    
    ## turn $SERVER_DOWN on while you do any maintenance
    $SERVER_DOWN = 0;
    $SERVER_DOWN_SUBJECT = "Maintenance";
    $SERVER_DOWN_MESSAGE = "$SITENAME is down right now while we upgrade.  It should be up in a few minutes.";

    # the base domain of your site.
    # CHANGE THIS.
    $DOMAIN = "ljsite.com"; 

    # regexp to match domains that could load the site.  this default should be fine.
    $DOMAIN_RE = "(www\.)?\Q$DOMAIN\E(:\\d+)?";

    # this is what gets prepended to all URLs 
    $SITEROOT = "http://www.$DOMAIN";

    $IMGPREFIX = "$SITEROOT/img";
  
    # set this if you're running an FTP server that mirrors your htdocs/files
    # $FTPPREFIX = "ftp://ftp.$DOMAIN";  

    # path to sendmail and any necessary options
    $SENDMAIL = "/usr/sbin/sendmail -t";

    # command-line to spell checker, or undefined if you don't want spell checking
    # $SPELLER = "/usr/local/bin/ispell -a";
    # $SPELLER = "/usr/local/bin/aspell pipe --sug-mode=fast --ignore-case";

    # where we set the cookies (note the period before the domain)
    # can be one value or an array ref (to accomodate certain old
    # broken browsers)
    $COOKIE_DOMAIN = ["", ".$DOMAIN"]; 
    $COOKIE_PATH   = "/";

    # email addresses
    $ADMIN_EMAIL = "webmaster\@$DOMAIN";
    $SUPPORT_EMAIL = "support\@$DOMAIN";
    $BOGUS_EMAIL = "lj_dontreply\@$DOMAIN";

    # Support URLs of the form http://username.yoursite.com/ ? 
    # If so, what's the part after "username." ?
    $USER_VHOSTS = 1;
    $USER_DOMAIN = $DOMAIN;
  
    $INTRANET = 0;         # if true, turn off AOL warning, legalese, COPPA stuff, etc
    $EVERYONE_PAID = 0;    # if true, all new accounts get paid feature access
    $EVERYONE_VALID = 0;   # if true, new accounts don't need to be validated

    # performance/load related settings.  turn this on if you want to batch all updates
    # to the database every 10 seconds.  only necessary with high-load sites.
    $BUFFER_QUERIES = 0;

    # Do paid users get email addresses?  username@$USER_DOMAIN ?
    # (requires additional mail system configuration)
    $USER_EMAIL  = 0;

    ## Directory optimizations
    $DIR_DB = "";   # by default, hit the main database (bad for big sites!)

    # DB role to use when connecting to directory DB   
    $DIR_DB_HOST = "master";

    # database info.  only the master is necessary.  
    # you should probably CHANGE THIS
    %DBINFO = (
           'master' => {
               'host' => "localhost",
               'port' => 3306,
               'user' => 'lj',
               'pass' => 'ljpass',
           },
           'slavecount' => 0,
           # example of a TCP-based DB connection
           #'slave1' => {
           #    'host' => "somehost",
           #    'port' => 1234,
           #    'user' => 'username',
           #    'pass' => 'password',
           #},
           # example of a UNIX domain-socket DB connection
           #'slave2' => {
           #    'sock' => "$LJ::HOME/var/mysqld.sock",
           #    'user' => 'username',
           #    'pass' => 'password',
           #},
           );

    # list of regular expressions matching usernames that people can't have.
    @PROTECTED_USERNAMES = ("^ex_", "^lj_");
    
    # HINTS:
    #   how far you can scroll back on lastn and friends pages.
    #   big performance implications if you make these too high.
    #   also, once you lower them, increasing them won't change anything
    #   until there are new posts numbering the difference you increased 
    #   it by.

    $MAX_HINTS_LASTN = 100;
    $MAX_SCROLLBACK_LASTN = 400;

    # Only turn this on if you are using MySQL replication between
    # multiple databases and have one or more slaves set to not
    # replicated the logtext and talktext tables.  Turning this on
    # makes LJ duplicate all logtext & talktext rows into
    # recent_logtext & recent_talktext which is then replicated.
    # However, a cron job cleans up that table so it's never too big.
    # LJ will try the slaves first, then the master.  This is the best
    # method of scaling your LJ installation, as disk seeks on the
    # database for journal text is the slowest part.
    $USE_RECENT_TABLES = 0;

    # turns these from 0 to 1 to disable parts of the site that are
    # CPU & database intensive.
    %DISABLED = (
         'interests-findsim' => 0,
         'directory' => 0,
         );

    # require new free acounts to be referred by an existing user?
    # NOTE: new and mostly ljcom-specific.  some features
    # unimplemented in the livejournal-only tree.
    $USE_ACCT_CODES = 0;

    # if you define these, little help bubbles appear next to common
    # widgets to the URL you define:
    %HELPURL = (
        #"accounttype" =>
        #"",
        #"security" => 
        #"http://www.livejournal.com/support/faqbrowse.bml?faqid=24",
        #"noautoformat" => 
        #"http://www.livejournal.com/support/faqbrowse.bml?faqid=26",
        #"userpics" =>
        #"http://www.livejournal.com/support/faqbrowse.bml?faqid=46",
        #"iplogging" =>
        #"http://www.livejournal.com/support/faqbrowse.bml?faqid=66",
        );

    # USER CAPABILITIES CLASSES:
    {
    # default capability class mask for new users: 
    # (16 bit unsigned int ... each bit is capability class flag)
    $NEWUSER_CAPS = 2;

    # default capability limits, used only when no other
    # class-specific limit below matches.
    %CAP_DEF = (
            'maxfriends' => 5,
            'userpics' => 1,
            'checkfriends_interval' => 60,
            'checkfriends' => 1,
            'styles' => 0,
            'todomax' => 25,
            'todosec' => 0,
            'friendsviewupdate' => 30,
            );

    # capability class limits.
    # keys are bit numbers, from 0 .. 15.  values are hashrefs
    # with limit names and values (see doc/capabilities.txt)
    %CAP = (
        ## 0x01 -- new user
        '0' => { 
            'userpics' => 1,
        },
        ## 0x02 -- free user 
        '1' => {
            'userpics' => 3,
        },
        ## 0x04 -- early adopter
        '2' => {
            'userpics' => 5,
            'styles' => 1,
        },
        ## 0x08 -- paid user 
        '3' => {
            'styles' => 1,
            'makepoll' => 1,
            'userpics' => 10,
            'paid' => 1,
            'useremail' => 1,
            'textmessaging' => 1,
        },
        ## 0x10 -- permanent account
        '4' => {
            'paid' => 1,
            'useremail' => 1,
        },
        );
    }

    # keep this next line.  it lets you upgrade LiveJournal without
    # having to change your config file.  if there is a new required
    # configuration option, the following line will set it:
    require "$ENV{'LJHOME'}/cgi-bin/ljdefaults.pl";
    
    # if there is a local configuration file, read it.
    if (-e "$HOME/cgi-bin/ljconfig-local.pl") {
        do "$HOME/cgi-bin/ljconfig-local.pl";
    }
    
}

1;  # return true
