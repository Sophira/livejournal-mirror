<?page
title=>Edit Profile
body<=
<?_code
    LJ::set_active_crumb('editprofile');
    return;
_code?>

<?_code
{
    use strict;
    use vars qw(%POST %GET $head);

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    BML::set_language_scope('/editinfo.bml');
    my $remote = LJ::get_remote();
    return LJ::bad_input("You must be logged in to edit your profile.")
        unless $remote;

    if ($remote->underage) {
        return BML::redirect("$LJ::SITEROOT/agecheck/?s=1");
    }

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input("You could not be authenticated as the specified user.")
        unless $u;

    return $LJ::MSG_READONLY_USER if $u->readonly;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';

    ### user is now authenticated ###

    my $dbr = LJ::get_db_reader();
    my $sth;

    # load user props
    LJ::load_user_props(
        $u, { use_master => 1 },
        qw/ opt_whatemailshow
          country state city zip timezone
          icq aolim yahoo msn url jabber
          google_talk skype gizmo
          urlname gender opt_hidefriendofs
          sidx_bdate sidx_bday sidx_loc
          opt_showmutualfriends opt_showschools
          opt_showbday opt_showlocation/
    );

    # to store values before they undergo normalisation
    my %saved = ();
    $saved{'name'} = $u->{'name'};

    # clean userprops
    foreach (values %$u) { LJ::text_out(\$_); }

    # load and clean bio
    $u->{'bio'} = LJ::get_bio($u);
    $saved{'bio'} = $u->{'bio'};
    LJ::text_out(\$u->{'bio'}, "force");

    # load interests
    my $uints = LJ::get_interests($u, { forceids => 1 });
    my %interests = ();
    foreach (@$uints) {
        $interests{$_->[1]} = $_->[0];  # $interests{name} = intid
    }

    # load state and country codes
    my %countries;
    my %states;
    LJ::load_codes({ "country" => \%countries, "state" => \%states });


    ###
    ### no post, show edit form
    ###
    $head = "";

    unless (LJ::did_post()) {

        my $ret;

        $ret .= "<div>";
        # user switcher
        $ret .= "<?p <form method='get' action='./'>\n";
        $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
        $ret .= "</form> p?>\n\n";

        $ret .= "<?p Here's where you fill out your Profile page. You don't have to display
                all of your info to everyone - check out the options below.
                You may also want to edit your <a href='$LJ::SITEROOT/manage/comments/'>comment settings</a>
                or your <a href='$LJ::SITEROOT/manage/settings/'>viewing options</a>. p?>";

        $ret .= "</div>\n";

        $ret.= "<div class='clear'></div>\n";


        $ret .= "<form method='post' action='./$getextra'>\n";
        $ret .= LJ::form_auth();

        # personal information
        $ret .= "<div class='section_head'> Identity </div>\n";

        ### Picture Settings
        $ret .= "<table class='field_block'>\n";

        $ret .= "<tr><td class='field_name'>Default userpic:</td>\n";
        $ret .= "<td><div style='width: 100px; height: 100px; float: left; text-align: center; border: 1px solid #ddd'>";
        if ($u->{'defaultpicid'})
        {
            my $picid = $u->{'defaultpicid'};
            my %userpics = ();
            LJ::load_userpics(\%userpics, [ $u, $picid ]);
            $ret .= "<img src=\"$LJ::USERPIC_ROOT/$picid/$u->{'userid'}\" width='$userpics{$picid}->{'width'}' height='$userpics{$picid}->{'height'}' alt='$u->{'user'}' border='0'>";
        } else {
            $ret .= "<br /><i>($ML{'.userpic.none'})</i>";
        }
        $ret .= "</div><div style='margin-left: 110px'>\n";
        $ret .= "<span class='helper'>This is the image that will display on your Profile. It will also represent you in your entries and comments, unless you select a different one.</span>";
        $ret .= LJ::help_icon('upic_keywords');
        $ret .= "<?p <a href='$LJ::SITEROOT/editpics.bml'>Change default userpic</a> p?>\n";
        $ret .= "</td></tr>\n";

        # name
        $ret .= "<tr><td class='field_name'>$ML{'.name.title'}:</td>\n";
        if (LJ::text_in($saved{'name'})) {
            $ret .= "<td><div style='float: left'>";
            $ret .= LJ::html_text({ 'name' => 'name', 'value' => $u->{'name'},
                                    'maxlength' => '50' });
            $ret .= "&nbsp; </div><div class='helper'>Your name will be displayed on your Profile and in search results</div>";
            $ret .= "</td></tr>\n";
        } else {
            $ret .= "<td>" . LJ::html_hidden('name_absent', 'yes');
            $ret .= "<?inerr " . BML::ml('.error.invalidname2', {'aopts' => "href='$LJ::SITEROOT/utf8convert.bml'"}) . " inerr?></td></tr>\n";
        }

        # gender
        $ret .= "<tr><td class='field_name'>$ML{'.gender.title'}:</td><td>";
        $ret .= LJ::html_select({ 'name' => 'gender', 'selected' => $u->{'gender'} },
                                  'U' => $ML{'.gender.unspecified'}, 'M' => $ML{'.gender.male'}, 'F' => $ML{'.gender.female'} );
        $ret .= "</td></tr>\n";


        # birthday
        $ret .= "<tr><td class='field_name'>$ML{'.bday.title'}:</td><td>";
        my %bdpart;
        if ($u->{'bdate'} =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/) {
            ($bdpart{'year'}, $bdpart{'month'}, $bdpart{'day'}) = ($1, $2, $3);
            if ($bdpart{'year'} eq "0000") { $bdpart{'year'} = ""; }
            if ($bdpart{'day'} eq "00") { $bdpart{'day'} = ""; }
        }
        $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_showbday', 'id' => 'opt_showbday',
                                                 'selected' => $u->opt_showbday ne 'N' });
        $ret .= " Show your birthday to other users<br />\n";
        $ret .= LJ::html_select({ 'name' => 'month', 'selected' => int($bdpart{'month'}) },
                                '', '', map { $_, $ML{LJ::Lang::month_long_langcode($_)} } (1..12)) . " ";

        $ret .= LJ::html_text({ 'name' => 'day', 'value' => $bdpart{'day'}, 'size' => '3', 'maxlength' => '2' }) . " ";
        $ret .= LJ::html_text({ 'name' => 'year', 'value' => $bdpart{'year'}, 'size' => '5', 'maxlength' => '4' });
        $ret .= " <span class='helper'>($ML{'.bday.year.opt'})</span>";

        $ret .= "</td></tr>\n";

        # schools
        $ret .= "<tr><td class='field_name'>Schools:</td><td>";

        $ret .= "Show your schools to:  ";
        $ret .= LJ::html_select({ 'name' => 'opt_showschools',
                                  'selected' => $u->{'opt_showschools'} },
                                "Y" => BML::ml(".security.visibility.everybody"),
                                "F" => BML::ml(".security.visibility.friends"),
                                "N"  => "Nobody" );
        $ret .= " &nbsp; <a href='$LJ::SITEROOT/schools/manage.bml'>Manage schools</a></td></tr>\n";
        $ret .= "</table>\n";


        $ret .= "<div class='section_head'>Web Page</div>\n";

        $ret .= "<table class='field_block'>\n";
        # url
        $ret .= "<tr><td class='field_name'>Link:</td><td>";
        $ret .= LJ::html_text({ 'name' => 'url', 'value' => $u->{'url'}, 'size' => '40', 'maxlength' => '255' });
        $ret .= " <span class='helper'>($ML{'.optional'})</span></td></tr>\n";

        # urlname
        $ret .= "<tr><td class='field_name'>Name:</td><td>";
        $ret .= LJ::html_text({ 'name' => 'urlname', 'value' => $u->{'urlname'}, 'size' => '40', 'maxlength' => '255' });
        $ret .= " <span class='helper'>($ML{'.optional'})</span></td></tr>\n";
        $ret .= "</table>\n";


        $ret .= "<div class='section_head'>Location \n";
        $ret .= "<span class='view_options'>";
        $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_showlocation', 'id' => 'opt_showlocation',
                                                 'selected' => $u->{'opt_showlocation'} ne 'N' });
        $ret .= " Show your location to other users</span></div>";

        $ret .= "<table class='field_block'>\n";
        # city
        $ret .= "<tr><td class='field_name'>$ML{'.city.title'}</td><td>";
        $ret .= LJ::html_text({ 'name' => 'city', 'value' => $u->{'city'}, 'size' => '20', 'maxlength' => '255' });
        $ret .= "</td></tr>\n";

        # state
        $ret .= "<tr><td class='field_name'>$ML{'.state.title'}</td><td>";
        $ret .= LJ::html_select({ 'name' => 'statedrop', 'selected' => $u->{'state'} },
                                  '', "($ML{'.state.us'})",
                                  map { $_, $states{$_} } sort { $states{$a} cmp $states{$b} } keys %states );
        # other state?
        $ret .= "<span style='white-space: nowrap'> or non-US State/province/territory ";
        $ret .= LJ::html_text({ 'name' => 'stateother', 'size' => '20', 'maxlength' => '50',
                                'value' => defined $states{$u->{'state'}} ? '' : $u->{'state'} });
        $ret .= "</span></td></tr>\n";

        # zip
        $ret .= "<tr><td class='field_name'>$ML{'.zip.title'}</td><td>";
        $ret .= LJ::html_text({ 'name' => 'zip', 'value' => $u->{'zip'}, 'size' => '6', 'maxlength' => '5' });
        $ret .= " <span class='helper'>($ML{'.zip.usonly'})</span></td></tr>\n";

        # country
        $ret .= "<tr><td class='field_name'>$ML{'.country.title'}</td><td>";
        $ret .= LJ::html_select({ 'name' => 'country', 'selected' => $u->{'country'} },
                                  '', $ML{'.country.choose'},
                                  'US', 'United States',
                                  map { $_, $countries{$_} } sort { $countries{$a} cmp $countries{$b} } keys %countries );
        $ret .= "</td></tr>\n";

        # timezone
        $ret .= "<tr><td class='field_name'>$ML{'.timezone.title'}</td><td>";
        {
            my $map = DateTime::TimeZone::links();
            my $usmap = { map { $_ => $map->{$_} } grep { m!^US/! && $_ ne "US/Pacific-New" } keys %$map };
            my $camap = { map { $_ => $map->{$_} } grep { m!^Canada/! } keys %$map };

            $ret .= LJ::html_select({ 'name' => 'timezone', 'selected' => $u->{'timezone'}, },
                                    "", $ML{'.timezone.select'},
                                    (map { $usmap->{$_}, $_ } sort keys %$usmap),
                                    (map { $camap->{$_}, $_ } sort keys %$camap),
                                    map { $_, $_ } DateTime::TimeZone::all_names());
        }
        $ret .= "</table>\n";


        ## CONTACT INFO
        $ret .= "<div class='section_head'>Contact Info \n";

        # contactshow_sec
        $ret .= "<span class='view_options'>$ML{'.security.header'} ";
        $ret .= LJ::html_select({ 'name' => 'allow_contactshow',
                                  'selected' => $u->{'allow_contactshow'} },
                                  "Y" => BML::ml(".security.visibility.everybody"),
                                  "F" => BML::ml(".security.visibility.friends"),
                                  "N" => "Nobody" );
        $ret .= "</span></div>\n";

        $ret .= "<table class='field_block'>\n";
        $ret .= "</td></tr>\n";

        # email
        $ret .= "<tr><td colspan='2'>$ML{'.email.title'}</td><tr>";
        $ret .= "<tr><td class='field_name'>Primary email:</td><td>\n";
        if ($LJ::EMAIL_CHANGE_REQUIRES_PASSWORD) {
            $ret .= "<b>$u->{email}</b> &nbsp; <a href='$LJ::SITEROOT/changeemail.bml$getextra'>Change email</a>";
        } else {
            $ret .= LJ::html_text({ 'name' => 'email', 'value' => $u->{'email'}, 'size' => '40', 'maxlength' => '50' });
        }

        # opt_whatemailshow
        $ret .= "<br />\nEmail address(es) to be displayed: ";
        my $cur = $u->{'opt_whatemailshow'};
        my @vals = ( ($LJ::USER_EMAIL && LJ::get_cap($u, "useremail"))
                     ? ("A" => 'Primary email only',
                        "L" => 'LiveJournal email only',
                        "B" => 'Both (primary email + LiveJournal email)',
                        "N" => 'Don\'t display my email address')
                     : ("A" => BML::ml(".allowshowcontact.email.show"),
                        "N" => BML::ml(".allowshowcontact.email.no_show")));
        $ret .= LJ::html_select({ 'name' => 'opt_whatemailshow', 'selected' => $cur }, @vals) . "\n";

        $ret .= "</td></tr>\n";


        # chat thingies

        $ret .= "<tr><td colspan='2'>&nbsp;</td></tr>\n";
        $ret .= "<tr><td colspan='2'>IM/Chat</td></tr>\n";

        $u->{'gizmo'} = $u->gizmo_account();
        foreach my $p (["aolim", $ML{'.chat.aolim.title'}, 28], ["icq", $ML{'.chat.icquin.title'}, 12],
                       ["yahoo", $ML{'.chat.yahooid.title'}, 33], ["msn", $ML{'.chat.msnusername.title'}, 60],
                       ["jabber", $ML{'.chat.jabber.title'}, 60], ["google_talk", $ML{'.chat.googletalk.title'}, 60],
                       ["skype", $ML{'.chat.skype.title'}, 40], ["gizmo", $ML{'.chat.gizmo.title'}, 40 ])

        {
            $ret .= "<tr><td class='field_name'>$p->[1]</td><td>";
            $ret .= LJ::html_text({ 'name' => $p->[0], 'value' => $u->{$p->[0]}, 'size' => '20', 'maxlength' => $p->[2] });
            $ret .= "</td></tr>\n";
        }
        $ret .= "</td></tr>\n";

        $ret .= "</table>\n";

        ## TEXT MESSAGING

        if (LJ::get_cap($u, "textmessaging"))
        {
            $ret .= "<div class='section_head'>$ML{'.tm.title'}\n";

            my $tminfo = LJ::TextMessage->tm_info($u);
            foreach (values %$tminfo) { LJ::text_out(\$_); }
            $tminfo->{'security'} = "N" if ($u->{'txtmsg_status'} eq 'off' || $u->{'txtmsg_status'} eq 'none');

            $ret .= "<span class='view_options'>Allow text messaging from: ";
            $ret .= LJ::html_select({ 'name' => 'txtmsg_security', 'selected' => $tminfo->{'security'} },
                                      "all" => BML::ml(".security.visibility.anybody"),
                                      "reg" => BML::ml(".security.visibility.regusers"),
                                      "friends" => BML::ml(".security.visibility.friends"),
                                      "N"   => 'Nobody' );
            $ret .= "</span></div>\n";

            $ret .= "<table class='field_block'>\n";

            foreach (values %$tminfo) { LJ::text_out(\$_); }

            $ret .= "<tr><td class='field_name'>$ML{'.tm.servprov'}:</td><td>";
            {
                my @opts = ("", "");
                foreach my $p (LJ::TextMessage::providers()) {
                    my $info = LJ::TextMessage::provider_info($p);
                    push @opts, ($p, $info->{'name'});
                }
                $ret .= LJ::html_select({ 'name' => 'txtmsg_provider',
                                          'selected' => $tminfo->{'provider'}, },
                                          @opts);
            }

            $ret .= " " . BML::ml('.tm.details2', {'aopts' => "href='$LJ::SITEROOT/tools/textmessage.bml?mode=details'"}) . "</td></tr>\n";
            $ret .= "<tr><td class='field_name'>$ML{'.tm.phonenum'}</td><td>";
            $ret .= LJ::html_text({ 'name' => 'txtmsg_number',  'value' => $tminfo->{'number'},
                                    'size' => '15', 'maxlength' => '40' });
            $ret .= "</td></tr>\n";
            $ret .= "</table>\n";
        }

        ## FRIENDS
        $ret .= "<div class='section_head'>Friends</div>\n";

        $ret .= "<table class='field_block'>\n";

        # opt_showmutualfriends
        $ret .= "<tr><td class='field_name'><label for='opt_showmutualfriends'>Mutual friends</label></td><td>";
        $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_showmutualfriends', 'id' => 'opt_showmutualfriends',
                                 'selected' => $u->{'opt_showmutualfriends'} });
        $ret .= " Show friends who have also friended you</td></tr>\n";

        # opt_hidefriendofs
        $ret .= "<tr><td class='field_name'><label for='opt_hidefriendofs'>\"Friend of\" list</label></td><td>";
        $ret .= LJ::html_check({ 'type' => 'check', 'name' => 'opt_hidefriendofs', 'id' => 'opt_hidefriendofs',
                                 'selected' => ! $u->{'opt_hidefriendofs'} });
        $ret .= " Show other users who have friended you, but you have not friended</td></tr>\n";

        $ret .= "</table>\n";

        ## INTERESTS

        {
            ### Interests
            $ret .= "<div class='section_head'>$ML{'.int.header'}</div>\n";
            my @eintsl;
            foreach (sort keys %interests) {
                push @eintsl, $_ if LJ::text_in($_);
            }

            $ret .= "<table class='field_block'>\n";

            $ret .= "<tr><td colspan='2'>List all your interests, separated by commas, to allow
                other users to find you using the Interest Search.</td></tr>";
            $ret .= "<tr><td>";
            $ret .= LJ::html_textarea({ 'name' => 'interests', 'value' => join(", ", @eintsl),
                                        'rows' => '10', 'cols' => '50', 'wrap' => 'soft' });
            $ret .= "</td><td class='example'><?p Short single-word phrases are best. p?>";
            $ret .= "<?p Rule of thumb: You should be able to put the
                interest in the sentence \"I like ________\". p?>";
            $ret .= "<?p When referring to nouns, use the plural form for
                consistency, e.g.: \"I like DVDs\" instead of \"I like DVD\". p?>";
            $ret .= "<?p <font color='#009000'><b>GOOD</b></font> Example: <b>biking, snow skiing, computers, dvds, mp3s, cheese</b> p?>";
            $ret .= "<?p <font color='#ff0000'><b>BAD</b></font> Example: <b>I like lots of bands and watching movies and talking to friends and going to clubs.</b>  That sort of stuff goes in your bio below. p?>";
            $ret .= "</td></tr>\n\n";

            $ret .= "</table>\n";
        }

        ## BIO

        ### User bio
        $ret .= "<div class='section_head'>Bio</div>";
        if (LJ::text_in($saved{'bio'})) {
            $ret .= "<table class='field_block'>";
            $ret .= "<tr><td colspan='2'>Tell other users about yourself or your journal . If you
                want to display graphics, counters, memes, etc., enter the HTML here<br />\n";
            $ret .= LJ::html_textarea({ 'name' => 'bio', 'rows' => '10', 'cols' => '50',
                                        'wrap' => 'soft', 'value' => $u->{'bio'}, 'style' => "width: 90%", }) . "</td></tr>\n";
            $ret .= "</table>\n";
        } else {
            $ret .= LJ::html_hidden('bio_absent', 'yes');
            $ret .= "<?p <?inerr " . BML::ml('.error.invalidbio2', {'aopts' => "href='$LJ::SITEROOT/utf8convert.bml'"}) . " inerr?> p?>\n";
        }

        # ending submit block
        $ret .= "<?standout " . LJ::html_submit(undef, $ML{'.finished.save_button'}) . " standout?>\n";
        $ret .= "</form>\n";

        return $ret;
    }


    ###
    ### we have a post, process edits
    ###

    if (LJ::did_post()) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>" unless LJ::check_form_auth();

        return "<?badinput?>" unless LJ::text_in(\%POST);

        my @errors = ();

        # name
        unless (LJ::trim($POST{'name'}) || defined($POST{'name_absent'})) {
            push @errors, $ML{'.error.noname'};
        }

        # state and zip
        my ($zipcity, $zipstate);
        if ($POST{'country'} eq "US") {
            $sth = $dbr->prepare("SELECT city, state FROM zip WHERE zip=?");
            $sth->execute($POST{'zip'});
            ($zipcity, $zipstate) = $sth->fetchrow_array;
        }

        # country
        if ($POST{'country'} ne "US" && $POST{'zip'}) {
            push @errors, $ML{'.error.locale.zip_requires_us'};
        }

        if ($POST{'country'} eq "US" && $POST{'stateother'}) {
            push @errors, $ML{'.error.locale.country_ne_state'};
        } elsif ($POST{'country'} && $POST{'country'} ne "US" && $POST{'statedrop'}) {
            push @errors, $ML{'.error.locale.state_ne_country'};
        }

        # zip-code validation stuff
        if ($POST{'country'} eq "US") {
            if ($POST{'statedrop'} && $zipstate && $POST{'statedrop'} ne $zipstate) {
                push @errors, $ML{'.error.locale.zip_ne_state'};
            }
            if ($zipcity) {
                $POST{'statedrop'} = $zipstate;
                $POST{'city'} = $zipcity;
            }
        }

        if ($POST{'country'} && !defined($countries{$POST{'country'}})) {
            push @errors, $ML{'.error.locale.invalid_country'};
        }

        # birthday
        my $this_year = (localtime())[5]+1900;

        if ($POST{'year'} && $POST{'year'} < 100) {
            push @errors, $ML{'.error.year.notenoughdigits'};
        }

        if ($POST{'year'} && $POST{'year'} >= 100 && ($POST{'year'} < 1890 || $POST{'year'} > $this_year)) {
            push @errors, $ML{'.error.year.outofrange'};
        }

        if ($POST{'month'} && ($POST{'month'} < 1 || $POST{'month'} > 12)) {
            push @errors, $ML{'.error.month.outofrange'};
        }

        if ($POST{'day'} && ($POST{'day'} < 1 || $POST{'day'} > 31)) {
            push @errors, $ML{'.error.day.outofrange'};
        }

        if (@errors == 0 && $POST{'day'} > LJ::days_in_month($POST{'month'}, $POST{'year'})) {
            push @errors, $ML{'.error.day.notinmonth'};
        }

        # email
        if (!$POST{'email'} && !$LJ::EMAIL_CHANGE_REQUIRES_PASSWORD) {
            push @errors, $ML{'.error.email.none'};
        }

        if ($LJ::USER_EMAIL and $POST{'email'} =~ /\@\Q$LJ::USER_DOMAIN\E$/i) {
            push @errors, BML::ml(".error.email.lj_domain", { 'user' => $u->{'user'}, 'domain' => $LJ::USER_DOMAIN, });
        }

        if ($POST{'email'} =~ /\s/) {
            push @errors, $ML{'.error.email.no_space'};
        }

        unless (@errors) {
            LJ::check_email($POST{'email'}, \@errors) if !$LJ::EMAIL_CHANGE_REQUIRES_PASSWORD;
        }

        # text messaging
        if ($POST{'txtmsg_security'} =~ m/^(all|reg|friends)$/) {
            unless ($POST{'txtmsg_provider'}) {
                push @errors, $ML{'.error.tm.require_provider'};
            }
            unless ($POST{'txtmsg_number'}) {
                push @errors, $ML{'.error.tm.require.number'};
            }
        }

        return LJ::bad_input(@errors) if @errors;

        ### no errors

        my $dbh = LJ::get_db_writer();

        my $email_changed = (($u->{'email'} ne $POST{'email'}) && !$LJ::EMAIL_CHANGE_REQUIRES_PASSWORD);
        if ($email_changed) {
            # record old email address;
            LJ::infohistory_add($u, 'email', $u->{email}, $u->{status});

            $u->log_event('email_change', { remote => $remote, new => $POST{'email'} });

            LJ::run_hook('post_email_change',
                         {
                             user     => $u,
                             newemail => $POST{'email'},
                         });
          }

        $POST{'url'} =~ s/\s+$//; $POST{'url'} =~ s/^\s+//;
        if ($POST{'url'} && $POST{'url'} !~ /^https?:\/\//) {
            $POST{'url'} =~ s/^http\W*//;
            $POST{'url'} = "http://$POST{'url'}";
        }

        my $newname = defined $POST{'name_absent'} ? $saved{'name'} : $POST{'name'};
        $newname =~ s/[\n\r]//g;
        $newname = LJ::text_trim($newname, LJ::BMAX_NAME, LJ::CMAX_NAME);

        my $newbio = defined($POST{'bio_absent'}) ? $saved{'bio'} : $POST{'bio'};
        my $has_bio = ($newbio =~ /\S/) ? "Y" : "N";
        my $txtmsg_status = $POST{'txtmsg_security'} =~ m/^(all|reg|friends)$/ ? "on" : "off";
        my $old_txtmsg_status = $u->{'txtmsg_status'};
        # setup what we're gonna update in the user table:
        my %update = (
                      'name' => $newname,
                      'bdate' => sprintf("%04d-%02d-%02d", $POST{'year'}, $POST{'month'}, $POST{'day'}),
                      'status' => ($email_changed && $u->{'status'} eq "A") ? "T" : $u->{'status'},
                      'has_bio' => $has_bio,
                      'allow_getljnews' => $POST{'allow_getljnews'} ? "Y" : "N",
                      'opt_showtalklinks' => $POST{'opt_showtalklinks'} ? "Y" : "N",
                      'opt_gettalkemail' => $POST{'opt_gettalkemail'} ? "Y" : "N",
                      'opt_htmlemail' => $POST{'opt_htmlemail'} ? "Y" : "N",
                      'opt_mangleemail' => $POST{'opt_mangleemail'} ? "Y" : "N",
                      'opt_whocanreply' => $POST{'opt_whocanreply'},
                      'txtmsg_status' => $txtmsg_status,
                      );

        $update{'email'} = $POST{'email'} unless $LJ::EMAIL_CHANGE_REQUIRES_PASSWORD;

        if ($POST{'allow_contactshow'}) {
            $update{'allow_contactshow'} = "Y";
            $update{'allow_contactshow'} = "F" if $POST{'allow_contactshow'} eq "F";
            $update{'allow_contactshow'} = "R" if $POST{'allow_contactshow'} eq "R";
        } else {
            $update{'allow_contactshow'} = "N";
        }

        if (defined $POST{'oldenc'}) {
            $update{'oldenc'} = $POST{'oldenc'};
        }

        LJ::update_user($u, \%update);

        ### change any of the userprops ?
        {
            # opts
            $POST{'opt_showmutualfriends'} = $POST{'opt_showmutualfriends'} ? 1 : 0;
            $POST{'opt_hidefriendofs'} = $POST{'opt_hidefriendofs'} ? 0 : 1;
            if ($POST{'opt_logcommentips'} ne "N" &&
                $POST{'opt_logcommentips'} ne "S" &&
                $POST{'opt_logcommentips'} ne "A") { $POST{'opt_logcommentips'} = "N"; }
            $POST{'opt_showschools'} = 'N' unless $POST{'opt_showschools'} =~ m/^(N|R|Y|F)$/;
            # undefined means show to everyone, "N" means don't show
            $POST{'opt_showbday'} = $POST{'opt_showbday'} ? undef : "N";
            $POST{'opt_showlocation'} = $POST{'opt_showlocation'} ? undef : "N";

            $POST{'timezone'} = "" unless grep { $POST{'timezone'} eq $_ } DateTime::TimeZone::all_names();

            # for the directory.
            $POST{'sidx_bdate'} = "";
            $POST{'sidx_loc'} = "";
            $POST{'state'} = $POST{'statedrop'} || $POST{'stateother'};

            $POST{'sidx_bday'} = sprintf("%02d-%02d", map { $POST{$_} } qw(month day));
            $POST{'sidx_bday'} = undef if $POST{'sidx_bday'} =~ /00/;

            if (! defined $POST{'opt_showbday'}) {
                if ($POST{'year'}) {
                    $POST{'sidx_bdate'} = sprintf("%04d-%02d-%02d", map { $POST{$_} }
                                                  qw(year month day));
                }
            } else {
                $POST{'sidx_bdate'} = undef;
            }

            if (! defined $POST{'opt_showlocation'}) {
                if ($POST{'country'}) {
                    my $state;
                    if ($POST{'country'} eq "US") {
                        $state = $POST{'statedrop'};
                    } else {
                        $state = $POST{'stateother'};
                    }
                    $POST{'sidx_loc'} = sprintf("%2s-%s-%s",
                                                $POST{'country'},
                                                $state,
                                                $POST{'city'});
                }
            } else {
                $POST{'sidx_loc'} = undef;
            }

            my @uprops = qw(
              opt_whatemailshow
              country state city zip timezone
              icq aolim yahoo msn url jabber
              google_talk skype
              urlname gender opt_hidefriendofs
              sidx_bdate sidx_bday sidx_loc
              opt_showmutualfriends opt_showschools
              opt_showbday opt_showlocation
            );

            # reset the gizmo account for this user account
            $u->gizmo_account( $POST{'gizmo'} )
                if $u->gizmo_account ne $POST{'gizmo'};

            # set userprops
            foreach my $uprop (@uprops) {
                my $eff_val = $POST{$uprop};   # effective value, since 0 isn't stored
                $eff_val = "" unless $eff_val;
                my $mem_only = $eff_val eq $u->{$uprop};
                LJ::set_userprop($u, $uprop, $eff_val, $mem_only);
            }
        }

        # update their bio text
        if (($u->{'bio'} ne $POST{'bio'}) && !defined($POST{'bio_absent'})) {
            if ($has_bio eq "N") {
                $u->do("DELETE FROM userbio WHERE userid=?", undef, $u->{'userid'});
                $u->dudata_set('B', 0, 0);
            } else {
                $u->do("REPLACE INTO userbio (userid, bio) VALUES (?, ?)",
                       undef, $u->{'userid'}, $POST{'bio'});
                $u->dudata_set('B', 0, length($POST{'bio'}));
            }
            LJ::MemCache::set([$u->{'userid'}, "bio:$u->{'userid'}"], $POST{'bio'});
        }

        # update their text messaging info
        if ($txtmsg_status eq "off" && $old_txtmsg_status eq "on") {
            $dbh->do("DELETE FROM txtmsg WHERE userid=?", undef, $u->{'userid'});
        } elsif ($txtmsg_status eq "on") {
            $dbh->do("REPLACE INTO txtmsg (userid, provider, number, security) VALUES (?, ?, ?, ?)",
                     undef, $u->{'userid'}, $POST{'txtmsg_provider'}, $POST{'txtmsg_number'}, $POST{'txtmsg_security'});
        }

        # update interests
        unless ($POST{'interests_absent'}) {
            $POST{'interests'} =~ s/^\s+//;
            $POST{'interests'} =~ s/\s+$//;
            $POST{'interests'} =~ s/\n/,/g;
            $POST{'interests'} =~ s/\s+/ /g; #Strip duplicate spaces from the interest
            my @ints = split (/\s*,\s*/, $POST{'interests'});
            my $intcount = scalar(@ints);
            if ($intcount > 150) {
                return LJ::bad_input(BML::ml(".error.excessive_int", {'intcount' => $intcount}));
            }
            LJ::set_interests($u, \%interests, \@ints);
        }

        # actions if email changed
        if ($email_changed) {
            my $aa = {};
            $aa = LJ::register_authaction($u->{'userid'},
                                          "validateemail", $POST{'email'});

            LJ::send_mail({
                'to' => $POST{'email'},
                'from' => $LJ::ADMIN_EMAIL,
                'charset' => 'utf-8',
                'subject' => $ML{'.newemail.subject'},
                'body' => BML::ml('.newemail.body2',
                                  { username => $u->{user},
                                    sitename => $LJ::SITENAME,
                                    sitelink => $LJ::SITEROOT,
                                    conflink => "$LJ::SITEROOT/confirm/$aa->{'aaid'}.$aa->{'authcode'}" }),
            });
        }

        # tell the user all is well
        my $base = $u->journal_base;
        my $profile_url = $u->profile_url;
        return "<?h1 $ML{'.success.header'} h1?>\n" .
               "<?p Your profile has been updated. p?>";
    }

    # should never happen
    return "<?h1 $ML{'Error'} h1?><?p $ML{'error.unknownmode'} p?>";

}
_code?>

<=body
head<=
<?_code
    LJ::need_res('stc/lj_base.css', 'stc/lj_settings.css');
    return $head;
_code?>
<=head
page?><?_c <LJDEP>
lib: LJ::TextMessage, cgi-bin/ljlib.pl, cgi-bin/ljlang.pl
link: htdocs/legal/privacy.bml, htdocs/support/faqbrowse.bml, htdocs/tools/textmessage.bml, htdocs/uploadpic.bml
link: htdocs/paidaccounts/index.bml, htdocs/users, htdocs/userinfo.bml
post: htdocs/manage/profile
img: htdocs/userpic
</LJDEP> _c?>


