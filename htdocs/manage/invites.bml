<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use LJ::TimeUtil;

    use vars qw(%POST);

    LJ::set_active_crumb('comminvites');

    return LJ::server_down_html()
        if $LJ::SERVER_DOWN;

    my $remote = LJ::get_remote();
    return "<?needlogin?>"
        unless $remote;
        
    # always have links at top
    my $ret;

    LJ::need_res('stc/invites.css');

    my $lang = $remote->prop('browselang') || $LJ::DEFAULT_LANG;
    my $authas = $GET{authas};
    my $view_only_mode = 0;
    my $u = LJ::get_effective_remote;
    if ( $authas && !$u ) {
    	$u = LJ::load_user($authas);
        if ( LJ::priv_can_view("/manage/invites.bml", $remote) ) {
            my $warn_foreign = LJ::Lang::get_text(
                $lang,
                'error.warn_foreing',
                undef,
                { username   => $u->ljuser_display, }
            );
            $ret .= "<?warningbar $warn_foreign warningbar?><br />";
            $view_only_mode = 1;
        } else {
            $ret .= "<?h1 $ML{'Error'} h1?><?p ";
            my $privs = LJ::priv_for_page("/manage/invites.bml");
            if ( $privs ) {
                $ret .= LJ::Lang::get_text(
                    $lang,
                    'error.no_permission',
                    undef,
                    {
                        username   => $u->ljuser_display,
                        priv       => $privs,
                    }
                );
            } else {
                return LJ::bad_input($ML{'error.invalidauth'});
            }
            $ret .= " p?>";
            return $ret;
        }
    }
    return LJ::bad_input($ML{'error.invalidauth'}) unless $u;
    
    return $LJ::MSG_READONLY_USER
        if LJ::get_cap($u, "readonly");

    # get pending invites
    my $pending = LJ::get_pending_invites($u) || [];

    # short out?
    unless (@$pending) {
    	$ret .= "<?h1 $ML{'.none.title'} h1?><?p $ML{'.none.body'} p?>";
        return $ret;
    }

    # load communities and maintainers
    my @ids;
    push @ids, ($_->[0], $_->[1]) foreach @$pending;
    my $us = LJ::load_userids(@ids);

    # all possible attributes
    my @allattribs = ('member', 'post', 'preapprove', 'moderate', 'admin');

    # see if they posted and if we should take actions
    if (LJ::did_post()) {
    	return LJ::bad_input($ML{'error.invalidauth'}) if $view_only_mode;
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();
        
        my (@accepted, @rejected, @undecided);
        foreach my $invite (@$pending) {
            my ($commid, $maintid, $date, $argline) = @$invite;
            my $args = {};
            LJ::decode_url_string($invite->[3], $args);

            # now take actions?
            if ($POST{"pending_$commid"} eq 'yes') {
                my $rval = LJ::accept_comm_invite($u, $us->{$commid});
                push @accepted, [ $commid, $args ] if $rval;
                unless ($rval) {
                    return "<?h1 $ML{'error'} h1?><?p " . LJ::last_error() . " p?>";
                }
            } elsif ($POST{"pending_$commid"} eq 'no') {
                my $rval = LJ::reject_comm_invite($u, $us->{$commid});
                push @rejected, $commid if $rval;
            } else {
                push @undecided, $commid;
            }
        }

        # communities they've joined
        if (@accepted) {
            $ret .= "<?h1 $ML{'.accepted.title'} h1?><?p $ML{'.accepted.body'} p?><ul>";
            foreach my $row (@accepted) {
                $ret .= "<li>" . LJ::ljuser($us->{$row->[0]}, { type => 'C' }) . ": ";
                foreach my $attrib (@allattribs) {
                    $ret .= "$ML{\".label.$attrib\"}, " if $row->[1]{$attrib};
                }
                chop $ret; chop $ret;
                $ret .= "</li>\n";
            }
            $ret .= "</ul>";
        }

        # communities they rejected
        if (@rejected) {
            $ret .= "<?h1 $ML{'.rejected.title'} h1?><?p $ML{'.rejected.body'} p?><ul>";
            $ret .= "<li>" . LJ::ljuser($us->{$_}, { type => 'C' }) . "</li>\n" foreach @rejected;
            $ret .= "</ul>";
        }

        # now print out undecided results
        if (@undecided) {
            $ret .= "<?h1 $ML{'.undecided.title'} h1?><?p $ML{'.undecided.body'} p?><ul>";
            $ret .= "<li>" . LJ::ljuser($us->{$_}, { type => 'C' }) . "</li>\n" foreach @undecided;
            $ret .= "</ul>";
        }
        
        return $ret;
    }
    
    # prepare table
    $ret .= "<form method='post'>\n<div align='center'><table id='invites-list' class='alternating-rows' cellspacing='0' cellpadding='0'>";
    $ret .= LJ::form_auth();
    $ret .= "<tr><th>$ML{'.community.title'}</th><th>$ML{'.abilities.title'}</th>";
    $ret .= "<th colspan='2'>$ML{'.actions.title'}</th>";
    $ret .= "</tr>";

    # now list memberships
    my $rc = 0;
    foreach my $invite (@$pending) {
        # get variables we'll need for HTML generatrion
        my $rstyle = ($rc++ & 1) ? "altrow2" : "altrow1";
        my $cu = $us->{$invite->[0]};
        next unless $cu->is_community;
        my $key = "pending_$invite->[0]";
        my @tags = ();
        my $args = {};
        LJ::decode_url_string($invite->[3], $args);
        foreach (@allattribs) {
            push @tags, $ML{".label.$_"} if $args->{$_};
        }
        my $ename = LJ::ehtml($cu->{name});
        my $date = LJ::TimeUtil->mysql_time($invite->[2]);

        # if invited by a suspended user do not allow this user to accept
        if ($us->{$invite->[1]}->is_suspended) {
            $ret .= "<tr class='$rstyle'><td class='invite-info notice' colspan='4'>$ML{'.error.invitersuspended'}</td></tr>";
            next;
        }

        # now generate HTML
        $ret .= "<tr class='$rstyle'><td class='invite-info'>" . LJ::ljuser($cu, { type => 'C' }) . " <br />$ename<br /><span class='invite-from'>";
        $ret .= BML::ml('.fromline', { user => LJ::ljuser($us->{$invite->[1]}, { type => 'P' }), date => $date });
        $ret .= "</span></td>";
        $ret .= "<td>" . join(', ', @tags) . "</td>";
        $ret .= "<td class='invite-accept'>" . LJ::html_check({ type => 'radio', name => $key, id => "yes$key", value => 'yes' });
        $ret .= " <label for='yes$key'>$ML{'.accept'}</label></td>\n";
        $ret .= "<td class='invite-decline'>" . LJ::html_check({ type => 'radio', name => $key, id => "no$key", value => 'no' });
        $ret .= " <label for='no$key'>$ML{'.decline'}</label></td>";
        $ret .= "</tr>";
    }

    # all done
    $ret .= "</table><br />";
    $ret .= "<?standout" . LJ::html_submit('submit', $ML{'.submit'}) . "standout?>";
    $ret .= "</div></form>";
        
    return $ret;

} _code?>
<=body
page?>
