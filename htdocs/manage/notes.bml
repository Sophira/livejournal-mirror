<?page
title=><?_code return $ML{'.title'}; _code?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);
    use JSON;

    my $max_alias_length = 400; # max allowed chars(?) or bytes in alias

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    LJ::set_active_crumb('aliases');

    my $u = LJ::get_remote();
    return "<?needlogin?>" unless $u;
    return $LJ::MSG_READONLY_USER if LJ::get_cap($u, "readonly");
    return "<?h1 " . BML::ml('.not.allowed', { aopts => "href='$LJ::SITEROOT/paidaccounts/'" } ) . " h1?>" unless $u->get_cap('aliases');

    my $ret = '';
    my $aliases = jsonToObj($u->prop('aliases')) || {};

    ### user is now authenticated ###
    
    my $key = 'new_aliases';

    # if a POST, update their info
    if (LJ::did_post()) {
        my $new_user = delete $POST{$key."new_user"};
        my $new_alias = delete $POST{$key."new_alias"};
        return "<?badinput?>" unless LJ::text_in(\%POST);
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my @a_new_user  = split /\0/, $new_user;
        my @a_new_alias = split /\0/, $new_alias;
        foreach my $alias (@a_new_alias) {
            $alias = substr($alias, 0, $max_alias_length);
        }

        my @userid_list = split /\|/, $POST{$key."_user_list"};
        foreach my $userid (@userid_list) {
            my $user_alias = $POST{$key.$userid};
            $user_alias = substr($user_alias, 0, $max_alias_length);
            if (($POST{"delete_btn"} ne '' && $POST{"check".$userid} eq 'on') || $user_alias eq '') {
                delete $aliases->{$userid};
            } elsif ($user_alias ne '' && $POST{"save_btn"} ne '') {
                $aliases->{$userid} = $user_alias;
            }
        }

        my $error = '';
        my @not_exists_users = ();

        foreach my $idx (0..$#a_new_user) {

            next unless $a_new_user[$idx];

            my $adding_u = LJ::load_user($a_new_user[$idx]);

            unless ($adding_u) {
                push @not_exists_users, $a_new_user[$idx];
                next;
            }

            $aliases->{$adding_u->{userid}} = $a_new_alias[$idx] 
                if $adding_u->{user} ne $u->{user} && $a_new_alias[$idx];
        }

        my $ready_aliases = objToJson($aliases);
        if (length $ready_aliases < 65536) {
            $u->set_prop( aliases => $ready_aliases );
        } else {
            $error .= "<?p ".BML::ml('.error.too.long')." p?>";
        }

        $error .= "<?p ".BML::ml('.error.user_not_exist', { username => join (", ", @not_exists_users) } )." p?>" if scalar @not_exists_users;
        $error .= "<?p ".BML::ml('.error.yourself')." p?>" if scalar grep { $u->{user} eq $_ } @a_new_user;
        
        # tell the user all is well
        if ($error) {
            $ret .= "<?h1 $ML{'Error'} h1?>$error";
        } else {
            $ret .= "<?h1 $ML{'.success.head'} h1?><?p $ML{'.success.saved'} p?>";
        }
    }

    # now show edit form
    
    $ret .= "<form method='post'>\n";
    $ret .= LJ::form_auth();
    
    $ret .=q|<script type='text/javascript'>
	    function addAliasLine(){
		    var newTR2=document.createElement('tr');
		    var newTD2_1=document.createElement('td');
		    var newTD2_2=document.createElement('td');
		    DOM.addClassName(newTD2_2,'user_alias');
		    newTD2_1.innerHTML="<input id=\"new-useralias\" type=\"text\" name=\"new_aliasesnew_user\"/>";
		    newTD2_2.innerHTML="<input type=\"text\" maxlenght=\"$max_alias_length\" size=\"50\" name=\"new_aliasesnew_alias\"/>";
		    newTR2.appendChild(newTD2_1);
		    newTR2.appendChild(newTD2_2);
		    moreBtn=$('adding-more-alias');
		    var aliasTable=DOM.getElementsByClassName(document,'aliaslist-table')[0].firstChild;
		    aliasTable.insertBefore(newTR2,aliasTable.lastChild);
		    return false;
	    }
        var errmsg_change = '|.LJ::ejs($ML{'.error.override_old_value'}).q|';
	    </script>|;	

    $ret .= q|<table class="aliaslist-table">|;
    
    my @userid_list = ();
    my $us = LJ::load_userids(keys %$aliases);
    foreach my $userid (keys %$aliases) {
        delete $aliases->{$userid} unless $us->{$userid}; # need safe sort below
    }
    my $users_list_html = '';
    foreach my $userid (sort { $us->{$a}->display_name cmp $us->{$b}->display_name } keys %$aliases) {
        my $u = $us->{$userid};
        $users_list_html .= q|<tr><td>|.LJ::ljuser($u->{user}).q|</td><td class="user_alias"><input type="text" name="|.$key.$userid.q|" value="|
                .LJ::ehtml(LJ::ljuser_alias($u->{user})).q|" size="50" maxlength="200">|
                .LJ::html_check({ 'type' => 'check',
                                  'name' => "check".$userid,
                                  'id' => "check".$userid,
                                  'value' => 'on' })
                .q|</td></tr>|."\n";
        push @userid_list, $userid;
    }
    $ret .= q|<tr class="newalias"><td colspan="2"><label for="new-useralias">|. $ML{'.alias.header.newalias'} .q|</label></td></tr>|."\n";
    $ret .= q|<tr><td><input type="text" name="|.${key}.q|new_user" id="new-useralias"></td><td class="user_alias"><input type="text" name="|.${key}.q|new_alias" size="50" maxlenght="200"></td></tr>|."\n";
    $ret .= q|<input type="hidden" name="|.${key}.q|_user_list" value="|.join('|', @userid_list).q|">|."\n";
	$ret .= q|<tr><td colspan="2"><a href="javascript:void(0)" id="adding-more-alias" onclick="addAliasLine()">|. $ML{'.alias.aliaslist.more'} .q|</a></td></tr>|;
    $ret .= q|<tr><th>|. $ML{'.alias.header.username'} .q|</th><th>|.$ML{'.alias.header.alias'} .q|</th></tr>|."\n";
    $ret .= $users_list_html;
    $ret .= q|</table>|."\n";

	

    ### ending submit block
    $ret .= "<?standout " . LJ::html_submit("save_btn", $ML{'.done.btn.savechanges'}) . " " . LJ::html_submit("delete_btn", $ML{'.done.btn.delete'}) . " standout?>\n";
    $ret .= "</form>\n";

    return $ret;

}
_code?>

<=body
page?>
