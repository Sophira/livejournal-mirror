<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%GET);

    # for error reporting
    my $err = sub {
        return "<h2>Error</h2>" . shift;
    };

    my $u = FB::get_remote();

    my $id = $GET{'id'};
    return BML::redirect('layerbrowse') unless $id =~ /^\d+$/;

    my $pub = FB::get_public_layers();
    my $lay = defined $pub->{$id} ? $pub->{$id} : FB::load_layer($id);
    return $err->("The specified layer does not exist.")
        unless $lay;

    my $layerinfo = {};
    FB::load_layer_info($layerinfo, [ $id ]);
    my $srcview = exists $layerinfo->{$id}->{'source_viewable'} ?
        $layerinfo->{$id}->{'source_viewable'} : undef;

    # authorized to view this layer?
    return $err->("You are not authorized to view this layer.")
        unless defined $pub->{$id} && (! defined $srcview || $srcview != 0) ||
               $srcview == 1 || $u && $u->{'userid'} == $lay->{'userid'};

    my $dbr = FB::get_db_reader();
    my $s2code = $dbr->selectrow_array("SELECT s2code FROM s2source WHERE s2lid=?", undef, $id);

    # get html version of the code?
    if ($GET{'fmt'} eq "html") {
        my $html;
        my ($md5, $save_cache);
        if ($pub->{$id}) {
            # let's see if we have it cached
            $md5 = Digest::MD5::md5_hex($s2code);
            my $cache = $dbr->selectrow_array("SELECT value FROM blobcache WHERE bckey='s2html-$id'");
            if ($cache =~ s/^\[$md5\]//) {
                $html = $cache;
            } else {
                $save_cache = 1;
            }
        }

        unless ($html) {
            my $cr = new S2::Compiler;
            $cr->compile_source({
                'source' => \$s2code,
                'output' => \$html,
                'format' => "html",
                'type' => $pub->{$id}->{'type'},
            });
        }

        if ($save_cache) {
            my $dbh = FB::get_db_writer();
            $dbh->do("REPLACE INTO blobcache (bckey, dateupdate, value) VALUES (?,UNIX_TIMESTAMP(),?)",
                     undef, "s2html-$id", "[$md5]$html");
        }
        return $html;
    }

    # return text version
    BML::set_content_type("text/plain");
    BML::noparse();
    return $s2code;
}
_code?>
