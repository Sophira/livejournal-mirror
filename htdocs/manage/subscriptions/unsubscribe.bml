<?_code
    use strict;
    use warnings;

    # External modules
    use Digest::MD5 qw/md5_hex/;

    # Internal modules
    use LJ::Request;
    use LJ::Response::Template;

    my $user    = LJ::Request->get_param('user');
    my $hash    = LJ::Request->get_param('hash');
    my $subs_id = LJ::Request->get_param('subs_id');
    my $remote  = LJ::get_remote();

    $user =~ s/[^\w]+//g;

    unless ($remote) {
        $remote = LJ::load_user($user);
    }

    unless ($remote) {
        return LJ::Response::Redirect->new(where => $LJ::SITEROOT)->output;
    }

    unless ($hash eq md5_hex($user, $LJ::ESN_UNSUBSCR_SECRET_CODE)) {
        return LJ::Response::Redirect->new(where => $LJ::SITEROOT)->output;
    }

    $subs_id =~ s/[^\d,]+//g;

    my @subs    = ();
    my @subs_id = split ',', $subs_id;

    if (@subs_id) {
        foreach my $sub_id (@subs_id) {
            my $sub = LJ::Subscription->new_by_id($remote, $sub_id);

            next unless $sub;
            next unless $sub->active;
            next unless $sub->method eq 'LJ::NotificationMethod::Email';

            $sub->delete;

            push @subs, { name => $sub->as_html };
        }
    }

    return LJ::Response::Template->new(
        file               => '/templates/Manage/Subscriptions/unsubscribe.tmpl',
        title              => LJ::Lang::ml('esn.subscriptions.unsubscribe.title'),
        params             => {
            subs        => \@subs,
            siteroot    => $LJ::SITEROOT,
        },
        use_site_scheme    => 1
    )->output();
_code?>