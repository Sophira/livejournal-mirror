<?page
body<=
<?_code
{
    use strict;
    use vars qw (%POST %GET $body $title $headextra);
    use Carp qw(croak);

    $title = 'Manage Message Settings';

    return "Not ready" if $LJ::DISABLED{'esn'};

    use LJ::NotificationMethod;
    use LJ::Event;
    use LJ::Subscription::GroupSet;
    use LJ::Widget::SubscribeInterface;

    BML::decl_params(
                     lj_form_auth => qr/./,
                     journal      => 'word',
                     event        => 'word',
                     _default     => qr/./,
                     );

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $journal = LJ::load_user($GET{journal}) or return LJ::bad_input("No journal specified");

    return BML::redirect("$LJ::SITEROOT/manage/subscriptions/")
        if LJ::u_equals($remote, $journal);

    my $u = $remote;

    my $ret = '';

    my $set = LJ::Subscription::GroupSet->fetch_for_user($u, sub {
        my ($subhash) = @_;

        return 0 unless $subhash->{'journalid'} == $journal->id;

        my @events = qw(
            Birthday
            JournalNewEntry
            NewUserpic
            UserExpunged
        );

        my %etypeids = map { LJ::Event->event_to_etypeid($_) => 1 } @events;

        return 0 unless $etypeids{$subhash->{'etypeid'}};

        return 1;
    });

    if (LJ::did_post()) {
        my $newset = $set->clone;

        my @ntypes = @LJ::NOTIFY_TYPES;

        my %ntypeids = map { $_ => $_->ntypeid } @ntypes;

        foreach my $field (keys %POST) {
            next unless $field =~ /event\-(\d+)/;
            my $field_num = $1;

            my $group = LJ::Subscription::Group->thaw($POST{$field});

            foreach my $ntypeid (values %ntypeids) {
                next unless $POST{'sub-'.$field_num.'-'.$ntypeid};

                $group->create_sub($ntypeid);
            }

            $newset->insert_group($group);
        }

        eval {
            $set->update($newset);
        };

        if ($@) {
            if (ref $@ eq 'LJ::Subscription::QuotaError') {
                my $mlstring = LJ::run_hook('esn_quota_error', $u) ||
                    LJ::Lang::ml('esn.error.quota', {
                        'quota' => LJ::get_cap($u, 'subscriptions'),
                        'aopts' => qq{ href="$LJ::SITEROOT/manage/settings/?cat=notifications"},
                    });

                $ret .= "<?errorbar $mlstring errorbar?>";
            }
        } else {
            return BML::redirect('/manage/settings/?cat=notifications');
        }
    }

    my $widget = LJ::Widget::SubscribeInterface->new;

    $widget->{'no_container_div'} = 1;
    $widget->{'page'} = '/manage/subscriptions/user.bml';

    $ret .= '<form method="post" action="">';

    my $groups = [
        { event => "JournalNewEntry", arg1 => '?', 'journalid' => $journal->id },
        { event => "JournalNewEntry", 'journalid' => $journal->id },
        { event => "NewUserpic", 'journalid' => $journal->id },
        { event => "Birthday", 'journalid' => $journal->id },
    ];

    push @$groups, { event => "JournalNewComment", 'journalid' => $journal->id }
        if LJ::can_manage($u, $journal);

    push @$groups, { event => "UserExpunged", 'journalid' => $journal->id }
        unless LJ::User->is_protected_username($journal->user);

    $ret .= $widget->render({
        'title' => BML::ml('subscribe_interface.category.this-journal', { 'journal' => $journal->ljuser_display }),
        'groups' => $set->extract_groups($groups),
        'u' => $u,
        'css_class' => 'subscriptions_user',
    });

    $ret .= LJ::html_submit('value' => $ML{'subscribe_interface.save'});
    $ret .= '</form>';

    return $ret;

}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
<=body
page?>
