<?page
body<=
<?_code
{
    use strict;
    use vars qw (%POST %GET $body $title $headextra);
    use Carp qw(croak);

    $title = 'Manage Message Settings';

    return "Not ready" if $LJ::DISABLED{'esn'};

    use Class::Autouse qw(LJ::NotificationMethod LJ::Event);

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input("You could not be authenticated as the specified user.")
        unless $u;

    my $formauth = LJ::form_auth();

    # handle input
    if (LJ::did_post()) {
        return LJ::error_list(BML::ml('error.invalidform')) unless LJ::check_form_auth();

        # do they want to add or edit subscriptions?
        next unless $POST{mode} eq 'save_subscriptions';

        my @sub_edit;
        foreach my $postkey (keys %POST) {
            my $subscr;
            my $old_postkey = $postkey;
            my $old = $postkey =~ /-old$/;

            # remove old string
            $postkey =~ s/-old// if $old;

            $subscr = LJ::Subscription->thaw($postkey, $u);

            next unless $subscr;
            next unless $old;

            my $oldvalue = $POST{$old_postkey};
            my $checked = $POST{$postkey};

            push @sub_edit, [
                             $subscr,
                             $checked,
                             $oldvalue,
                             ];
        }

        foreach my $edit_info (@sub_edit) {
            my ($subscr, $checked, $oldvalue) = @$edit_info;

            # if it's pending and enabled, make it a real subscription
            if ($checked && $subscr->pending && ! $oldvalue) {
                $subscr->commit;
            } elsif (! $checked && ! $subscr->pending && $oldvalue) {
                # if it's not checked and is currently a real subscription, delete it

                # if it's the inbox method, delete everything
                if ($subscr->method eq 'LJ::NotificationMethod::Inbox') {
                    my @subs = $u->find_subscriptions(
                                                      journal => $subscr->journal,
                                                      etypeid => $subscr->etypeid,
                                                      arg1    => $subscr->arg1,
                                                      arg2    => $subscr->arg2,
                                                      );
                    $_->delete foreach @subs;
                } else {
                    $subscr->delete;
                }
            }
        }

        delete $u->{_subscriptions};
    }

    ###################### Print subscribe table
    my %categories = (
                      "$LJ::SITENAMEABBREV and You" => [
                                                        'Befriended',
                                                        ],
                      "Communities" => [
                                        'CommunityInvite',
                                        'CommunityJoinRequest',
                                        ],
                      );

    my $authas_form = LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
    $body .= qq {
        <form action='./' method='GET'>
            $authas_form
            </form>

        
        };

    $body .= LJ::subscribe_interface($u,
                                     journal      => $u,
                                     categories   => \%categories,
                                     formauth     => $formauth,
                                     showtracking => 1,
                                     );

    return $body;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
<=body
page?>
