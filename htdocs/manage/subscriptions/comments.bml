<?page
body<=
<?_code
{
    use strict;
    use vars qw (%POST %GET $body $title $headextra @errors);
    use Carp qw(croak);
    use LJ::Subscription;

    $title = 'Manage Message Settings';

    return "Not ready" if $LJ::DISABLED{'esn'};

    use LJ::NotificationMethod;
    use LJ::Event;
    use LJ::Subscription::GroupSet;
    use LJ::Widget::SubscribeInterface;
    use LJ::Comment;

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $ditemid = $POST{'itemid'} || $GET{'itemid'} || $POST{'ditemid'} || $GET{'ditemid'};
    my $dtalkid = $POST{'talkid'} || $GET{'talkid'} || $POST{'dtalkid'} || $POST{'dtalkid'};
    my $journal = $POST{'journal'} || $GET{'journal'};

    my $journal = LJ::load_user($journal) or return LJ::error_list("Invalid journal '$journal'");

    return LJ::error_list("No talkid specified") unless $dtalkid;

    my $comment = LJ::Comment->new($journal, dtalkid => $dtalkid);

    return LJ::error_list("Invalid comment") unless $comment && $comment->visible_to($remote);
    return LJ::error_list("This comment has been deleted.") if $comment->is_deleted;

    my $entry = $comment->entry;
    $ditemid ||= $entry->ditemid;

    my $u = $remote;

    my $ret = '';

    my $set = LJ::Subscription::GroupSet->fetch_for_user($u, sub {
        my ($subhash) = @_;

        return 0 unless $subhash->{'journalid'} == $journal->id;

        my @events = qw(
            JournalNewComment
        );

        my %etypeids = map { LJ::Event->event_to_etypeid($_) => 1 } @events;

        return 0 unless $etypeids{$subhash->{'etypeid'}};

        return 1;
    });

    if (LJ::did_post()) {
        my $newset = $set->clone;

        my @ntypes = @LJ::NOTIFY_TYPES;

        my %ntypeids = map { $_ => $_->ntypeid } @ntypes;

        foreach my $field (keys %POST) {
            next unless $field =~ /event\-(\d+)/;
            my $field_num = $1;

            my $group = LJ::Subscription::Group->thaw($POST{$field});

            foreach my $ntypeid (values %ntypeids) {
                next unless $POST{'sub-'.$field_num.'-'.$ntypeid};

                $group->create_sub($ntypeid);
            }

            $newset->insert_group($group);
        }

        eval {
            $set->update($newset);
        };

        if ($@) {
            if (ref $@ eq 'LJ::Subscription::QuotaError') {
                my $mlstring = LJ::run_hook('esn_quota_error', $u) ||
                    LJ::Lang::ml('esn.error.quota', {
                        'quota' => LJ::get_cap($u, 'subscriptions'),
                        'aopts' => qq{ href="$LJ::SITEROOT/manage/settings/?cat=notifications"},
                    });

                $ret .= "<?errorbar $mlstring errorbar?>";
            }
        } else {
            return BML::redirect('/manage/settings/?cat=notifications&saved=1');
        }
    }

    my $widget = LJ::Widget::SubscribeInterface->new;

    $widget->{'no_container_div'} = 1;
    $widget->{'page'} = '/manage/subscriptions/comments.bml';

    $ret .= '<form method="post" action="">';

    my $groups = [
        { event => "JournalNewComment", arg2 => $comment->jtalkid, 'journalid' => $journal->id },
        { event => "JournalNewComment", arg1 => $ditemid, 'journalid' => $journal->id },
    ];

    $ret .= $widget->render({
        'title' => BML::ml('subscribe_interface.category.this-journal', { 'journal' => $journal->ljuser_display }),
        'groups' => $set->extract_groups($groups),
        'u' => $u,
        'css_class' => 'subscriptions_user',
    });

    $ret .= LJ::html_submit('value' => $ML{'subscribe_interface.save'});
    $ret .= '</form>';

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<style type='text/css'>
</style>
<?_code return $headextra; _code?>
<=head
<=body
page?>

