<?page
title=><?_ml .title _ml?>
body<=

<?_code
{
    use strict;
    use vars qw(%GET %POST);

    # get database handles
    my $dbh = LJ::get_db_writer();
    my $remote = LJ::get_remote();
    return LJ::bad_input("You must be logged in to upload pictures.")
        unless $remote;

    my $ret;
    my $authas = $GET{'authas'} || $remote->{'user'};

    # if no post data present, just show upload form
    unless (LJ::did_post()) {

        # user switcher
        $ret .= "<form action='uploadpic.bml' method='get'>\n";
        $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
        $ret .= "</form>\n\n";

        $ret .= "<?h1 $ML{'.header'} h1?>\n";
        $ret .= "<?p $ML{'.text'} p?>\n\n";

        $ret .= "<ul>\n";
        foreach (qw(filesize imagesize fileformat)) {
            $ret .= "<li>" . $ML{".restriction.$_"} . "</li>\n";
        }

        # for standout box
        $ret .= "<?standout \n";

        # upload form
        $ret .= "<form action='uploadpic.bml?authas=$authas' method='post' enctype='multipart/form-data' style='display: inline;'>\n";
        $ret .= "<table>\n<tr><td>\n";
        $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 'src', 'value' => 'file', 'selected' => '1',
                                 'id' => 'radio_file', 'accesskey' => $ML{'.fromfile.key'} });
        $ret .= "<label for='radio_file'>$ML{'.fromfile'}</label></td>";
        $ret .= "<td align='left'><input type='file' name='userpic' /></td></tr>\n";

        $ret .= "<tr><td>";
        $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 'src', 'value' => 'url',
                                 'id' => 'radio_url', 'accesskey' => $ML{'.fromurl.key'} });
        $ret .= "<label for='radio_url'>$ML{'.fromurl'}</label></td><td align='left'>";
        $ret .= LJ::html_text({ 'name' => 'urlpic', 'size' => '40' }) . "</td></tr>\n";

        $ret .= "<tr><td>&nbsp;</td><td align='left'>";
        $ret .= LJ::html_check({ 'type' => 'checkbox', 'name' => 'make_default', 'selected' => '1', 'value' => '1',
                                 'id' => 'make_default', 'accesskey' => $ML{'.makedefault.key'} });
        $ret .= "<label for='make_default'>$ML{'.makedefault'}</label></td></tr>\n";

        $ret .= "<tr><td>&nbsp;</td><td>" .LJ::html_submit(undef, $ML{'.btn.proceed'}) . "</td></tr>\n";
        $ret .= "</table>\n</form>\n";
        $ret .= " standout?>\n\n";

        return $ret;
    }

    ### did_post(), handle image upload

    my $MAX_UPLOAD = 40960;
    my $err;

    # process submitted form
    BML::parse_multipart(\%POST, \$err, $MAX_UPLOAD);
    if ($err) {
        if ($err =~ /^\[(\S+?)\]/) { 
            my $code = $1;
            if ($code eq "toolarge") {
                return LJ::bad_input(BML::ml('.error.filetoolarge',
                                             { 'maxsize' => int($MAX_UPLOAD / 1024) . $ML{'.kilobytes'} }));
            }
            $err = BML::ml("BML.parse_multipart.$1");
        }
        return LJ::bad_input($err) if $err;
    }

    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'.error.invalidauth'})
        unless $u;

    return $LJ::MSG_READONLY_USER if LJ::get_cap($u, "readonly");

    # error check input contents
    if ($POST{'src'} eq "url" && $POST{'urlpic'} !~ /^http:\/\//) {
        return LJ::bad_input($ML{'.error.badurl'});
    }

    if ($POST{'src'} eq "file")  {

        # already loaded from multipart parse earlier

    } elsif ($POST{'src'} eq "url") {

        my $ua = new LWP::UserAgent;
        my $req = HTTP::Request->new('GET', $POST{'urlpic'});

        my $size = 0;
        $POST{'userpic'} = "";
        my $res = $ua->simple_request($req, sub { 
            my($data, $response, $protocol) = @_;
            $size += length($data);
            $POST{'userpic'} .= $data;
            die if ($size > $MAX_UPLOAD);
        }, 10_000);
        return LJ::bad_input(BML::ml(".error.urlerror")) if $res->is_error();

        if (length($POST{'userpic'}) > $MAX_UPLOAD) {
            return LJ::bad_input(BML::ml($ML{'.error.filetoolarge'}, 
                                         { 'maxsize' => int($MAX_UPLOAD / 1024) . $ML{'.kilobytes'} }));
        }

    } else {
        return LJ::bad_input($ML{'.error.unknownmode'});
    }
   
    my ($sx, $sy, $filetype) = Image::Size::imgsize(\$POST{'userpic'});
    unless (defined $sx) {
        return LJ::bad_input($ML{'.error.invalidimage'});
    }
 
    unless ($filetype eq "GIF" || $filetype eq "JPG" || $filetype eq "PNG") {
        return LJ::bad_input(BML::ml(".error.unsupportedtype", { 'filetype' => $filetype }));
    }

    if ($sx > 100 || $sy > 100) {
        return LJ::bad_input( BML::ml(".error.imagetoolarge", { 'imagesize' => "${sx}$ML{'.imagesize.by'}${sy}",
                                                                'maxsize'   => "100$ML{'.imagesize.by'}100" }) );
    }
 
    my $contenttype;
    if ($filetype eq "GIF") { $contenttype = "image/gif"; }
    if ($filetype eq "PNG") { $contenttype = "image/png"; }
    if ($filetype eq "JPG") { $contenttype = "image/jpeg"; }
 
    my $base64 = Digest::MD5::md5_base64($POST{'userpic'});
 
    ## see if they have too many pictures uploaded
    my $count = $dbh->selectrow_array("SELECT COUNT(*) FROM userpic WHERE userid=?", undef, $u->{'userid'});
    my $max = LJ::get_cap($u, "userpics");
    if ($count >= $max) {
        return LJ::bad_input( BML::ml(".error.toomanypics", { 'maxpics'  => $max,
                                                              'editlink' => "$LJ::SITEROOT/editpics.bml?authas=$authas" }) );
    }

    # see if it's a duplicate
    my $picid = $dbh->selectrow_array("SELECT picid FROM userpic WHERE userid=? AND contenttype=? AND md5base64=?",
                                      undef, $u->{'userid'}, $contenttype, $base64);

    # if picture isn't a duplicate, insert it
    if ($picid == 0) {

        # insert the meta-data
        $dbh->do("INSERT INTO userpic (userid, contenttype, width, height, picdate, md5base64) VALUES (?, ?, ?, ?, NOW(), ?)",
                 undef, $u->{'userid'}, $contenttype, $sx, $sy, $base64);
        return LJ::bad_input($dbh->errstr) if $dbh->err;

        $picid = $dbh->{'mysql_insertid'};

        ### insert the blob
        my $dbcm = LJ::get_cluster_master($u);
        return LJ::bad_input($ML{'.databasedown'}) unless $dbcm;
        $dbcm->do("INSERT INTO userpicblob2 (userid, picid, imagedata) VALUES (?, ?, ?)",
                  undef, $u->{'userid'}, $picid, $POST{'userpic'});
        return LJ::bad_input($dbcm->errstr) if $dbcm->err;
    }
 
    # make it their default pic?
    if ($POST{'make_default'}) {
        LJ::update_user($u, { defaultpicid => $picid });
    }

    my $memkey = [$u->{'userid'},"upicinf:$u->{'userid'}"];
    LJ::MemCache::delete($memkey);

    return "<?h1 $ML{'.success.header'} h1?>\n" .
           "<?p " . BML::ml('.success.preview', { 'editlink' => "$LJ::SITEROOT/editpics.bml?authas=$authas" }) . " p?>\n\n" .
           "<div align='center' style='margin-top: 20px;'><img src='$LJ::USERPIC_ROOT/$picid/$u->{'userid'}' width='$sx' height='$sy' alt='userpic'></div>\n\n" .
           "<?p " . BML::ml('.success.editpics', { 'editlink' => "$LJ::SITEROOT/editpics.bml?authas=$authas" }) . " p?>\n" .
           "<?p " . BML::ml('.success.upload', { 'uploadlink' => "$LJ::SITEROOT/uploadpic.bml?authas=$authas",
                                                 'journallink' => LJ::journal_base($u) . "/" }) . " p?>\n\n";
} 
_code?>

<=body
page?><?_c <LJDEP>
lib: LWP::UserAgent, Image::Size, Digest::MD5
link: htdocs/editpics.bml
</LJDEP> _c?>
