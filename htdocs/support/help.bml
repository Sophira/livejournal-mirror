<?page
head<=
<style type='text/css'>
.green {
    background-color: #d0eed0;
}
.yellow {
    background-color: #eeeed0;
}
.red {
    background-color: #eed0d0;
}
.clicked {
    background-color: #d0d0ee;
}
</style>

<script type='text/javascript'>
<!--

function doClick(spid) {
    if (!document.getElementById) { return; }
    var row = document.getElementById('r' + spid);
    var check = document.getElementById('check_' + spid);
    check.checked = !check.checked;
    if (check.checked) {
        row.className = 'clicked';
    } else {
        var hid = document.getElementById('c' + spid);
        row.className = hid.value;
    }
    return true;
}

// -->
</script>
<=head
title=>Support Requests
body<=

<?_code
 use strict;
 use vars qw(%FORM);
 use LJ::Support::Request::Tag;

 # a shorter alias, for convenience
 my $normalize_tag = sub {
    return LJ::Support::Request::Tag::normalize_tag_name(@_);
 };

 LJ::set_active_crumb('supporthelp');

 my ($ret, $sth);
 my $dbr = LJ::get_db_reader();
 my $r = Apache->request;

 my $remote = LJ::get_remote();
 LJ::Support::init_remote($remote);

 return $ML{'.interim'} if
    (!$remote || !$remote->{'_priv'}) &&
    ($r->header_in("Referer") eq "$LJ::SITEROOT/support/" || $r->header_in("Referer") eq "$LJ::SITEROOT/support/index.bml" || $r->header_in("Referer") eq "$LJ::SITEROOT/support/submit.bml");

 my $cats = LJ::Support::load_cats();

 my $state = $FORM{'state'};
 $state = 'open' unless $state =~ /^(?:open|closed|green|youreplied)$/;

 my $filtercat = $FORM{'cat'};
 $filtercat = "" unless ($filtercat =~ /^[\w\-,]+$/);
 my $fcat = LJ::Support::get_cat_by_key($cats, $filtercat);
 my $can_read = LJ::Support::can_read_cat($fcat, $remote);

 my $can_see_tags =
    LJ::check_priv($remote, 'supportviewinternal') ||
    LJ::check_priv($remote, 'supporthelp');

 my $filtertags = $FORM{'tags'};
 $filtertags = '' unless $can_see_tags;
 my @filtertags = map { $normalize_tag->($_); }
    split(/,/, $FORM{'tags'});
 my %filtertags = map { $_ => 1 } @filtertags;

 # determine if user can close stuff
 my $can_close = 0;
 if ($remote && $state =~ /(?:green|open)/ && $filtercat && $filtercat !~ /^_/) {
     $can_close = 1 if LJ::check_priv($remote, 'supportclose', $filtercat);        # private cats/only this cat
     $can_close = 1 if $fcat->{public_read} && LJ::check_priv($remote, 'supportclose', ''); # public cats
 }

 my $append;
 if ($state eq "closed") {
     $ret .= "<?h1 $ML{'.state.closed.title'} h1?>";
     $ret .= "<?p ". BML::ml(".state.closed.text", {"clickurl"=>"$LJ::SITEROOT/support/help.bml?cat=$filtercat"} ) ." p?>";
 } elsif ($state eq "youreplied") {
     return "<?h1 $ML{'.state.youreplied.rem.title'} h1?>  <?p $ML{'.state.youreplied.rem.text'} p?>"
        unless $remote;
     $ret .= "<?h1 $ML{'.state.youreplied.title'} h1?>";
     $ret .= "<?p $ML{'.state.youreplied.text'} p?>";
 } else {
     $ret .= "<?h1 $ML{'.state.else.title'} h1?>";
     $ret .=  BML::ml('.state.else.text', {'statelink'=>"href=\"$LJ::SITEROOT/support/help.bml?state=closed&amp;cat=$filtercat\""}) ;
     $append = 1;
 }

 my @support_log;
 my @shown_cats;

 # if we have a cat to filter to and we have abstracts for it
 my $rct = 0;
 my $abstracts = 0;
 if ($filtercat && $LJ::SUPPORT_ABSTRACTS{$filtercat} && $fcat && $can_read && $state ne 'youreplied') {
     # yes, we should show abstracts for this category, so do so
     if ($state eq "closed") {
         $sth = $dbr->prepare("SELECT s.*, SUBSTRING(sl.message, 1, 200) AS 'message' " .
                              "FROM support s, supportlog sl " .
                              "WHERE s.state='closed' AND s.spid = sl.spid AND sl.type = 'req' " .
                              "AND s.timeclosed > (UNIX_TIMESTAMP() - (3600*24)) " .
                              "AND s.spcatid = ?");
     } else { # triggers on green, open
         $sth = $dbr->prepare("SELECT s.*, SUBSTRING(sl.message, 1, 200) AS 'message' " .
                              "FROM support s, supportlog sl " .
                              "WHERE s.state='open' AND s.spid = sl.spid AND sl.type = 'req' " .
                              "AND s.spcatid = ?");
     }
     $sth->execute($fcat->{spcatid});
     push @support_log, $_ while $_ = $sth->fetchrow_hashref();
     $rct = scalar(@support_log);
     $abstracts = 1;
     @shown_cats = ($fcat->{spcatid});
 } else {
     my $filterwhere;

     if ($filtercat eq '_nonprivate') {
        @shown_cats =
            grep { $_->{'public_read'} }
            values %$cats;
     } elsif ($filtercat eq '_nonpublic') {
        @shown_cats =
            grep { LJ::Support::can_read_cat($_, $remote) }
            grep { !$_->{'public_read'} }
            values %$cats;
     } elsif ($filtercat) {
        my %filter = map { $_ => 1 } split(/\s*,\s*/, $filtercat);
        @shown_cats =
            grep { LJ::Support::can_read_cat($_, $remote) }
            grep { $filter{$_->{'catkey'}} }
            values %$cats;
     } else {
        @shown_cats =
            grep { LJ::Support::can_read_cat($_, $remote) }
            values %$cats;
     }
     
     @shown_cats = map { $_->{'spcatid'} } @shown_cats;

     $filterwhere = ' AND s.spcatid IN ('.join(',', @shown_cats).')';

     my $dbr = LJ::get_db_reader();
     if ($state eq "closed") {
         $sth = $dbr->prepare("SELECT s.* FROM support s WHERE s.state='closed' AND " .
                              "s.timeclosed>UNIX_TIMESTAMP()-(3600*24) $filterwhere");
     } elsif ($state eq "youreplied") {
         $sth = $dbr->prepare("SELECT s.* FROM support s, support_youreplied yr " .
                              "WHERE yr.userid=$remote->{'userid'} AND s.spid=yr.spid $filterwhere " .
                              "AND (s.state='open' OR (s.state='closed' AND s.timeclosed>UNIX_TIMESTAMP()-(3600*24)))");
     } else { # triggers on green, open
         $sth = $dbr->prepare("SELECT s.* FROM support s WHERE s.state='open' $filterwhere");
     }
     $sth->execute;

     # For the You Replied filter, we might be getting some rows multiple times (when
     # multiple log rows exist for $remote), which is still better than using DISTINCT
     # in the query which uses a temporary table, so ensure uniqueness here.
     my %spids_seen;
     while (my $sprow = $sth->fetchrow_hashref) {
         next if $spids_seen{$sprow->{'spid'}};
         $spids_seen{$sprow->{'spid'}} = 1;
         push @support_log, $sprow;
         $rct++;
     }
 }

 my $sort = $FORM{sort};
 $sort = 'date' unless $sort =~ /^id|summary|area|date$/;

 if ($append) {
     # Counts of requests in differing states
     my $gct = 0;
     my $snhct = 0;
     my $aacct = 0;
     foreach (@support_log) {
         if ($_->{'timelasthelp'} > $_->{'timetouched'}+5) {
             $aacct++;
         } elsif ($_->{'timelasthelp'} && $_->{'timetouched'} > $_->{'timelasthelp'}+5) {
             $snhct++;
         } else {
             $gct++;
         }
     }

     $ret .= "<p>[ <b>$gct</b> $ML{'.status.unanswered'}, <b>$snhct</b> $ML{'.status.needhelp'}, ";
     $ret .= "<b>$aacct</b> $ML{'.status.awaitingclose'}, <b>$rct</b> $ML{'.status.totalopen'} ]</p>";
 }

 if ($sort eq 'id') {
    @support_log = sort { $a->{spid} <=> $b->{spid} } @support_log;
 } elsif ($sort eq 'date') {
    @support_log = sort { $b->{timecreate} <=> $a->{timecreate} } @support_log;
 } elsif ($sort eq 'summary') {
    @support_log = sort { $a->{subject} cmp $b->{subject} } @support_log;
 } elsif ($sort eq 'area') {
    @support_log = sort { $cats->{$a->{spcatid}}->{catname} cmp $cats->{$b->{spcatid}}->{catname} } @support_log;
 }

 # filter line:
 $ret .= "<form method='get' action='help.bml'>$ML{'.showonlyhelp'}";
 $ret .= "<input type='hidden' name='sort' value='$sort' />";
 $ret .= "<select name='state'>";
 {
     my @states = ("" => $ML{'.state.open'},
                   "closed" => $ML{'.state.closed'},
                   "green" => $ML{'.state.green'});
     if ($remote) {
         push @states, ("youreplied", $ML{'.statr.youreplied'});
     }
     while (@states) {
         my ($skey, $sname) = splice(@states, 0, 2);
         my $sel = $state eq $skey ? " selected='selected'" : "";
         $ret .= "<option value=\"$skey\"$sel>$sname</option>";
     }
 }
 $ret .= "</select>";

 $ret .= " $ML{'.requests.type'}: <select name='cat'>";

 if ($filtercat =~ /,/) {
    $ret .= '<option value="'.LJ::ehtml($filtercat).'" selected="selected">'.
        LJ::ehtml($filtercat).'</option>';
 }

 $ret .= "<option value=\"\">($ML{'.cat.all'})</option>";
 my @filter_cats = LJ::Support::filter_cats($remote, $cats);
 if (LJ::check_priv($remote, "supportread")) {
     unshift @filter_cats, { 'catkey' => '_nonpublic',
                             'catname' => '(Private)' };
     unshift @filter_cats, { 'catkey' => '_nonprivate',
                             'catname' => '(Public)' };
 }

 foreach my $cat (@filter_cats)
 {
     my $sel = $filtercat eq $cat->{'catkey'} ? " selected='selected'" : "";
     $ret .= "<option value=\"$cat->{'catkey'}\"$sel>$cat->{'catname'}</option>";
 }

 $ret .= "</select>\n";

 $ret .= ' ' . $ML{'.requests.tags'} . ' <select name="tags">';
 
 my $render_option = sub {
    my ($value, $name, $selected) = @_;

    return '<option value="'.LJ::ehtml($value).'"'.
        ($selected ? ' selected="selected"' : '').
        '>'.
        LJ::ehtml($name).
        '</option>';
 };
 
 $ret .= $render_option->($filtertags, $filtertags, 1)
    if ($filtertags =~ /,/);
 $ret .= $render_option->('', $ML{'.tags.all'});
 $ret .= $render_option->($_, $_,
    $normalize_tag->($_) eq $normalize_tag->($filtertags))
    foreach (LJ::Support::Request::Tag::get_cats_tag_names(@shown_cats));

 $ret .= '</select>';
 
 $ret .= "<input type=submit value=\"$ML{'.button.filter'}\" /></form>";
 # /filter line

 # mass closing table
 $ret .= "<form method='post' action='/support/actmulti.bml'>" . LJ::form_auth() if $can_close && $rct;

 # start the rest of the table
 
 my %marked = map { $_ => 1 } split(',', $GET{'mark'});
 my $uri = "$LJ::SITEROOT/support/help.bml?cat=$filtercat&state=$state&tags=$filtertags";
 $ret .= "<p><table cellpadding='4' cellspacing='1' border='1' bgcolor='#ffffff'><tr bgcolor='#d0d0d0'>\n";
 if ($can_close) {
    my $link = $uri . '&sort='.$sort . '&closeall=' . ($GET{'closeall'} ? 0 : 1);
    $ret .= "<td>&nbsp;<b><a href='$link'>X</a></b></td>\n";
 }
 my @headers = ( id => "ID#", summary => $ML{'.th.summary'}, area => $ML{'.th.problemarea'}, date => $ML{'.th.posted'} );
 while (my ($sorttype, $desc) = splice(@headers, 0, 2)) {
     if ($sort eq $sorttype) {
         $ret .= "<td><b>$desc</b></td>\n";
     } else {
         $ret .= "<td><b><a href='$uri&sort=$sorttype'>$desc</a></b></td>\n";
     }
 }
 $ret .= "<td><b>$ML{'.th.status'}</b></td>\n";
 $ret .= "</tr>";

 my @spids = map { $_->{'spid'} } @support_log;
 my %tags = map { $_ => [] } @spids;
 my $tags = \%tags;

 $tags = LJ::Support::Request::Tag::get_requests_tags(@spids)
    if $can_see_tags;
 foreach my $sp (@support_log)
 {
     LJ::Support::fill_request_with_cat($sp, $cats);
     next unless (LJ::Support::can_read($sp, $remote));

     my @tagids = @{$tags->{$sp->{'spid'}}};
     my @tagnames = map { LJ::Support::Request::Tag::tag_id_to_name($_) }
        @tagids;

     if (@filtertags) {
        my @tagnames_normalized =
            map { $normalize_tag->($_) }
            @tagnames;
        next unless grep { $filtertags{$_} } @tagnames_normalized;
     }

     my $status = "open";
     my $barbg = "green";
     if ($sp->{'timeclosed'}) {
         $status = "closed";
         $barbg = "red";
     }
     elsif ($sp->{'timelasthelp'} > $sp->{'timetouched'}+5) {
         $status = "answered<br />awaiting close";
         $barbg = "yellow";
     }
     elsif ($sp->{'timelasthelp'} && $sp->{'timetouched'} > $sp->{'timelasthelp'}+5) {
         $status = "answered<br /><b>still needs help</b>";
         $barbg = "green";
     }
     my $original_barbg = $barbg;
     $barbg = 'clicked' if ($GET{closeall} && $original_barbg eq 'yellow') || $marked{$sp->{'spid'}};

     next if $state eq "green" && $barbg ne "green";

     # fix up the subject if needed
     eval {
         if ($sp->{'subject'} =~ /^=\?(utf-8)?/i) {
             my @subj_data;
             require MIME::Words;
             @subj_data = MIME::Words::decode_mimewords($sp->{'subject'});
             if (scalar(@subj_data)) {
                 if (!$1) {
                     $sp->{'subject'} = Unicode::MapUTF8::to_utf8({-string=>$subj_data[0][0], -charset=>$subj_data[0][1]});
                 } else {
                     $sp->{'subject'} = $subj_data[0][0];
                 }
             }
         }
     };

     # fix up the message if we have one
     my $temp = LJ::text_trim($sp->{message}, 0, 100); # 100 character max
     if ($temp ne $sp->{message}) {
         $sp->{message} = LJ::ehtml($temp) . " ...";
     } else {
         $sp->{message} = LJ::ehtml($sp->{message}) . " <b>&#x00b6;</b>";
     }
     my $des = $abstracts ? "<br /><i>$sp->{message}</i>" : '';
     my $tags_line;
     if ($can_see_tags && scalar(@tagids)) {
        my @links = map {
            '<a href="' . $LJ::SITEROOT. 
            "/support/help.bml?cat=$filtercat&state=$state&tags=" . $_ . '">'.
            $_ . '</a>';
        } @tagnames;

        $tags_line = '<br/><i>' . join(', ', @links) . '</i>';
     }

     # other content for this request
     my $summary = LJ::ehtml($sp->{'subject'});
     my $secold = time() - $sp->{'timecreate'};
     my $age = $GET{rawdates} ? LJ::mysql_time($sp->{'timecreate'}) : LJ::ago_text($secold);
     my $probarea = $sp->{_cat}->{'catname'};
     my $points = LJ::Support::calc_points($sp, $secold);

     unless ($status eq "closed") {
         $status .= "<br />($points point";
         if ($points > 1) { $status .= "s"; }
         $status .= ")";
     }

     my ($style, $js) = ("class='$barbg'", '');
     if ($can_close) {
        $js = "id='r$sp->{spid}' onclick='doClick($sp->{spid});'";
     }

     # generate the HTML for this row
     $ret .= "<tr valign='top' $style $js>\n";
     if ($can_close) {
         $ret .= "<td>" . LJ::html_check({ name => "check_$sp->{spid}", id => "check_$sp->{spid}",
                                           onclick => "doClick($sp->{spid});", selected => $barbg eq 'clicked', }) .
                 "<input type='hidden' name='c$sp->{spid}' id='c$sp->{spid}' value='$original_barbg' /></td>\n";
         $js = "onclick='return doClick($sp->{spid});'";
     }
     $ret .= "<td><b><a href=\"$LJ::SITEROOT/support/see_request.bml?id=$sp->{'spid'}\" $js>$sp->{'spid'}</a></b></td>";
     $ret .= "<td><b>$summary</b>$des$tags_line</td>\n";
     $ret .= "<td>$probarea</td>\n";
     $ret .= "<td nowrap='nowrap'><font size='-1'>$age</font></td>\n";
     $ret .= "<td nowrap='nowrap'><font size='-1'>$status</font></td>\n";
     $ret .= "</tr>";

 }
 $ret .= "</table>\n";

 # mass close button
 if ($can_close && $rct) {
     my $time = time();
     $ret .= LJ::html_hidden('ids', join(':', map { $_->{spid} } @support_log),
                             'spcatid', $fcat->{spcatid},
                             'ret', "/support/help.bml?state=$state&cat=$filtercat&time=$time%s");
     $ret .= "<br />";
     $ret .= LJ::html_submit('action:move', 'Move Marked Requests');
     $ret .= " to ";
     $ret .= LJ::html_select({ 'name' => 'changecat', selected => '' },
                             '', '(no change)',
                             map { $_->{'spcatid'}, "---> $_->{'catname'}" }
                             LJ::Support::sorted_cats($cats));


     $ret .= "<br /><br />";
     $ret .= LJ::html_submit('action:close', 'Close Marked Requests',
                             { onclick => 'return confirm("Are you sure you want to close the marked requests?");' });
     $ret .= " (this is permanent)";
     $ret .= "<br /><br />";
     $ret .= LJ::html_submit('action:closewithpoints', 'Close Marked Requests, granting points to last responses',
                             { onclick => 'return confirm("Are you sure you want to close the marked requests?");' });
     $ret .= "</form>";
 }
 $ret .= "<?hr?>";
 $ret .= "<p>".BML::ml('.backlink', {backurl=>'href="./"'})."</p>";


 return $ret;

_code?>

<=body
page?><?_c <LJDEP>
link: htdocs/support/help.bml, htdocs/support/see_request.bml
link: htdocs/support/index.bml
form: htdocs/support/help.bml
</LJDEP> _c?>
