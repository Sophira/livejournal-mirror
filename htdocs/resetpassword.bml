<?_info
nocache=>1
_info?><?page
title=><?_ml .title _ml?>

body<=
<?_code
{
    use strict;
    use vars qw(%GET);

    # get the auth action
    my $qs = $GET{auth};
    return BML::redirect("$LJ::SITEROOT/lostinfo.bml")
        unless $qs;

    # now validate the argument
    return LJ::bad_input($ML{'.error.invalidarg'})
        unless $qs && $qs =~ /^(\d+)\.(.+)$/;

    # get the auth action info
    my ($aaid, $auth) = ($1, $2);
    my $aa = LJ::is_valid_authaction($aaid, $auth);
    return LJ::bad_input($ML{'.error.invalidarg'})
        unless $aa;
    return LJ::bad_input($ML{'.error.actionalreadyperformed'})
        if $aa->{'used'} eq 'Y';
    return LJ::bad_input($ML{'.error.invalidaction'})
        unless $aa->{action} eq 'reset_password';

    # get the user we're resetting
    my $u = LJ::load_userid($aa->{'userid'});
    return LJ::bad_input($ML{'.error.invaliduser'})
        unless $u;
    return LJ::bad_input(BML::ml('.error.emailchanged', { 'aopts' => "href='$LJ::SITEROOT/lostinfo.bml'"}))
        unless $u->can_receive_password($aa->{arg1});

    # do some maintenance
    my $oldval = Digest::MD5::md5_hex($u->password . "change");
    LJ::infohistory_add($u, 'password', $oldval);
    $u->log_event('password_reset', { remote => LJ::get_remote() });

    # forced password change maintenance
    unless ($LJ::DISABLED{'force_pass_change'}) {
        $u->set_prop('badpassword', 0);
    }

    # kill all sessions, forcing user to relogin
    $u->kill_all_sessions;

    # generate a new password for them
    my $password = LJ::make_auth_code(8);

    # ... but make sure it passes bad_password checks
    my $checks = 0;
    while ($checks < 2 && LJ::run_hook("bad_password", { 'u'=> $u, 'password' => $password })) {
        $password = LJ::make_auth_code(8);
        $checks++;
    }

    LJ::update_user($u, { password => $password });

    # now email it to them
    my $text;
    if ($u->is_validated) {
        $text = BML::ml('.email.body', {'sitename' => $LJ::SITENAME, 'username' => $u->display_name, 'password' => $password, 'changepasswordurl' => "$LJ::SITEROOT/changepassword.bml"});
    } else {
        my $aa = LJ::register_authaction($u->id, "validateemail", $u->email_raw);

        $text = BML::ml('.email.body.notvalidated', {'sitename' => $LJ::SITENAME, 'username' => $u->display_name, 'password' => $password, 'changepasswordurl' => "$LJ::SITEROOT/changepassword.bml", 'validationurl' => "$LJ::SITEROOT/confirm/$aa->{'aaid'}.$aa->{'authcode'}"});
    }

    # send it
    LJ::send_mail({
        to       => $aa->{arg1}, # email address we sent their link to
        from     => $LJ::ADMIN_EMAIL,
        fromname => $LJ::SITENAME,
        charset  => 'utf-8',
        subject  => BML::ml('.email.subject', {'sitename' => $LJ::SITENAME}),
        body     => $text,
    }) or die "Unable to send password reset email.";

    LJ::mark_authaction_used($aa);

    # and let them know
    return "<?h1 $ML{'.success.header'} h1?>" .
           "<?p $ML{'.success.text'} p?>";
}
_code?>

<=body
page?>
