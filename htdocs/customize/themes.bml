<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('themes');

    my $ret;
    my $dbr = LJ::get_db_reader();
    my $remote = LJ::get_remote();
    my $journal;
    my $u;

    my $pub = LJ::S2::get_public_layers();
    my %style;
    my $userlay = {};   # TODO: add API call to fetch these

    # logic here: if they pass in a "layout" arg, show themes for that layout.
    # otherwise, logged-out users get prompted to log in
    #            S1 users get told that this applies only to S2
    #            S2 users see theme previews for their own layout.

    if ($GET{layout} =~ /^\d+$/) {
        $style{layout} = $GET{layout};
    } elsif (!$remote) {
        return "<?needlogin?>";
    } else {
        $journal = $GET{'journal'} || $remote->{'user'};
        $u = LJ::get_authas_user($journal);
        return LJ::bad_input("You could not be authenticated as the specified user.")
            unless $u;

        LJ::load_user_props($u, "stylesys", "s2_style");
        %style = LJ::S2::get_style($u->{'s2_style'});

        $u->{'stylesys'} ||= 1;

        return $ML{'.error.s2required'}
            unless $u->{'stylesys'} == 2 && $style{'layout'};
    }


    $ret .= "<p>" . BML::ml('Backlink', {'link' => "$LJ::SITEROOT/customize/?journal=$journal", 'text' => $ML{'.back2'}}) . "</p>";

    # get themes for this layer
    my @themes = LJ::S2::get_layout_themes([$pub, $userlay], $style{'layout'});

    # make the context, without the theme
    my @layers;
    foreach (qw(core i18nc layout i18n)) {
        push @layers, $style{$_} if $style{$_};
    }
    LJ::S2::load_layers(@layers, map { $_->{'s2lid'} } @themes);

    my $cleaner = new HTMLCleaner ('output' => sub { $ret .= $_[0]; });
    my $out_straight = sub { $ret .= $_[0]; };
    my $out_clean = sub { $cleaner->parse($_[0]); };

    $LJ::S2::CURR_PAGE = undef;

    unshift @themes, 0 if LJ::run_hook("layer_is_active", $pub->{$style{layout}}->{uniq});
    foreach my $t (@themes) {
        my $id = ref $t ? $t->{'s2lid'} : 0;
        my $name = ref $t ? LJ::eall($t->{'name'}) : $ML{'.default'};
        my $ctx = S2::make_context(@layers, $id);
        next if $name eq "(None)";

        LJ::S2::escape_all_props($ctx, [ @layers, $id ]);
        LJ::S2::populate_system_props($ctx);

        S2::set_output(sub {});  # printing suppressed
        S2::set_output_safe(sub {});
        eval { S2::run_code($ctx, "prop_init()"); };
        S2::set_output($out_straight);
        S2::set_output_safe($out_straight);
        $ret .= "<?h1 $name h1?>";
        $ret .= "<div>";
        eval { S2::run_code($ctx, "print_theme_preview()"); };
        $ret .= "</div>";

    }
    $cleaner->eof if $cleaner;  # flush any remaining text/tag not yet spit out

    return $ret;

}
_code?>
<=body
page?>
