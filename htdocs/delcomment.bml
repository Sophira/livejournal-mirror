<?_info
nocache=>1
_info?><?_code
#line 5
    use strict;
    use warnings;

    use LJ::Auth;

    # because this BML may be called as __rpc_delcomment too
    BML::set_language_scope('/delcomment.bml');

    my $mode = LJ::Request->get_param('mode') || 'html';
    $mode = 'html' unless $mode =~ /^(?:html|js|jsonp)$/;

    # helper subroutines

    my $site_scheme_wrap = sub {
        my ($body) = @_;

        LJ::set_active_crumb('delcomment');

        return BML::render_page({
            'title' => LJ::Lang::ml('/delcomment.bml.title'),
            'body' => $body,
        });
    };

    my $jsonp_wrap = sub {
        my ($struct) = @_;
        my $struct_out = LJ::JSON->to_json($struct);

        my $callback = LJ::Request->get_param('callback') || 'JSONP';

        return "$callback($struct_out);";
    };

    my $error = sub {
        my ($why) = @_;

        if ( $mode eq 'html' ) {
            my $ml_error = LJ::Lang::ml('Error');

            return $site_scheme_wrap->( qq{<h1>$ml_error</h1><p>$why</p>} );
        } elsif ( $mode eq 'js' ) {
            return "alert('" . LJ::ejs($why) . "'); 0;";
        } elsif ( $mode eq 'jsonp' ) {
            return $jsonp_wrap->({
                'success'   => 0,
                'error'     => $why,
            });
        }
    };

    my $bad_input = sub {
        my ($why) = @_;

        if ( $mode eq 'html' ) {
            return $site_scheme_wrap->( LJ::bad_input($why) );
        } else {
            return $error->("Bad input: $why");
        }
    };

    # basic initialization: who is working with us, and which comment
    # they are working with
    my $dtalkid             = LJ::Request->get_param('id');
    my $journal_username    = LJ::Request->get_param('journal');
    return $error->('Missing parameters.')
        unless $dtalkid and $journal_username ne '';

    my $journal = LJ::load_user( $journal_username );
    return $bad_input->( LJ::Lang::ml('error.nojournal') )
        unless $journal;

    my $comment = LJ::Comment->new( $journal, 'dtalkid' => $dtalkid );
    return $bad_input->( LJ::Lang::ml('/delcomment.bml.error.nocomment') )
        unless $comment and $comment->valid;

    my $poster = $comment->poster;
    my $entry  = $comment->entry;

    my $remote = LJ::get_remote();
    unless ($remote) {
        if ( $mode eq 'html' ) {
            return LJ::needlogin_redirect();
        } else {
            my $ml_var = '/delcomment.bml.error.notloggedin';
            return $error->( LJ::Lang::ml($ml_var) );
        }
    }

    # what are we supposed to do? we can show form, or we can delete
    # the comment, depending on the form parameters
    my $method = 'form';

    if ( LJ::Request->did_post && LJ::Request->post_param('confirm') ) {
        return $error->( LJ::Lang::ml('error.invalidform') )
            unless LJ::check_form_auth();

        $method = 'delete';
    } elsif ( $mode eq 'jsonp' && LJ::Request->get_param('confirm') ) {
        my %vars = (
            'auth_token' => LJ::Request->get_param('auth_token'),
            'journal'    => $journal->username,
            'jitemid'    => $entry->jitemid,
        );

        return $error->( LJ::Lang::ml('error.invalidform') )
            unless LJ::Auth->check_ajax_auth_token(
                $remote, '/delcomment.bml', %vars
            );

        $method = 'delete';
    }

    # additional error checking: comment already deleted, something is
    # suspended or read-only, they are trying to delete something
    # they cannot, etc.

    return $bad_input->( LJ::Lang::ml('/delcomment.bml.error.suspended') )
        if $remote->is_suspended;

    return $error->( $LJ::MSG_READONLY_USER )
        if LJ::get_cap( $journal, "readonly" );

    return $bad_input->( LJ::Lang::ml('/delcomment.bml.error.invalidtype') )
        unless $comment->nodetype eq 'L';

    return $bad_input->( LJ::Lang::ml('/delcomment.bml.error.alreadydeleted') )
        if $comment->is_deleted;

    unless ( $comment->user_can_delete($remote) ) {
        my $ml_var = $journal->is_community ? '.error.cantdelete.comm'
                                            : '.error.cantdelete';

        return $error->( LJ::Lang::ml( '/delcomment.bml' . $ml_var ) );
    }

    # now, let's find out what remote can actually do with the comment
    my $can_manage = $remote->can_manage($journal);
    my $can_mark_spam = LJ::is_enabled('spam_button') && 
                        LJ::Talk::can_mark_spam($remote, $journal, $poster, $comment);
    my $can_sweep     = ($remote && $poster && $remote->can_sweep($journal));

    my %can = (
        'manage_journal' => $can_manage,

        # they cannot delete the thread if there is no thread
        'delete_thread'  => $comment->has_children,

        # they can ban the comment author if they are the journal owner
        # and there is an author; also, they will not be able to ban
        # themselves
        'ban'            => ($can_manage || $can_sweep) && $poster && ( $remote != $poster ),

        # they can mark as spam unless the comment is their own;
        # they don't need to be the community maintainer to do that
        'mark_spam'      => $can_mark_spam && $poster && ( $remote != $poster ),

        # they can delete all comments posted by the same author
        # if they are the entry author, and the comment being deleted
        # has not been posted anonymously
        'delete_author'  => $poster && ( $can_manage || ( $remote == $entry->poster ) ),
    );

    # so now that we have prepared everything, let's actually
    # do something

    if ( $method eq 'form' ) {
        my $template = LJ::HTML::Template->new(
            { 'use_expr' => 1 }, # force HTML::Template::Pro with Expr support
            'filename' => "$ENV{'LJHOME'}/templates/Comments/Delete.tmpl",
        );

        $template->param(
            'form_action' => "$LJ::SITEROOT/delcomment.bml?" .
                             'journal=' . LJ::eurl($journal_username) . '&' .
                             'id=' . int($dtalkid),
            'form_auth'   => LJ::form_auth(),
        );

        if ( $can{'ban'} ) {
            $template->param(
                'ml_confirm_ban' => LJ::Lang::ml(
                    '/delcomment.bml.confirm.banuser',
                    { 'user' => $poster->ljuser_display }
                ),
            );
        }

        if ( $can{'delete_author'} ) {
            my $ml_var = ( $poster == $remote ) ? '.confirm.delauthor.my'
                                                : '.confirm.delauthor';

            $template->param(
                'ml_confirm_delauthor' => LJ::Lang::ml(
                    '/delcomment.bml' . $ml_var,
                    { 'user' => $poster->ljuser_display }
                ),
            );
        }

        if ( $can_manage ) {
            my $link_title = LJ::Lang::ml('/manage/comments/index.bml.title');
            my $link_addr = "$LJ::SITEROOT/manage/comments/?" .
                            'authas=' . $remote->username;

            $template->param(
                'ml_changeoptions' => LJ::Lang::ml(
                    '/delcomment.bml.changeoptions',
                    { 'link' => qq{<a href="$link_addr">$link_title</a>} }
                ),
            );
        }

        $template->param( "can_$_" => $can{$_} )
            foreach keys %can;

        return $site_scheme_wrap->( $template->output );
    }

    if ( $method eq 'delete' ) {
        my %actions;

        # mark as spam before this comment gets deleted
        my $mark_as_spam = LJ::Request->get_param('spam') || 
                           LJ::Request->post_param('spam');
        if ( $can{'mark_spam'} and $mark_as_spam ) {
            LJ::Talk::mark_comment_as_spam( $journal, $comment->jtalkid );
            LJ::set_rel($journal, $poster, 'D');
            $actions{'marked_spam'} = 1;
        }

        # then, delete the thread if requested
        if ( $can{'delete_thread'} and LJ::Request->post_param('delthread') )
        {
            LJ::Talk::delete_thread( $journal,
                                     $entry->jitemid,
                                     $comment->jtalkid );
            $actions{'thread_deleted'} = 1;
        }

        # then, delete all the comments by the author if requested
        if ( $can{'delete_author'} and LJ::Request->post_param('delauthor') )
        {
            LJ::Talk::delete_author( $journal,
                                     $entry->jitemid,
                                     $poster->userid );

            $actions{'author_deleted'} = 1;
        }

        # now, if we haven't deleted the comment in question as a part
        # of the thread or along with the other comments by the same
        # author, let's actually delete it
        unless ( $actions{'thread_deleted'} || $actions{'author_deleted'} ) {
            LJ::Talk::delete_comment( $journal,
                                      $entry->jitemid,
                                      $comment->jtalkid,
                                      $comment->state );
        }

        # now, ban the user if requested
        if ( $can{'ban'} and LJ::Request->post_param('ban') ) {
            $journal->ban_user($poster);
            $actions{'banned'} = 1;
        }

        # finally, let's return something to the caller
        if ( $mode eq 'html' ) {
            my @messages;

            if ( $actions{'banned'} ) {
                push @messages, LJ::Lang::ml(
                    '/delcomment.bml.success.andban',
                    { 'user' => $poster->ljuser_display }
                );
            } else {
                push @messages, LJ::Lang::ml('/delcomment.bml.success.noban');
            }

            if ( $actions{'marked_spam'} ) {
                push @messages, LJ::Lang::ml('/delcomment.bml.success.spam');
            }

            my $ml_header = LJ::Lang::ml('/delcomment.bml.success.head');

            my $messages = join( '', map { "<p>$_</p>" } @messages );

            my $body = qq{
                <h1>$ml_header</h1>
                $messages
            };

            return $site_scheme_wrap->($body);
        } elsif ( $mode eq 'js' ) {
            return "1;";
        } elsif ( $mode eq 'jsonp' ) {
            return $jsonp_wrap->({ 'success' => 1 });
        }
    }
_code?>
