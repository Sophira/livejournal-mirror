<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;

    my $body;

    if ($LJ::SERVER_DOWN) {
        $body = LJ::server_down_html();
        return $body;
    }

    if ($LJ::USE_SSL && ! $LJ::IS_SSL && $FORM{'ssl'} ne "no") {
        return BML::redirect("$LJ::SSLROOT/changeemail.bml");
    }

    my $u = LJ::get_remote()
        or return LJ::bad_input($ML{'error.noremote'});

    my $remote = $u;

    my $authas = $FORM{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input("You could not be authenticated as the specified user.")
        unless $u;

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';

    my $crumb = $LJ::IS_SSL ? 'securechangeemail' : 'changeemail';
    LJ::set_active_crumb($crumb);

    my $update_form = sub {
        my $ret;

        # else, show the form to change:
        $ret .= "<form action='changeemail.bml$getextra' method='post'>\n";
        $ret .= LJ::html_hidden(mode => 'submit',
                                ssl => $FORM{'ssl'});


        # Warn them if logged in and not validated
        if ($u && !LJ::did_post() && $u->{'status'} ne 'A') {
            $ret .= "<?warningbar <b>$ML{'label.warning'}</b> $ML{'.error.notvalidated'} warningbar?>";
            $ret .= "<br />";
        }

        $ret .= "<?standout\n";

        $ret .= LJ::make_authas_select($remote, { 'authas' => $FORM{'authas'} });

        $ret .= "<br/><br/><div>$ML{'.label.username'}<br />\n";
        $ret .= "<b>$u->{user}</div><br/>\n";
        $ret .= "<div>$ML{'.label.oldemail'}<br />\n";
        $ret .= "<b>$u->{email}</b></div><br/>\n";
        $ret .= "<div>$ML{'.label.newemail'}<br />\n";
        $ret .= "<input type='text' name='email' size='50' maxlength='50' /></div><br />\n";
        $ret .= "<div>$ML{'.label.password'} for $remote->{user}<br />\n";
        $ret .= "<input type='password' name='password' size='50' maxlength='50' /></div>\n";

        $ret .= "standout?>\n";
        $ret .= "<br />\n";
        $ret .= "<?standout\n";
        $ret .= "<input type='submit' value=\"$ML{'.btn.change'}\" />\n";
        $ret .= "standout?>\n";
        $ret .= "</form>\n";
        return $ret;
    };

    if ($POST{'mode'} eq 'submit' && ($POST{'email'} || $POST{'password'})) {
        my $password = $POST{'password'};
        my $email = LJ::trim($POST{'email'});

        my @errors = ();

        LJ::check_email($POST{'email'}, \@errors);

        my $blocked = 0;

        if ($LJ::BLOCKED_PASSWORD_EMAIL && $POST{'email'} =~ /$LJ::BLOCKED_PASSWORD_EMAIL/) {
            $blocked = 1;
            push @errors, $ML{'.error.invalidemail'};
        }

        if ($POST{'password'} ne $remote->{'password'}) {
            push @errors, $ML{'.error.invalidpassword'};
        }

        ## make note of changed email
        my $loginfo = "old: $u->{email}, new: $POST{'email'}";
        $loginfo .= ", ip: " . BML::get_remote_ip if $LJ::LOG_CHANGEEMAIL_IP;
        $loginfo .= ", blocked: " . $blocked;
        $loginfo .= ", success: " . ((scalar @errors) ? 'false' : 'true');

        LJ::statushistory_add($u->{userid}, $u->{userid}, 'email_changed', $loginfo);

        if (@errors) {
            $body .= LJ::error_list(@errors);
            $body .= $update_form->();
            return $body;
        }

        LJ::infohistory_add($u, 'email', $u->{email}, $u->{status});

        $u->log_event('email_change', { remote => $u, new => $POST{'email'} });

        LJ::run_hook('post_email_change',
                     {
                         user     => $u,
                         newemail => $POST{'email'},
                     });

        my $tochange = {
            email => $POST{'email'}
        };
        $tochange->{status} = 'T' if $u->{status} eq 'A';

        LJ::update_user($u, $tochange);

        $body = "<?h1 $ML{'.success.header'} h1?><?p $ML{'.success.text'} p?>";
    } else {
        $body .= $update_form->();
    }

    return $body;
}
_code?>
    <=body
    page?><?_c <LJDEP>
post: htdocs/changepassword.bml
lib: Digest::MD5
hook: post_changepassword
    </LJDEP> _c?>
