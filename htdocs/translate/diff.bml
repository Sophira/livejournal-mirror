<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>
<body>
<?_code
{
    use strict;
    use vars qw(%GET);
    use Fcntl;
    use POSIX qw(tmpnam);
    
    BML::set_content_type("text/html; charset=utf-8");
    
    my $lang = $GET{'lang'};
    my $l = LJ::Lang::get_lang($lang);
    return "<b>Invalid language</b>" unless $l;

    return "<b>Invalid item</b>" unless $GET{'it'} =~ /^(\d+):(\d+)$/;
    my ($dmid, $itid) = ($1, $2);
    
    my @lnids = $l->{'lnid'};
    {
        my $il = $l;
        while ($il && $il->{'parentlnid'}) {
            push @lnids, $il->{'parentlnid'};
            $il = LJ::Lang::get_lang_id($il->{'parentlnid'});
        }
    }
    my $lnids = join(",", @lnids);

    my $dbs = LJ::get_dbs;
    my $dbr = $dbs->{'reader'};
    my ($sth, $ret);

    my $sth = $dbr->prepare("select * from ml_text where dmid=$dmid and itid=$itid and lnid in ($lnids) ORDER BY txtid");
    $sth->execute;
    my @tlist;
    while (my $t = $sth->fetchrow_hashref) { 
        next if @tlist && $t->{'text'} eq $tlist[-1]->{'text'};
        push @tlist, $t; 
    }

    my $changes = scalar @tlist - 1;
    return "<b>No changes</b>" unless $changes;

    my $view_change = $GET{'change'} || $changes;
    return "bogus change" if $view_change < 1 || $view_change > $changes;
    for (1..$changes) {
        if ($_ eq $view_change) {
            $ret .= "<b>[Change $_]</b>\n";
        } else {
            $ret .= "<a href='diff.bml?lang=$lang&it=$GET{'it'}&change=$_'>[Change $_]</a>\n";
        }
    }
    $ret .= "<hr>";
    my $was = $tlist[$view_change-1]->{'text'};
    my $then = $tlist[$view_change]->{'text'};

    my ($was_alt, $then_alt) = ($was, $then);
    foreach (\$was_alt, \$then_alt) {
        $$_ =~ s/\n/*NEWLINE*/g;
        $$_ =~ s/\s+/\1\n/g;
        $$_ .= "\n";
    }

    my ($was_file, $then_file);
    my $tries = 0;

    $tries = 0;
    do { $was_file = tmpnam(); $tries++; } until sysopen(FH, $was_file, O_RDWR|O_CREAT|O_EXCL) || $tries > 5;
    return "Error creating temp file" if $tries > 5;
    print FH $was_alt; close FH;

    $tries = 0;
    do { $then_file = tmpnam(); $tries++; } until sysopen(FH, $then_file, O_RDWR|O_CREAT|O_EXCL) || $tries > 5;
    return "Error creating temp file" if $tries > 5;
    print FH $then_alt; close FH;

    my @words = split(/\n/, $was_alt);
    my $diff = `diff -u $was_file $then_file`;

    my $pos = 0;
    foreach my $dl (split(/\n/, $diff)) {
        next if $dl =~ /^(\+\+\+|\-\-\-)/;
        if ($dl =~ /^\@\@ \-(\d+),(\d+)/) {
            my $newpos = $1;
            for (my $i=$pos+1; $i<$newpos; $i++) {
                my $word = LJ::ehtml($words[$i-1]);
                $word =~ s/\*NEWLINE\*/<br>\n/g;
                $ret .= "$word ";
                $pos++;
            }
            next;
        }
        if ($dl =~ /^ /) {
            $pos++;
            my $word = LJ::ehtml($words[$pos-1]);
            $word =~ s/\*NEWLINE\*/<br>\n/g;
            $ret .= "$word ";
        }
        if ($dl =~ /^\-/) {
            $pos++;
            my $word = LJ::ehtml($words[$pos-1]);
            $word =~ s/\*NEWLINE\*/<br>\n/g;  
            $ret .= "<span style='background-color: #ffd0d0; color: #ff0000'>$word</span> ";
        }
        if ($dl =~ /^\+(.*)/) {
            my $word = LJ::ehtml($1);
            $word =~ s/\*NEWLINE\*/<br>\n/g;
            $ret .= "<span style='background-color: #20ff20; color: #002000'>$word</span> ";
        }
    }

    $ret .= "<hr><b>Was:</b><br>" . LJ::ehtml($was);
    $ret .= "<hr><b>Then:</b><br>" . LJ::ehtml($then);

    unlink($was_file, $then_file);

    return $ret;

}
_code?>
</body>
</html>
