<?page
title=><?_ML .title _ML?>
body<=

<?_code

 my $ret = "";
 return LJ::server_down_html() if ($LJ::SERVER_DOWN);
 return "<?badinput?>" unless LJ::text_in(\%FORM);

 my $dbs = LJ::get_dbs();
 my $dbh = $dbs->{'dbh'};
 my $dbr = $dbs->{'reader'};

 my $remote = LJ::get_remote($dbs);
 if ($remote && $FORM{'hpassword'} eq "_(remote)") {
     $FORM{'hpassword'} = LJ::hash_password($remote->{'password'});
 }

 my $user = lc($FORM{'user'});
 my $userid = 0;
 my $hpassword = $FORM{'hpassword'} || LJ::hash_password($FORM{'password'});
 my %res;
 my $just_last = 0;
 my $jump_to_item = 0;

if ($remote && $user eq $remote->{'user'} && 
    $FORM{'password'} eq "" && $FORM{'hpassword'} eq "")
{
    $hpassword = $FORM{'hpassword'} = LJ::hash_password($remote->{'password'});
}

 # we always come in with ditemid, translate it here into real itemid,
 # and back into ditemid using anum returned by the protocol whenever
 # we make a form to refer to ourselves.  --avva
 $FORM{'itemid'} = int($FORM{'itemid'} / 256) if $FORM{'itemid'};

 # add protocol version if we have Unicode support.
 # it'll thus automatically be used in all get_request() calls.

 $FORM{'ver'} = $LJ::PROTOCOL_VER;

 #### determine their mode

 if ($FORM{'mode'} eq "" && $FORM{'itemid'}) 
 {
     $jump_to_item = 1;
     unless ($remote) {
         return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.mustlogin'} p?>";
     }
     $user = $FORM{'user'} = $remote->{'user'};
     $userid = $remote->{'userid'};

     my $itemid = $FORM{'itemid'}+0;
     my $owner = $FORM{'journal'};

     if ($owner && $owner ne $user) {
         $FORM{'usejournal'} = $owner;
     }

     $FORM{'mode'} = "getevents";
     $FORM{'selecttype'} = "one";
     
     LJ::do_request($dbs, \%FORM, \%res, { "noauth" => 1});     
 }

 if ($FORM{'metamode'} eq "choose_editrange") 
 {
     $FORM{'mode'} = "getevents";
     if ($FORM{'selecttype'} eq "last") 
     {
         $FORM{'selecttype'} = "lastn";
         $FORM{'howmany'} = 1;
         $just_last = 1;
     }
     LJ::do_request($dbs, \%FORM, \%res);
 
     if ($res{'success'} eq "OK")
     {
         $ret .= "<?h1 $ML{'.pickentry.head'} h1?><?p $ML{'.pickentry.text'} p?>\n";
         $ret .= "<form method='post' action='editjournal_do.bml'>\n";
         $ret .= "<input type='hidden' name='mode' value='getevents'>\n";
         $ret .= "<input type='hidden' name='selecttype' value='one'>\n";
         $ret .= "<input type='hidden' name='user' value='$user'>\n";
         $ret .= "<input type='hidden' name='hpassword' value='$hpassword'>\n"
             unless $remote && $remote->{'user'} eq $user;

         my %props = ();
         for (my $i=1; $i<=$res{'prop_count'}; $i++) {
             $props{$res{"prop_${i}_itemid"}}->{$res{"prop_${i}_name"}} = $res{"prop_${i}_value"};
         }
         
         my $count = $res{'events_count'};
         for (my $i=1; $i<=$count; $i++)
         {
             my $ditemid = defined $res{"events_${i}_anum"} ? 
                 $res{"events_${i}_itemid"} * 256 + $res{"events_${i}_anum"} : 
                 $res{"events_${i}_itemid"};

             $ret .= "<hr><input type=radio name='itemid' value='$ditemid'> <b>" .
                 $res{"events_${i}_eventtime"} . "</b>";

             if ($res{"events_${i}_subject"}) {
                 $ret .= "; <i>" . BML::ebml($res{"events_${i}_subject"}) . "</i>";
             }
             $ret .= "<br />\n";

             my $event = BML::ebml(LJ::durl($res{"events_${i}_event"}));
             LJ::CleanHTML::clean_event(\$event,
                                        $props{$res{"events_${i}_itemid"}}->{'opt_preformatted'});
             $ret .= $event;
         }
         
         $ret .= "<?h1 $ML{'.continue.head'} h1?><?p $ML{'.continue.text'} p?><?standout <input type='submit' value='$ML{'.btn.edit'}'> standout?></form>\n";
         
         unless ($just_last) 
         {
             # unless they just want to edit the last entry, let them pick which one.
             return $ret;
         } else {
             # set stuff up so we can go on and edit the entry
             $ret = "";  # clear the buffer we were adding to, but aren't going to show.
         }
     }
     else
     {
         $ret .= "<?h1 $ML{'Error'} h1?>\n";
         $ret .= "<?p $ML{'.error.getting'} <ul><li><b><?_eh $res{'errmsg'} _eh?></b></li></ul> p?>";
         return $ret;
     }
 }

 ######  an entry was selected to edit

 # if $just_last is set, we've already loaded it.
 unless ($just_last || $jump_to_item)
 {
     if ($FORM{'mode'} eq "editevent") {

         ## must explicitly set this.  protocol makes a distinction between not defined
         ## and set to zero.  browsers won't send value (undefined) if unchecked.

         $FORM{"prop_opt_preformatted"} = $FORM{"prop_opt_preformatted"} ? 1 : 0;
         $FORM{"prop_opt_nocomments"} = $FORM{"prop_opt_nocomments"} ? 1 : 0;
         $FORM{"prop_opt_backdated"} = $FORM{"prop_opt_backdated"} ? 1 : 0;
         $FORM{"prop_opt_noemail"} = $FORM{"prop_opt_noemail"} ? 1 : 0;

         ## see if an "other" mood they typed in has an equivalent moodid
         if ($FORM{'prop_current_mood'} ne "") 
         {
             $FORM{'prop_current_moodid'} = ""; # so it gets deleted
             my $qmood = $dbr->quote(lc($FORM{'prop_current_mood'}));
             my $sth = $dbr->prepare("SELECT moodid FROM moods WHERE mood=$qmood");
             $sth->execute;
             my ($moodid) = $sth->fetchrow_array;
             if ($moodid) {
                 delete $FORM{'prop_current_mood'};
                 $FORM{'prop_current_moodid'} = $moodid;
             }
         }

         my $sec = "public";
         my $amask = 0;
         if ($FORM{'security'} eq "private") { $sec = "private"; }
         if ($FORM{'security'} eq "friends") { $sec = "usemask"; $amask = 1; }
         if ($FORM{'security'} eq "custom") { 
             $sec = "usemask"; 
             foreach my $bit (1..30) {
                 next unless $FORM{"custom_bit_$bit"};
                 $amask |= (1 << $bit);
             }
         }
         $FORM{'security'} = $sec;
         $FORM{'allowmask'} = $amask;
     }

     LJ::do_request($dbs, \%FORM, \%res);
 }
 
 if ($res{'success'} eq "OK")
 {
     if ($FORM{'mode'} eq "getevents")
     {
         $userid = LJ::get_userid($dbs, $user);
         my $count = $res{'events_count'};
         unless ($count) {
             return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.nofind'} p?>";
         }

         my $gfg;
         $gfg = LJ::Protocol::do_request($dbs, "getfriendgroups", {
             'username' => $user,
             'ver' => $LJ::PROTOCOL_VER,
         }, undef, {
             'noauth' => 1,
         }) unless $FORM{'usejournal'};
         
         my %props = ();
         for (my $i=1; $i<=$res{'prop_count'}; $i++) {
             $props{$res{"prop_${i}_name"}} = $res{"prop_${i}_value"};
         }

         my $ditemid = defined $res{'events_1_anum'} ? 
             $res{'events_1_itemid'} * 256 + $res{'events_1_anum'} : 
             $res{'events_1_itemid'};

         $ret .= "<?h1 $ML{'.title'} h1?><?p $ML{'.edit.text'} p?>\n";
         $ret .= "<form method='post' action='editjournal_do.bml'>\n";
         $ret .= "<input type='hidden' name='mode' value='editevent'>\n";
         $ret .= "<input type='hidden' name='user' value='$user'>\n";
         $ret .= "<input type='hidden' name='hpassword' value='$hpassword'>\n"
             unless $remote && $remote->{'user'} eq $user;
         $ret .= "<input type='hidden' name='itemid' value='$ditemid'>\n";
         if ($FORM{'usejournal'}) {
             $ret .= "<input type='hidden' name='usejournal' value='$FORM{'usejournal'}'>\n";
         }

         my ($year, $mon, $mday, $hour, $min) = split(/\D/, $res{"events_1_eventtime"});

         $ret .= "<table>\n";
         $ret .= "<tr><td align='right'>$ML{'.date'}<br /><i>(yyyy-mm-dd)</i></td><td><input name='year' size='5' maxlength='4' value='$year'>-";
         $ret .= "<input name='mon' size='3' maxlength='2' value='$mon'>-";
         $ret .= "<input name='day' size='3' maxlength='2' value='$mday'></td>\n";
         
         $ret .= "<td align='right'>$ML{'.localtime'}<br /><i>($ML{'.timeformat'})</i></td><td>";
         $ret .= "<input name='hour' size='3' maxlength='2' value='$hour'>:";
         $ret .= "<input name='min' size='3' maxlength='2' value='$min'></td></tr>\n";
         $ret .= "</table>\n";

         $ret .= "<p>$ML{'.subject'}<br />";
         $ret .= "<input name='subject' value=\"";
         $ret .= LJ::eall($res{"events_1_subject"});
         $ret .= "\" size='60' maxlength='255'>\n";
        
         $ret .= "<p><b>$ML{'.event'}</b><br /><textarea rows='12' cols='60' wrap='soft' name='event' style='width: 99%'>";
         $ret .= LJ::eall(LJ::durl($res{"events_1_event"}));
         $ret .= "</textarea></p>\n";

         $ret .= "<p><b>$ML{'label.security.head'}</b>";
         my @secs = ("public" => $ML{'label.security.public'}, "private" => $ML{'label.security.private'}, 
                     "friends" => $ML{'label.security.friends'});
         
         my $raw;
         if ($gfg && @{$gfg->{'friendgroups'}}) {
             push @secs, ("custom", $ML{'label.security.custom'});
             $raw = "onChange=\"document.getElementById('custom_boxes').style.display = (this.selectedIndex == 3) ? 'block' : 'none';\"";
         }
         
         my $curmask = $res{'events_1_allowmask'};
         my $cursec = $res{'events_1_security'};
         if ($cursec eq 'usemask') {
             $cursec = $curmask == 1 ? "friends" : "custom";
         }
         $ret .= LJ::html_select({ 'name' => 'security',
                                   'selected' => $cursec,
                                   'raw' => $raw,
                               }, @secs);

         $ret .= LJ::help_icon("security");

         if ($gfg && @{$gfg->{'friendgroups'}}) {
             my $display = $cursec eq "custom" ? "block" : "none";
             $ret .= "<blockquote id='custom_boxes' style='display: $display'>";
             foreach my $fg (@{$gfg->{'friendgroups'}}) {
                 my $selected;
                 if ($curmask+0 & 1<<$fg->{'id'}) {
                     $selected = "checked='checked'";
                 }
                 $ret .= "<input type='checkbox' name='custom_bit_$fg->{'id'}' value='1' $selected> ";
                 $ret .= LJ::ehtml($fg->{'name'}) . "<br />\n";
             }
             $ret .= "</blockquote>";
         }

         ### don't auto-format
         {
             my $check = $props{'opt_preformatted'} ? "checked" : "";
             $ret .= "<p><b>$ML{'.opt.noformat'}</b> <input type='checkbox' name='prop_opt_preformatted' value='1' $check>";
             $ret .= LJ::help_icon("noautoformat", " ");
         }

         ### don't allow comments
         {
             my $check = $props{'opt_nocomments'} ? "checked" : "";
             $ret .= "&nbsp;<b>$ML{'.opt.nocomments'}</b> <input type='checkbox' name='prop_opt_nocomments' VALUE='1' $check>";
         }

         ### don't email the poster
         {
             my $check = $props{'opt_noemail'} ? "checked" : "";
             $ret .= "&nbsp;<b>$ML{'.opt.noemail'}</b> <input type='checkbox' name='prop_opt_noemail' value='1' $check>";
         }

         ### backdating
         {
             my $check = $props{'opt_backdated'} ? "CHECKED" : "";
             $ret .= "<p><b>$ML{'.opt.backdate'}</b> <input type='checkbox' name='prop_opt_backdated' value='1' $check> $ML{'.opt.backdate.about'}";

         }

         
         ### picture to use
         {
             my $sth = $dbr->prepare("SELECT k.keyword FROM userpicmap m, keywords k WHERE m.userid=$userid AND m.kwid=k.kwid");
             $sth->execute;
             my @pics;
             push @pics, $_ while ($_ = $sth->fetchrow_array);

             if (@pics) {
                 $ret .= "<p><b>".BML::ml(".picture", {'url' => "$LJ::SITEROOT/allpics.bml?user=$user"}) ."</b> ";
                 $ret .= LJ::html_select({ 'name' => 'prop_picture_keyword',
                                           'selected' => $props{'picture_keyword'} },
                                           '', $ML{'.default'},
                                           map { $_, $_ } sort { lc($a) cmp lc($b) } @pics
                                         );
                 $ret .= LJ::help_icon("userpics", " ") . "</p>";
             }
         }

         ### current mood
         {
             $ret .= "<p><b>$ML{'.currmood'}</b><select name='prop_current_moodid'><option value=''>$ML{'.noneother'}";

             my $match = 0;
             my $sth = $dbr->prepare("SELECT moodid, mood FROM moods ORDER BY mood");
             $sth->execute;
             while ($_ = $sth->fetchrow_hashref) {
                 my $sel = ($props{'current_mood'} eq $_->{'mood'} || 
                            $props{'current_moodid'} == $_->{'moodid'}) ? " selected" : "";
                 if ($sel) { $match = 1; }
                 $ret .= "<option value='$_->{'moodid'}'$sel>$_->{'mood'}\n";
             }
             $ret .= "</select>";
             my $other_mood = $match==0 ? $props{'current_mood'} : "";
             $other_mood = LJ::ehtml($other_mood);
             $ret .= "$ML{'.other'} <input name='prop_current_mood' value='$other_mood' size='15' maxlength='30'>";
         }	     

         ## current music
         {
             my $music = LJ::ehtml($props{'current_music'});
             $ret .= "<p><b>$ML{'.currmusic'}</b> <input name='prop_current_music' value='$music' size='40' maxlength='60'>";
         }


         $ret .= "<?h1 $ML{'.save.head'} h1?><?p $ML{'.save.text'} p?><?standout <input type='submit' value='$ML{'.btn.save'}'> standout?></form>\n";
         
         return $ret;
     }
     elsif ($FORM{'mode'} eq "editevent")
     {
         if ($res{'success'} eq "OK")
         {
             my $itemid = $FORM{'itemid'}+0;
             my $journal = LJ::canonical_username($FORM{'usejournal'} || $FORM{'user'});
             my $ditemid = $itemid * 256 + $res{'anum'};
             my $ju = LJ::load_user($dbs, $journal);
             my $readurl = LJ::journal_base($ju) . "/$ditemid.html";
             if ($FORM{'event'} =~ /\S/) {
                 return "<?h1 $ML{'.success.head'} h1?><?p ".BML::ml(".success.edit", {'url' => $readurl}) ." p?>";
             } else {
                 return "<?h1 $ML{'.success.head'} h1?><?p $ML{'.success.delete'} p?>";
             }
         }
         else
         {
             return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.modify'} <ul><li><b>$res{'errmsg'}</b></li></ul> p?>";
         }
     }
     else
     {
         $ret .= "<?h1 $ML{'Error'} h1?>\n";
         $ret .= "<?p You shouldn't get here.. p?>";
         return $ret;
     }
 }
 else
 {
     $ret .= "<?h1 $ML{'Error'} h1?>\n";
     $ret .= "<?p $ML{'.error.getting'} <ul><li><b><?_eh $res{'errmsg'} _eh?></b></li></ul> p?>";
     return $ret;
 }

_code?>

<=body
page?><?_c <LJDEP>
post: htdocs/editjournal_do.bml
link: htdocs/moodlist.bml, htdocs/users
lib: cgi-bin/cleanhtml.pl
</LJDEP> _c?>
