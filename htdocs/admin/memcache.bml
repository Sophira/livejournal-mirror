<?_code
{
#line 4
    use strict;
    use vars qw(%GET);
    use Data::Dumper;
    use Time::HiRes ();
    use LJ::MemCache;

    my $u = LJ::get_remote();
    return "You must be logged in to view this tool." unless $u;

    return "You don't have the 'siteadmin:memcacheview' priv."
        unless LJ::check_priv($u, "siteadmin", "memcacheview");

    my %templates = (
        'overview' => \qq{
            <div class='topbar'>[<a href='memcache.bml'>Overview</a>]</div>
            <h1>Memory Cache Overview</h1>
            <table border='1' cellpadding='5'>
                <tr>
                    <th>Host</th>
                    <th>Hit Rate</th>
                    <th>Curr/Max Size</th>
                    <th>Utilization %</th>
                    <th>Uptime</th>
                    <th>Version</th>
                </tr>
                <TMPL_LOOP hosts>
                    <tr>
                        <td>
                            <a href="<TMPL_VAR details_link>">
                                <TMPL_VAR host>
                            </a>
                        </td>
                        <td><TMPL_VAR hit_rate></td>
                        <td align="center"><TMPL_VAR size></td>
                        <td><TMPL_VAR utilization></td>
                        <td><TMPL_VAR uptime></td>
                        <td><TMPL_VAR version></td>
                    </tr>
                </TMPL_LOOP>
            </table>
            <p>Global [<TMPL_VAR global>]</p>
        },

        'host' => \qq{
            <div class='topbar'>[<a href='memcache.bml'>Overview</a>]</div>
            <h1>Details for <TMPL_VAR host></h1>

            <h2>Slab classes</h2>
            <table border='1' cellpadding='2'>
                <tr>
                    <th>class</th>
                    <th>size</th>
                    <th>used</th>
                    <th>total</th>
                    <th colspan='2'>free</th>
                    <th>pages</th>
                    <th>max age</th>
                </tr>
                <TMPL_LOOP classes>
                    <tr>
                        <td><TMPL_VAR class></td>
                        <td><TMPL_VAR chunk_size></td>
                        <td><TMPL_VAR used_chunks></td>
                        <td><TMPL_VAR total_chunks></td>
                        <td><TMPL_VAR free_chunks></td>
                        <td><TMPL_VAR free_chunks_end></td>
                        <td><TMPL_VAR total_pages></td>
                        <td><TMPL_VAR age></td>
                    </tr>
                </TMPL_LOOP>
            </table>
        },
    );

    my $mode = $GET{'host'} ? 'host' : 'overview';

    my $template = LJ::HTML::Template->new( scalarref => $templates{$mode} );

    my $display_percents = sub {
        my ($what) = @_;
        return sprintf( '%0.02f%%', $what * 100 );
    };

    my $display_size = sub {
        my ($what) = @_;

        if ( $what > 1024 ** 3 ) {
            return sprintf( '%0.02fG', $what / 1024 ** 3 );
        } elsif ( $what > 1024 ** 2 ) {
            return sprintf( '%0.02fM', $what / 1024 ** 2 );
        } elsif ( $what > 1024 ) {
            return sprintf( '%0.02fk', $what / 1024 );
        } else {
            return $what;
        }
    };

    my $display_time = sub {
        my ($what) = @_;

        if ( $what > 86400 ) {
            return sprintf( '%0.02f days', $what / 86400 );
        } elsif ( $what > 3600 ) {
            return sprintf( '%0.02f hr', $what / 3600 );
        } elsif ( $what > 60 ) {
            return sprintf( '%0.02f min', $what / 60 );
        } elsif ( $what > 1 ) {
            return sprintf( '%0.02f sec', $what );
        } else {
            return sprintf( '%0.02f msec', $what * 1000 );
        }
    };

    my $parse_stats = sub {
        my ($raw) = @_;

        my %ret;
        while ( $raw =~ /^STAT (\S+) (\S+)/gm ) {
            $ret{$1} = $2;
        }
        return \%ret;
    };

    my $get_stats = sub {
        my ( $conn, $host, $statname ) = @_;

        my $raw = $conn->stats($statname)->{'hosts'}->{$host}->{$statname};
        return $parse_stats->($raw);
    };

    my $prev_hits = LJ::MemCache::get([ $u->userid, 'mcrate:' . $u->userid]);

    my %now_hits  = $prev_hits ? %$prev_hits : ();

    my $connections = LJ::MemCache::list_servers;

    if ( $mode eq 'overview' ) {
        my @hosts_display;

        my ( $tot_hits, $tot_misses ) = qw(0 0);

        foreach my $host ( sort keys %$connections ) {
            my $conn        = $connections->{$host};

            my $t1          = Time::HiRes::time();
            my $stats       = $conn->stats->{'hosts'}->{$host}->{'misc'};
            my $t2          = Time::HiRes::time();

            my $hits        = $stats->{'get_hits'};
            my $misses      = $stats->{'get_misses'};

            my $cpu         = $stats->{'rusage_user'}
                            + $stats->{'rusage_system'};

            $now_hits{$host} = [ $hits, $misses, $cpu ];

            my $requests    = $hits + $misses;
            my $hit_rate    = $hits / ( $hits + $misses || 1 );

            my $hit_rate_display = $display_percents->($hit_rate) . ' ';

            if ( $prev_hits && $prev_hits->{$host} ) {
                my ( $prev_hits, $prev_misses, $prev_cpu )
                    = @{ $prev_hits->{$host} };

                my $new_hits    = $hits     - $prev_hits;
                my $new_misses  = $misses   - $prev_misses;
                $tot_hits       += $new_hits;
                $tot_misses     += $new_misses;

                my $new_requests = $new_hits + $new_misses;
                my $new_rate = $new_hits / ( $new_requests || 1 );

                my $cpu = sprintf( "%0.6f", $cpu - $prev_cpu );

                $hit_rate_display .= '[' .
                                         $display_percents->($new_rate) . ' ' .
                                         "{$new_requests} " .
                                         $cpu .
                                     '] ';
            }
            $hit_rate_display .= $display_time->( $t2 - $t1 );

            my $bytes_used      = $stats->{'bytes'};
            my $bytes_avail     = $stats->{'limit_maxbytes'};

            my $size_display    = $display_size->($bytes_used) . '/' .
                                  $display_size->($bytes_avail);

            my $used_ratio      = $bytes_used / ( $bytes_avail || 1 );
            my $utilization     = $display_percents->($used_ratio);

            my $uptime          = $display_time->( $stats->{'uptime'} );
            my $version         = $stats->{'version'};

            push @hosts_display, {
                'host'          => $host,
                'details_link'  => "$LJ::SITEROOT/admin/memcache.bml?" .
                                   "host=$host",
                'hit_rate'      => $hit_rate_display,
                'size'          => $size_display,
                'utilization'   => $utilization,
                'uptime'        => $uptime,
                'version'       => $version,
            };
        }

        LJ::MemCache::set( [ $u->userid, 'mcrate:' . $u->userid], \%now_hits );

        my $tot_requests    = $tot_hits + $tot_misses;
        my $tot_rate        = $tot_hits / ( $tot_requests || 1 );
        my $global = $display_percents->($tot_rate) . ' ' .
                     '{' . $tot_requests . '}';

        $template->param(
            'hosts'     => \@hosts_display,
            'global'    => $global,
        );
    } elsif ( $mode eq 'host' ) {
        my $host = $GET{'host'};
        my $conn = $connections->{$host};

        die "invalid server $host"
            unless $host and $conn;

        my $stats_items = $get_stats->( $conn, $host, 'items' );
        my $stats_slabs = $get_stats->( $conn, $host, 'slabs' );

        my @classes_display;

        foreach my $class (0..31) {
            my $size = $stats_slabs->{"$class:chunk_size"};
            next unless $size;

            my $age = $stats_items->{'items:' . $class . ':age'};

            push @classes_display, {
                'class'         => $class,
                'chunk_size'    => $stats_slabs->{ $class . ':chunk_size' },
                'used_chunks'   => $stats_slabs->{ $class . ':used_chunks' },
                'total_chunks'  => $stats_slabs->{ $class . ':total_chunks' },
                'free_chunks'   => $stats_slabs->{ $class . ':free_chunks' },

                'free_chunks_end' =>
                    $stats_slabs->{$class . ':free_chunks_end'},

                'total_pages'   => $stats_slabs->{$class . ':total_pages'},
                'age'           => $display_time->($age),
            };

        }

        $template->param(
            'classes'   => \@classes_display,
            'host'      => $host,
        );
    }

    return $template->output;
}
_code?>

