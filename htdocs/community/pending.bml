<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('commpending');
	LJ::need_res('js/reject.js');

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    # get remote
    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    # old GET arg
    if ($GET{comm}) {
        return BML::redirect("$LJ::SITEROOT/community/pending.bml?authas=$GET{comm}");
    }

    my $cname = $GET{authas};
    return BML::redirect("$LJ::SITEROOT/community/manage.bml") unless $cname;

    my $ret;
    $ret .= "<form action='pending.bml' method='GET'>\n";
    $ret .= LJ::make_authas_select($remote, { authas => $GET{authas}, type => 'C' });
    $ret .= "</form>\n\n";

    # get $c object
    my $c = LJ::load_user($cname);
    return $ret . "<?h1 $ML{'Error'} h1?><?p $ML{'/community/members.bml.error.nocomm'} p?>"
        unless $c;
    my $cid = $c->{'userid'};

    # is $remote an admin?
    unless ($remote && ($remote->can_manage($c) || $remote->can_moderate($c))) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml('/community/members.bml.error.noaccess',
                        { comm => LJ::ljuser($cname, { type => 'C' }) });
        $ret .= " p?>";
        return $ret;
    }

    $ret .= LJ::maintainer_linkbar($c);

    # hit up the database to find pending members
    my $pendids = LJ::get_pending_members($c) || [];
    my $us = LJ::load_userids(@$pendids);

    # nothing pending?
    return $ret . "<?h1 $ML{'.nopending.title'} h1?><?p $ML{'.nopending.body'} p?>"
        unless @$pendids || LJ::did_post();

    # saving a form submission
    my ($added, $rejected, $ignored, $previous, $banned, $ban_skipped, @not_validated);
    if (LJ::did_post()) {
        unless (LJ::check_form_auth()) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>";
            return $ret;
        }

        my @userids = split(',', $POST{'ids'});
        my @is_selected = grep { defined $POST{"pending_$_"} } @userids;

        if (($POST{'reject_select'} eq '1' or $POST{'approve'}) and scalar @is_selected == 0) {
            $ret .= "<?h1 $ML{'/community/members.bml.success_empty.header'} h1?><?p $ML{'/community/members.bml.success_empty.message'} p?>";
        }

        if ($POST{'reject_done'} eq '1' or ($POST{'approve'} and scalar @is_selected)) {
            $ret .= "<?h1 $ML{'/community/members.bml.success.header'} h1?><?p $ML{'/community/members.bml.success.message'} p?>";
        }

        if ($POST{'reject_select'} eq '1' and scalar @is_selected) {
            $ret .= '<div class="b-pending">';

            my @to_show = ();
            foreach my $id (@userids) {
                unless ($us->{$id}) {
                    $previous++;
                    next;
                }
                unless (defined $POST{"pending_$id"}) {
                    $ignored++;
                    next;
                }
                if ($POST{"approve"} && !$us->{$id}->is_validated) {
                    push @not_validated, $us->{$id};
                    next;
                }
                next unless $POST{"pending_$id"} eq 'on';

                push @to_show, $us->{$id};

                if ($POST{"approve"}) {
                    LJ::approve_pending_member($cid, $id);
                    $added++;
                }
            }
            if ($POST{"approve"} and scalar @is_selected) {
                $ret .= "<?p " . BML::ml('.success.added', { num => $added }) . " p?>" if $added;
                $ret .= "<?p " . BML::ml('.success.not_validated', { list => join ",", map { $_->ljuser_display } @not_validated }) . " p?>" if scalar @not_validated;
            } else {
                $ret .= "<h3>".$ML{'.following_users'}."</h3>";
                $ret .= '<p class="i-bubble b-bubble-alert b-bubble-noarrow b-bubble-intext">' . $ML{'.you_can_remove'} . '</p>';
                $ret .= "<form method='post' action='pending.bml?authas=$cname'>\n";
                $ret .= LJ::form_auth();
                $ret .= '<ul class="b-pending-users"><li>' . join (",</li><li>", map { "<span><a href='" . $_->profile_url . "' target='_blank'>" . $_->display_name . "</a><i id=\"reject_user_id_".$_->{userid}."\" class='i-pending-close' title='" . $ML{'.button.remove'} . "'></i></span>" } @to_show) . "</li></ul>\n";
                $ret .= LJ::html_hidden('ids', join(',', map { $_->{'userid'} } @to_show)) . "\n";
                $ret .= "<p class='i-pending-returnlink' style='display: none;'> " . BML::ml("/community/members.bml.success.return", { 'aopts' => "href='".BML::get_uri() . "?authas=$cname'" }) . " </p>";
                $ret .= "<textarea name='reason' rows='7' cols='50' class='b-pending-reason' placeholder='".$ML{'.reason.default.text'}."'></textarea>\n";
                $ret .= LJ::html_hidden('reject_done', 1);
                $ret .= LJ::html_hidden('reject', $POST{'reject'});
                $ret .= LJ::html_hidden('reject_ban', $POST{'reject_ban'});
                $ret .= LJ::html_submit('yes_reject', $ML{'.button.yes.reject'}, {class=>'i-pending-reject'});
                $ret .= '<p class="i-bubble b-bubble-alert b-bubble-noarrow">' . $ML{'.reason.reject.text'} . '</p>' ."\n";
                $ret .= LJ::html_hidden('previous', $previous);
                $ret .= LJ::html_hidden('ignored', $ignored);
                $ret .= LJ::html_hidden('validated', join(",", @not_validated));
                $ret .= "</form>";
            }
            $ret .= '</div>';
        }

        if ($POST{'reject_done'} eq '1') {
            my $reason = $POST{'reason'} || $ML{'.reason.default.text'};

            # need a db handle now
            my $dbh = LJ::get_db_writer();

            # hit up each user to find out what to do with them
            foreach my $id (@userids) {
                if ($POST{"reject"}) {
                    LJ::reject_pending_member($cid, $id, $remote->{userid}, $reason);
                    $rejected++;
                } elsif ($POST{"reject_ban"}) {
                    my $banlist = LJ::load_rel_user($c, 'B') || [];
                    if (scalar(@$banlist) >= ($LJ::MAX_BANS || 5000)) {
                        $ban_skipped++;
                    } else {
                        LJ::set_rel($c, $us->{$id}, 'B');
                        LJ::User::UserlogRecord::BanSet->create( $c,
                            'bannedid' => $id, 'remote' => $remote );
                        LJ::run_hooks('ban_set', $c, $us->{$id});
                        $banned++;

                        LJ::reject_pending_member($cid, $id, $remote->{userid}, $reason); # only in case of successful ban
                        $rejected++; # for keeping this user in list for later reject
                    }
                }
            }

            $previous = $POST{'previous'};
            $ignored = $POST{'ignored'};
            $ret .= "<?p " . BML::ml('.success.rejected', { num => $rejected }) . " p?>" if $rejected;
            $ret .= "<?p " . BML::ml('.success.ignored', { num => $ignored }) . " p?>" if $ignored;
            $ret .= "<?p " . BML::ml('.success.previous', { num => $previous }) . " p?>" if $previous;
            $ret .= "<?p " . BML::ml('.success.banned', { num => $banned }) . " p?>" if $banned;
            $ret .= "<?p " . BML::ml('.success.ban_skipped', { num => $ban_skipped }) . " p?>" if $ban_skipped;

        }
        $ret .= "<?p " . BML::ml("/community/members.bml.success.return", { 'aopts' => "href='".BML::get_uri() . "?authas=$cname'" }) . " p?>";
    } else {

        my @users = sort { $a->{user} cmp $b->{user} } values %$us;
        my $page_size = 100; # change to adjust page size

        # are we going to jump to a specific user ?
        my $jumppage;
        my $jumpuser;
        my $jumpto = $POST{'jumpto'} || $GET{'jumpto'};
        if (@users > $page_size && $jumpto =~ /^\w+$/) {
            my $ct;
            foreach (@users) {
                $jumppage++ if $ct % $page_size == 0;
                if ($jumpto eq $_->{'name'}) {
                    $jumpuser = $_->{'name'};
                    last;
                }
                $ct++;
            }
            undef $jumppage unless $jumpuser;
        }

        # how to make links back to this page
        my $self_link = sub {
            return "pending.bml?authas=$cname&page=$_[0]";
        };

        my %items = BML::paging(\@users, $jumppage || $GET{page}, $page_size);
        my $navbar = LJ::paging_bar($items{page}, $items{pages},
                                     { self_link => $self_link });
        @users = @{$items{items}};

        # output starts here
        $ret .= "<div align='center'>";
        $ret .= "<form method='post' action='pending.bml?authas=$cname'>";
        $ret .= LJ::form_auth();

        # jump to user
        if ($items{'pages'} > 1 || $GET{'jumpto'} ne '') {
            $ret .= "<div style='margin-left: 30px;'>$ML{'.jump'}: ";
            $ret .= LJ::html_text({ 'name' => 'jumpto', 'value' => ($POST{'jumpto'} || $GET{'jumpto'}),
                                    'class' => 'text', 'size' => '10', 'maxlength' => '15' }) . " ";
            $ret .= LJ::html_submit(undef, 'Go') . "</div>";
        }

        # table headers
        $ret .= "<br /><table class='userslist-table' cellspacing='0' cellpadding='2'>\n<tr><th>";
        $ret .= LJ::html_check({ id => 'all', name => 'all', class => 'js-check-all', checked => 'checked',
        onchange =>
            "var inputs = document.getElementById('content-wrapper').getElementsByTagName('input');
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].type == 'checkbox' && inputs[i].getAttribute('id') !== 'all') {
                    inputs[i].checked = this.checked;
                }
            }",
        onclick =>
            "var inputs = document.getElementById('content-wrapper').getElementsByTagName('input');
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].type == 'checkbox' && inputs[i].getAttribute('id') !== 'all') {
                    inputs[i].checked = this.checked;
                }
            }",
         selected => 0 });
        $ret .= "</th><th>$ML{'/community/members.bml.key.user'}</th></tr>\n";

        # rows for existing users
        my $rc = 0;
        foreach (@users) {
            my $rstyle = ($rc++ & 1) ? '#efefef' : '#fff';
            $ret .= "<tr style='background-color: $rstyle;'><td>";
            $ret .= LJ::html_check({ id => 'pending_' . $_->userid, name => 'pending_' . $_->userid,
                                     selected => $jumpto ? ($_->user eq $jumpto ? 1 : 0) : 1 });
            $ret .= "</td><td>" . LJ::ljuser($_->{user}) . "</td></tr>\n";
        }

        # some hidden values
        $ret .= LJ::html_hidden('ids', join(',', map { $_->{userid}} @users)) . "\n";
        $ret .= "</table>";
        $ret .= LJ::html_submit('approve', $ML{'.button.approve'});
        $ret .= LJ::html_hidden('reject_select', 1);
        $ret .= LJ::html_submit('reject', $ML{'.button.reject'});
        $ret .= LJ::html_submit('reject_ban', $ML{'.button.reject_ban'});
        $ret .= "</form></div>\n\n";

        $ret .= $navbar;

        $ret .= BML::ml('Backlink', {
            'link' => '/community/manage.bml',
            'text' => $ML{'/community/members.bml.manage2'},
        });

    }

    return $ret;

}
_code?>

<=body
page?>
