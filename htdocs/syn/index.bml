<?page
title=>Syndication
body<=

<?_code #'
{
    my $dbs = LJ::get_dbs();
    my $dbh = $dbs->{'dbh'};

    my $u = LJ::get_remote($dbs);
    unless ($u) {
        return "<?h1 Login Required h1?><?p To manage your syndicated accounts, first <a href=\"/login.bml?ret=1\">login</a>. p?>";
    }
    return "Suspended account" if $u->{'statusvis'} eq "S";

    my $quota = LJ::get_cap($u, "synd_quota");
    unless ($quota) {
        return "<?h1 Sorry h1?><?p Your account type doesn't allow befriending syndicated accounts. p?>";
    }

    if (LJ::did_post() && $POST{'userid'} != $u->{'userid'}) {
        return "<?h1 Invalid form submission h1?><?p User posting doesn't match user that filled out the form. p?>";
    }

    my $sth = $dbh->prepare("SELECT s.userid, us.user, s.synurl, COUNT(*) FROM useridmap us, syndicated s, friends fa, friends fb ".
                            "WHERE fa.userid=? AND fa.friendid=s.userid AND us.userid=s.userid ".
                            "AND fb.friendid=s.userid GROUP BY 1, 2, 3");
    $sth->execute($u->{'userid'});
    my $used = 0;
    my %count;
    my %cost;
    my %syn;
    while (my ($suserid, $user, $url, $count) = $sth->fetchrow_array) {
        if ($POST{'action:remove'} && $POST{"defriend_$user"}) {
            $dbh->do("DELETE FROM friends WHERE userid=? AND friendid=?",
                     undef, $u->{'userid'}, $suserid);
            next;
        }
        $count{$user} = $count;
        $cost{$user} = LJ::syn_cost($count);
        $used += $cost{$user};
        $syn{$user} = $url;
    }
    
    # add custom feed
    if ($POST{'action:addcustom'}) {
        my $acct = $POST{'acct'};
        my $url = $POST{'synurl'};

        if ($acct ne "") {
            return "<?h1 Error h1?><?p Invalid account name. p?>"
                unless $acct =~ /^\w{3,15}$/;
            foreach my $re ("^system\$", @LJ::PROTECTED_USERNAMES) {
                next unless ($acct =~ /$re/);
                return "<?h1 Error h1?><?p Reserved account name. p?>"
            }
        }
        if ($url ne "") {
            return "<?h1 Error h1?><?p Invalid URL p?>" unless
                $url =~ m!^http://(.+?)/!;
            my $hostname = $1;
            return "Non-standard port number not allowed" 
                if $hostname =~ /:/;
            return "IP addresses not allowed" 
                unless $hostname =~ /\.\w/;
        }

        my $su;  # account to add
        if ($url) {
            $su = $dbh->selectrow_hashref("SELECT u.user, s.* FROM syndicated s, useridmap u ".
                                          "WHERE s.synurl=? AND s.userid=u.userid",
                                          undef, $url);
            
            unless ($su) {
                return "<?h1 Over quota h1?><?p Creating this RSS feed would put you over your syndication quota. p?>"
                    if $used+1 > $quota;
                
                return "<?h1 Need an account name h1?><?p To add a syndicated account that doesn't exist, go back and give it an account name. p?>"
                    unless $acct;
                
                # MAYBE: see if it actually points to a valid syndication file
                # naah, too much work here.  just let synsuck.pl detect its
                # bogosity and delete it.
                my $id = LJ::create_account($dbh, {
                    'user' => $acct,
                    'name' => $acct,
                    'password' => '',
                });
                return "<?h1 Username in use h1?><?p That account name is already in use. p?>"
                    unless $id;

                $dbh->do("UPDATE user SET journaltype='Y' WHERE userid=?", undef, $id);
                $dbh->do("INSERT INTO syndicated (userid, synurl, checknext) VALUES (?,?,NOW())",
                         undef, $id, $url);

                LJ::statushistory_add($dbh, $u->{'userid'}, $id, "synd_create", "acct: $acct");

                $su = $dbh->selectrow_hashref("SELECT u.user, s.* FROM syndicated s, useridmap u ".
                                              "WHERE s.userid=? AND s.userid=u.userid",
                                              undef, $id);
            }
        } elsif ($acct) {
            $su = $dbh->selectrow_hashref("SELECT u.user, s.* FROM syndicated s, useridmap u ".
                                          "WHERE u.userid=s.userid AND u.user=?",
                                          undef, $acct);
            unless ($su) {
                return "<?h1 Error h1?><?p No syndicated account exists with that username. p?>";
            }
        } else {
            return "<?h1 Error h1?><?p You must enter either a syndicated account's username or URL to add a new feed. p?>";
        }
        
        unless ($su) { return "unknown error."; }
        unless ($cost{$su->{'user'}}) 
        {
            my $count = $dbh->selectrow_array("SELECT COUNT(*) FROM friends WHERE friendid=?", undef,
                                              $su->{'userid'});
            $count = $count + 1;
            my $cost = LJ::syn_cost($count);
            if ($used + $cost > $quota) {
                return "<?h1 Sorry h1?><?p Adding this feed would put you over your syndication account quota. p?><?p [&lt;&lt; <a href='/syn/'>Back</a>] p?>";
            }
            LJ::add_friend($dbh, $u->{'userid'}, $su->{'userid'});
            $count{$su->{'user'}} = $count;
            $cost{$su->{'user'}} = $cost;
            $syn{$su->{'user'}} = $su->{'synurl'};
            $used += $cost;
        }
    }

    # find popular feeds the user isn't currently watching
    my @pop;
    $sth = $dbh->prepare("SELECT s.userid, su.user, s.synurl, count(*) FROM syndicated s, useridmap su, friends fa LEFT JOIN friends fu ON fu.userid=? AND fu.friendid=s.userid WHERE fu.userid IS NULL AND s.userid=su.userid and fa.friendid=s.userid AND s.lastnew > DATE_SUB(NOW(), INTERVAL 14 DAY) GROUP BY 1, 2, 3 ORDER BY 4 DESC LIMIT 20");
    $sth->execute($u->{'userid'});
    while (my ($suserid, $user, $url, $count) = $sth->fetchrow_array) {
        my $cost = LJ::syn_cost($count + 1);
        if ($POST{'action:add'} && $POST{"add_$user"}) {
            if ($used + $cost < $quota) {
                LJ::add_friend($dbh, $u->{'userid'}, $suserid);
                $count{$user} = $count+1;
                $cost{$user} = $cost;
                $syn{$user} = $url;
                $used += $cost;
            } else {
                return "<?h1 Sorry h1?><?p Watching " . LJ::ljuser($user) . " would put you over your syndication account quota. p?><?p [&lt;&lt; <a href='/syn/'>Back</a>] p?>";
            }
        } else {
            push @pop, [ $user, $url, $count ];
        }
    }

    my $ret = <<EOB;
<?h1 Using <?sitename?> for syndication h1?>
<?p
Here you can add syndicated feeds (RSS) from other sites to your friends list, removing the need to check a dozen sites every day.
p?>
<?p
All users have a quota for how many feeds they can befriend, based on account type.  Befriending a syndicated account costs a variable amount, depending on the popularity of the feed.  Popular feeds cost less, as the expense of the system maintaining the feed is shared by all the watchers.   If you're the sole watcher of a feed, it costs 1 unit.  If there are 5 people, it costs a half unit.  At 25 people, one third of a unit, and so on...
p?>
EOB
#' 

    $ret .= sprintf("<?h1 Your quota h1?><?p You're using <b>%0.03f</b> of your allowed <b>%.03f</b> units. p?>",
                    $used, $quota);

    $ret .= "<form method='post'>"; 
    $ret .= LJ::html_hidden("userid", $u->{'userid'});

    if ($used) {
        $ret .= "<p><table cellpadding='3'>";
        $ret .= "<tr><td></td><td><b>Account</b></td><td><b>Feed</b></td><td><b>Watchers</b></td><td><b>Unit Cost</b></td></tr>\n";
        foreach my $user (sort { $count{$a} <=> $count{$b} } keys %count) {
            $ret .= "<tr>";
            $ret .= "<td><input type='checkbox' value='1' name='defriend_$user'></td>";
            $ret .= "<td>" . LJ::ljuser($user)  . "</td>";
            $ret .= "<td><a href=\"$syn{$user}\">$syn{$user}</a></td>";
            $ret .= "<td align='right'>$count{$user}</td><td align='right'>";
            $ret .= sprintf("%.03f", $cost{$user});
            $ret .= "</td>";
            $ret .= "</tr>";
        }
        $ret .= "</table>";
        $ret .= "<input type='submit' name='action:remove' value='Remove Selected'>";
    }

    if (@pop) {
        $ret .= "<?h1 Add Popular Feed h1?><?p The following are some popular feeds you're not currently watching: p?>";
        $ret .= "<p><table cellpadding='3'>";
        $ret .= "<tr><td></td><td><b>Account</b></td><td><b>Feed</b></td><td><b>Watchers</b></td><td><b>Unit Cost</b></td></tr>\n";
        foreach (@pop) {
            my ($user, $url, $count) = @$_;
            my $cost = LJ::syn_cost($count + 1);  # plus one because we're including ourselves, friendof-to-be
            $ret .= "<tr>";
            $ret .= "<td><input type='checkbox' value='1' name='add_$user'></td>";
            $ret .= "<td>" . LJ::ljuser($user)  . "</td>";
            $ret .= "<td><a href=\"$url\">$url</a></td>";
            $ret .= "<td align='right'>$count</td><td align='right'>";
            $ret .= sprintf("%.03f", $cost);
            $ret .= "</td>";
            $ret .= "</tr>";
        }
        $ret .= "</table>";
        $ret .= "<input type='submit' name='action:add' value='Add Selected'>";        
    }

    $ret .= "<?h1 Add Other Feed h1?><?p Add a feed to your friends list.  Enter either the account name, the feed URL, or both, if you're creating a new feed.    p?>";
    $ret .= "<blockquote>Account: <input size='15' maxlength='15' name='acct'> <i>(won't be used if feed exists)</i>";
    $ret .= "<p>Feed URL: <input size='40' maxlength='255' name='synurl'>";
    $ret .= "<p><input name='action:addcustom' type='submit' value='Add Feed'></blockquote>";

    $ret .= "</form>";

    return $ret;
}
_code?>

<=body
page?>
