<?page
title=><?_code return $title; _code?>
windowtitle=><?_ML .title _ML?>
body<=
<?_code
{
#line 7
    use strict;
    use vars qw(%GET %POST $title);
    BML::decl_params(_default => qr/./);

    use LJ::Fotki::Photo;
    use LJ::DelayedEntry;
    use LJ::Fotki::Album;
    use LJ::Fotki::UserSpace;
    use LJ::Widget::Fotki::Upload;
    use LJ::Widget::Calendar;
    use List::Util;

    my $title = BML::ml('.title');

    my $head     = \$_[0]->{'head'};
    my $bodyopts = \$_[0]->{'bodyopts'};

    LJ::set_active_crumb('editentries');

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    if ($remote->underage) {
        return BML::redirect("$LJ::SITEROOT/agecheck/?s=1");
    }

    my $mode = $GET{'mode'} || $POST{'mode'} || "init";
    my $only_me_checked = LJ::did_post() ? $POST{'only_me'} : $GET{'only_me'};

    if ( $GET{'itemid'} || $POST{'itemid'} ) { $mode = "edit"; }
    if ( $GET{'delayedid'} || $POST{'delayedid'} ) { $mode = "edit"; }

    my $ret;
    my $getextra = undef;

    my $editprivacy_link = "<p class='i-bubble b-bubble-lite b-bubble-editprivacy b-bubble-noarrow'>" . BML::ml('.editprivacy', { aopts => "href='editprivacy.bml'" }) . "</p>";

    LJ::need_res(qw(
                    stc/entry.css
                    stc/editjournal.css
                    stc/widgets/selecttags.css
                    js/inputcomplete.js
                    js/jquery/jquery.ui.position.min.js
                    js/jquery/jquery.ui.autocomplete.min.js
                    js/jquery/jquery.bgiframe.js
                    js/gears_init.js
                    js/scanner.js
                    js/photobucket_jw.js
                    ));

    LJ::need_string(qw/
                        entryform.sticky_replace.edit
                        entryform.sticky.edit/);
    
    return LJ::bad_input("You must be authenticated as a person.")
        unless $remote->is_personal || $remote->is_identity;

    # are we modify a community post?
    my $usejournal = $GET{'usejournal'} || $POST{'usejournal'} || $GET{'journal'};
    undef $usejournal if $usejournal eq $remote->{'user'}; # ignore if it's the user
    my $usejournal_u = LJ::load_user ($usejournal) || $remote;

    my ($year, $month, $day) = ($POST{'year'} || $GET{'year'}, $POST{'month'} || $GET{'month'}, $POST{'day'} || $GET{'day'});
    my $ymd = join "-", ($year, $month, $day);

    my $show = $GET{'show'} || undef;

    # extra get arguments
    my $getextra;
    $getextra .= "usejournal=$usejournal&" if $usejournal;
    $getextra .= "year=$year&month=$month&day=$day&" if $year && $month && $day;
    $getextra .= "only_me=$only_me_checked&" if $only_me_checked;
    chop $getextra;
    $getextra = "?$getextra" if $getextra;

    my $start_from = $GET{'start_from'} || 0;
    my $delayed_skip = $GET{'delayed_skip'} || 0;
    my $items_per_page = 20;
    my $append_delayed = sub {
        my ($u, $items, $delayed_entries) = @_;
        my $delayed_appened = 0;
        my @ordered;
        
        my $append_delayed = sub {
            foreach my $ditem (@$delayed_entries) {
                my $entry = LJ::DelayedEntry->get_entry_by_id($u, $ditem);
                
                push @ordered, {
                                'alldatepart' => $entry->alldatepart ,
                                'system_alldatepart' => $entry->system_alldatepart,
                                'allowmask'   => $entry->allowmask,
                                'posterid'    => $entry->posterid,
                                'eventtime'   => $entry->posttime,
                                'security'    => $entry->security,
                                'logtime'     => $entry->logtime,
                                'delayed_obj' => $entry,
                                'delayedid'   => $ditem,
                                'itemid'      => 0,
                                'anum'        => 0,
                               };
            }
        };
    
        if ( scalar @$items == 0 ) {
            $append_delayed->();
            return @ordered;
        }
    
        foreach my $item (@$items) {
            if ($u->get_sticky_entry() == $item->{itemid}) {
                push @ordered, $item;
                next;        }
    
            if (!$delayed_appened) {
                $append_delayed->();
                $delayed_appened = 1;
            }
            push @ordered, $item;
        }
        return @ordered;
    };

    my $entry_chooser = sub {
        my $ref = shift;
        my %opts = @_;

        my $ret;

        my @res = @$ref;
        my $show_ad = $opts{show_ad} ? 1 : 0;
        my $delayed_prev = $opts{'delayed_prev'};
        my $delayed_next = $opts{'delayed_next'};

        if ($opts{'prev'} || $opts{'next'}) {
        $ret .= "<p class='i-qotd-nav'>";
        if ($opts{'prev'}) {
            my $delayedext = '';
            if ($delayed_prev) {
                $delayedext = "&delayed_skip=$delayed_prev";
            }
            $ret .=  "<a class='i-qotd-nav-prev' href='$LJ::SITEROOT/editjournal.bml$getextra" .
                    ($getextra ? "&" : "?") .
                    "start_from=$opts{prev}$delayedext'>prev</a>";
        } else {
            $ret .=  "<span class='i-qotd-nav-prev i-qotd-nav-prev-dis'>prev</span>";
        }
        if ($opts{'next'}) {
            my $delayedext = '';
            if ($delayed_next) {
                $delayedext = "&delayed_skip=$delayed_next";
            }
            $ret .= "<a class='i-qotd-nav-next' href='$LJ::SITEROOT/editjournal.bml$getextra" .
                    ($getextra ? "&" : "?") .
                    "start_from=$opts{next}$delayedext'>next</a>";
        } else {
            $ret .= "<span class='i-qotd-nav-next i-qotd-nav-next-dis'>next</span>";
        }
        $ret .= "</p>"
            if @res;
        }
        unless (@res) {
            $ret .= "<p class='i-bubble b-bubble-warning b-bubble-noarrow'>" .  BML::ml('.no_entries_to_edit') . "</p>";
        }
        $ret .= "</div>";

        $ret .= "<ul class='b-editentries'>" if @res;
        foreach my $e_raw (@res) {
            my $entry;
            if ( $e_raw->{'itemid'} ) {
                $entry = LJ::Entry->new_from_item_hash (LJ::load_user($usejournal) || $remote, $e_raw);
            } elsif ($e_raw->{'delayedid'}) {
                $entry = LJ::DelayedEntry->get_entry_by_id(LJ::load_user($usejournal,) || $remote, 
                                                            $e_raw->{'delayedid'}, {'dateformat' => 'S2'});
            } else {
                die "unknown entry type";
            }

            my $edit_disable = 0;
            if (
                ($e_raw->{'posterid'} != $remote->userid)
                || ($remote->is_readonly || ($usejournal_u && $usejournal_u->is_readonly))
            ) {
                $edit_disable++;
            }

            my $poster = $usejournal ? LJ::ljuser(LJ::load_userid($entry->posterid)) : "";

            $ret .= "<li class='b-editentry'>";

            if ( $entry->is_delayed() ) {
                  $ret .= BML::fill_template("typedelayed");
            }
 
            if ( $entry->is_sticky())  {
                $ret .= BML::fill_template("typesticky");
            }

            ### security indicator
            my $sec = ' ';
            if ($entry->security eq "private") {
                $sec .= BML::fill_template("securityprivate");
            } elsif ($entry->security eq "usemask") {
                if ($entry->allowmask == 0) { # custom security with no group -- essentially private
                    $sec .= BML::fill_template("securityprivate");
                } elsif ($entry->allowmask > 1) { # custom group
                    $sec .= BML::fill_template("securitygroups");
                } else { # friends only
                    $sec .= BML::fill_template("securityprotected");
                }
            }
            $ret .= $sec;

            $ret .= "<p class='b-editentry-ctrls'>";
            my $ditemid_get;
            if ($entry->is_delayed) {
                $ditemid_get = $getextra ? ("$getextra&amp;delayedid=" . $entry->delayedid) : ("?delayedid=" . $entry->delayedid);
            } else {
                $ditemid_get = $getextra ? ("$getextra&amp;itemid=" . $entry->ditemid) : ("?itemid=" . $entry->ditemid);
            }
            if (!$edit_disable) {
                $ret .= "<a href='editjournal.bml" . $ditemid_get . "&amp;mode=edit' class='b-editentry-edit-btn b-editentry-ctrl-btn'></a>";
            } else {
                $ret .= "<a href='editjournal.bml" . $ditemid_get . "&amp;mode=delete' class='b-editentry-del-btn b-editentry-ctrl-btn'></a>";
            }
            $ret .= "</p>";

            $ret .= "<h2><a href='".$entry->url."'>";
            if (my $subj = $entry->subject_text) {
                $ret .= LJ::ehtml($subj);
            } else {
                $ret .= BML::ml('.event.no_subject.title');
            }
            $ret .= "</a></h2>";
            my $alldateparts;
            if ($entry->is_delayed) {
                $alldateparts = $entry->alldatepart;
            } else {
                $alldateparts = LJ::TimeUtil->alldatepart_s2($entry->{'eventtime'});
            }
            my ($year, $mon, $mday, $hour, $min) = split(/\D/, $alldateparts);
            my $monthlong = BML::ml(LJ::Lang::month_long_langcode($mon));
            $ret .= "<p class='date'>" . $poster . " $monthlong $mday, $year, $hour:$min" . "</p>";

            my $event = LJ::ehtml(LJ::durl($entry->event_raw));
            $event =~ s!\n!<br />!g;
            $ret .= $event;
            if (my @taglist = $entry->tags) {
                $ret .= "<p><b>Tags:</b> " . LJ::ehtml(join ", ", @taglist) . "</p>";
            }
            $ret .= "</li>";
        }
        if ($show_ad) {
            my $ad = LJ::get_ads({ location => 'bml.editjournal', ljadwrapper => 1 });
            $ret .= "<td valign='top'>$ad</td>" if $ad;
        }
        $ret .= "</ul>" if @res;

        if ($opts{'prev'} || $opts{'next'}) {
        $ret .= "<p class='i-qotd-nav'>";
        if ($opts{'prev'}) {
            my $delayedext = '';
            if ($delayed_prev) {
                $delayedext = "&delayed_skip=$delayed_prev";
            }

            $ret .=  "<a class='i-qotd-nav-prev' href='$LJ::SITEROOT/editjournal.bml$getextra" .
                     ($getextra ? "&" : "?") .
                     "start_from=$opts{prev}$delayedext'>prev</a>";
        } else {
            $ret .=  "<span class='i-qotd-nav-prev i-qotd-nav-prev-dis'>prev</span>";
        }
        if ($opts{'next'}) {
            my $delayedext = '';
            if ($delayed_next) {
                $delayedext = "&delayed_skip=$delayed_next";
            }

            $ret .= "<a class='i-qotd-nav-next' href='$LJ::SITEROOT/editjournal.bml$getextra" .
                     ($getextra ? "&" : "?") .
                      "start_from=$opts{next}$delayedext'>next</a>";
        } else {
            $ret .= "<span class='i-qotd-nav-next i-qotd-nav-next-dis'>next</span>";
        }
        $ret .= "</p>";
        }

        return $ret;
    };

    if ($mode eq "edit") {
        # user object for community if we're modifying one
        my $usejournal_u;
        if ($usejournal) {
            $usejournal_u = LJ::load_user($usejournal);
            return LJ::bad_input("The community you selected does not exist.")
                unless $usejournal_u;
        }

        ###
        ### HAVE AN ITEMID TO EDIT
        ###

        my $ditemid = $GET{'itemid'} || $POST{'itemid'} || 0;
        my $delayedid = $GET{'delayedid'} || $POST{'delayedid'};    

        if ( $ditemid || $delayedid ) {
            my $itemid = 0;
            my $anum = 0;

            my $u_for_entry = $usejournal ? $usejournal_u : $remote;
            my $entry_obj;
            my %res = ();
            LJ::do_request({ 'mode' => 'getevents',
                             'selecttype' => 'one',
                             'ver' => $LJ::PROTOCOL_VER,
                             'user' => $remote->{'user'},
                             'usejournal' => $usejournal,
                             'itemid' => $itemid,
                             ($POST{'my_posts_only'}) ? ('posterid' =>  $remote->{'userid'}) : (),
                           },
                           \%res,
                           { "noauth" => 1,
                             'u' => $remote }
                           );

            if ($ditemid) {
                # the 'itemid' form element is really an 'itemid'
                $anum = $ditemid % 256;
                $itemid = int($ditemid / 256);

                $entry_obj = LJ::Entry->new($u_for_entry, ditemid => $ditemid);
    
                # do getevents request
              
                LJ::do_request({ 'mode' => 'getevents',
                                 'selecttype' => 'one',
                                 'ver' => $LJ::PROTOCOL_VER,
                                 'user' => $remote->{'user'},
                                 'usejournal' => $usejournal,
                                 'itemid' => $itemid },
                                 \%res,
                                 { "noauth" => 1,
                                   'u' => $remote } );
            } else {
                $entry_obj = LJ::DelayedEntry->get_entry_by_id($u_for_entry, $delayedid);

                # does the requested entry exist?
                return "<?h1 $ML{'Error'} h1?><?p $ML{'/editjournal_do.bml.error.nofind'} p?>"
                    unless $entry_obj;

                $res{'success'} = 'OK';
                $res{'events_count'}  = 1;
                $res{'events_1_anum'} = 0;
                $res{'events_1_poster'} = $entry_obj->poster->user;
                $res{'events_1_subject'} = $entry_obj->subject;
                $res{'events_1_event'} = $entry_obj->event;
                $res{'events_1_allowmask'} = $entry_obj->allowmask;
                $res{'events_1_security'} = $entry_obj->security;            
                $res{'events_1_eventtime'} = $entry_obj->posttime;
                $res{'events_1_'} = $entry_obj->mood;
                $res{'events_1_itemid'} = $entry_obj->jitemid;
                $res{'events_1_anum'} = $entry_obj->correct_anum;
                
                my @prop_keys = keys %{$entry_obj->props};
                $res{'prop_count'} = scalar @prop_keys; 

                my $i = 1;
                foreach my $key (@prop_keys) {
                    $res{"prop_${i}_name"} = $key;
                    $res{"prop_${i}_value"} = $entry_obj->props->{$key};
                    $i++;
                }
    
            }
    
            # was there a protocol error?
            return "<?h1 $ML{'Error'} h1?><?p $res{'errmsg'} p?>"
                unless $res{'success'} eq 'OK';

            # does the requested entry exist?
            return "<?h1 $ML{'Error'} h1?><?p $ML{'/editjournal_do.bml.error.nofind'} p?>"
                unless $res{'events_count'} && $res{'events_1_anum'} == $anum;

            ####  Check security before viewing this post
            my $errtxt;
            if ($itemid) {
                my $item = LJ::Talk::get_journal_item($u_for_entry, $itemid);
                return $errtxt unless LJ::Talk::check_viewable($remote, $item, undef, \$errtxt);
            }

            # are we authorized to edit other peoples' posts in this community?
            my $disabled_save = 0;
            my $disabled_delete = 0;
            my $disabled_spamdelete = 0;
            if ($usejournal && $res{'events_1_poster'} ne $remote->{'user'}) {
                if ($entry_obj->is_delayed) {
                    $disabled_delete = ! $entry_obj->can_delete_delayed_item($remote, $usejournal_u);
                } else {
                    $disabled_delete = ! LJ::can_delete_journal_item($remote, $usejournal_u, $itemid);
                }
                $disabled_save++;
            }
            $disabled_spamdelete = $disabled_delete || !$usejournal || ($res{'events_1_poster'} eq $remote->{'user'});

            # read-only posters and journals cannot be edited
            if (!$disabled_save && ($remote->is_readonly || ($usejournal_u && $usejournal_u->is_readonly))) {
                $disabled_save++;
            }

            $disabled_save++ if $u_for_entry->is_banned($remote);

            ###
            ### SAVE EDITS
            ###

            # are we spellchecking before we post?
            my $spellcheck_html;
            my $did_spellcheck;
            if ($LJ::SPELLER && $POST{'action:spellcheck'}) {
                $did_spellcheck++;
                my $s = new LJ::SpellCheck { 'spellcommand' => $LJ::SPELLER,
                                             'color' => '<?hotcolor?>', };
                my $event = LJ::ehtml($POST{'event'});
                $spellcheck_html = $s->check_html(\$event);
                $spellcheck_html = "<?inerr $ML{'entryform.spellcheck.noerrors'} inerr?>" unless $spellcheck_html ne "";
            }

            # they clicked the save or delete button
            if (!$spellcheck_html && ($POST{'action:save'} || $POST{'action:saveunsuspend'} || $POST{'action:delete'} || $POST{'action:deletespam'})) {
                return LJ::bad_input($ML{'error.invalidform'}) unless LJ::check_form_auth();

                my $timezone = $POST{'timezone'} || $GET{'timezone'};
                my $sticky = $POST{'sticky_type'} || $GET{'sticky_type'};
                my $custom_time = $POST{'custom_time'} || $GET{'custom_time'};
                $timezone =  sprintf("%+.4d", $timezone);
                my %req = (
                            'ver' => 2,
                            'username' => $remote->{'user'},
                            'usejournal' => $usejournal,
                            'tz'         => $timezone,
                            'itemid'     => $itemid,
                            'delayedid'  => $delayedid,
                            'sticky'     => $sticky,
                            'custom_time' => $custom_time,
                            );
                LJ::entry_form_decode(\%req, \%POST);

                # Delete
                $req{'event'} = '' if $POST{'action:delete'} || $POST{'action:deletespam'};

                # mark as spam, if need be
                if ( $POST{'action:deletespam'} && $entry_obj->is_delayed ) {
                      LJ::mark_entry_as_spam($usejournal_u, $itemid);
                }

                # if the action is to delete it, then let's note that
                if ( $POST{'action:delete'} || $POST{'action:deletespam'} ) {
                    # now log the event created abovei
                    if ($entry_obj->is_delayed) {
                        ($usejournal ? $usejournal_u : $remote)->log_event('delete_delayed_entry', {
                                                                                remote => $remote,
                                                                                actiontarget => $delayedid,
                                                                                method => 'web',});
                    } else {
                       ($usejournal ? $usejournal_u : $remote)->log_event('delete_entry', {
                                                                                remote => $remote,
                                                                                actiontarget => $ditemid,
                                                                                method => 'web',});
                    }
                }

                # do editevent request
                foreach my $k (keys %req) {
                    next unless ($k =~ /^prop_(.+)/);
                    $req{'props'}->{$1} = $req{$k};
                    delete $req{$k};
                }
                my $err = 0;
                my $res = LJ::Protocol::do_request('editevent', \%req, \$err, { 'noauth' => 1, 'u' => $remote });

                # check response
                unless ($res) {
                    return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.modify'} <ul><li><b>" . LJ::Protocol::error_message($err) . "</b></li></ul> p?>";
                }
               

                my $deleted = $req{event} ? 0 : 1;
                my $journalu = $usejournal ? $usejournal_u : $remote;
                my $j_base = $journalu->journal_base;
                my $entry_url = '';
                if ($entry_obj->is_delayed) {
                    if (!$res->{itemid}) {
                        $entry_url = $entry_obj->url;
                    } else {
                        $entry_url = $res->{url};
                    }
                } else {
                    $entry_url = LJ::item_link($journalu, $itemid, $res->{anum});
                }
    

                my $result = "<?h1 $ML{'.success.head'} h1?>";
                $result .= "<table border='0' width='100%'><tr valign='top'><td>";

                if ($deleted) {
                    $result .= "<?p $ML{'.success.delete'} p?>";
                    $result .= "<?p $ML{'.success.deletespam'} p?>" if $POST{'action:deletespam'};

                    my $deleted_extras = LJ::run_hook('entry_deleted_page_extras');
                    $result .= $deleted_extras if defined $deleted_extras;
                } else {
                    $result .= "<?p $ML{'.success.edited'} p?>";
                    
                    if (!$delayedid) {
        
                        # open a request about the unsuspension if one doesn't already exist
                        if ($POST{'action:saveunsuspend'} && !$entry_obj->prop("unsuspend_supportid") && $LJ::UNSUSPENSION_REQUEST_SPCATID) {
                            my %req;
                            $req{reqtype} = "user";
                            $req{requserid} = $remote->id;
                            $req{uniq} = LJ::UniqCookie->current_uniq;
                            $req{spcatid} = $LJ::UNSUSPENSION_REQUEST_SPCATID;
                            $req{ignore_dup_check} = 1; # can't have dup checking in case a particular entry gets re-suspended after unsuspension
                            $req{subject} = "Unsuspension Request from " . $remote->user;
                            $req{body} = "The suspended entry at " . $entry_obj->url . " has been edited and the poster requests unsuspension.";

                            my @errors;
                            my $spid = LJ::Support::file_request(\@errors, \%req);

                            if ($spid) {
                                $entry_obj->set_prop( unsuspend_supportid => $spid );
                                my $url = "$LJ::SITEROOT/support/see_request.bml?id=$spid";
                                $result .= "<?p " . BML::ml('.success.editedunsuspend', { url => "<a href='$url'>$url</a>" }) . " p?>";
                            }
                        } elsif ($POST{'action:save'} && $entry_obj->is_suspended && !$entry_obj->prop("unsuspend_supportid")) {
                            $result .= "<?p " . BML::ml('.success.editedstillsuspended', { aopts => "href='$LJ::SITEROOT/abuse/report.bml'" }) . " p?>";
                        }
                    }
                }

                $result .= join('<br>', @{$res->{warnings}} ) if $res->{warnings} and @{$res->{warnings}};

                $result .= "<div id='fromhere'>$ML{'.success.fromhere'}<ul>";
                $result .= "<li><a href='$entry_url'>$ML{'.success.fromhere.viewentry'}</a></li>" unless $deleted;
                $result .= "<li><a href='$j_base'>$ML{'.success.fromhere.viewentries'}</a></li>";
                $result .= "<li><a href='$LJ::SITEROOT/editjournal.bml'>$ML{'.success.fromhere.manageentries'}</a></li>";
                $result .= "</ul></div>";
                $result .= "</td>";

                my $ad = LJ::get_ads({ location => 'bml.editjournal', ljadwrapper => 1 });
                if ($ad) {
                    $result .= "<td valign='top' style='width: 300px;'>$ad</td>";
                }

                $result .= "</tr></table>";

                return $result;
            }


            ###
            ### SHOW EDIT FORM
            ###

            my $auth = "<li class='pkg'><label for='' class='title'>$ML{'.auth.poster'}</label>";
            $auth   .= "<span class='wrap'><span id='poster'>";
            $auth   .= $usejournal ? LJ::ljuser($res{'events_1_poster'}) . " in community " . LJ::ljuser($usejournal)
                                   :  LJ::ljuser($remote);
            $auth .= LJ::html_hidden("usejournal", $usejournal);
            $auth   .= "</span></span></li>";

            # Tags
            my @tag_names;

            my $utags;
            my $username;
            if ($usejournal && LJ::load_user($usejournal)) {
                $utags = LJ::load_user($usejournal)->tags;
                $username = $usejournal;
            } else {
                $utags = $remote->tags;
                $username = $remote->user;
            }

            if (keys %$utags) {
                @tag_names = sort { lc $a cmp lc $b } map { $_->{name} } values %$utags;
            }

            $auth .= "<script type=\"text/javascript\">\n";
            $auth .= "journalTags = " . LJ::JSON->to_json({$username => \@tag_names});
            $auth .= "\n</script>\n";

            my ($year, $mon, $mday, $hour, $min) = split(/\D/, $res{"events_1_eventtime"});
            my $datetime; my $date = LJ::html_datetime_decode({ 'name' => "date_ymd", }, \%POST);
            if ($date ne "0000-00-00 00:00:00") {
                my ($date, $time) = split( / /, $date);
                $datetime = "$date $POST{'hour'}:$POST{'min'}";
            } else {
                $datetime = "$year-$mon-$mday $hour:$min";
            }

            my $subject = $POST{'subject'} || $res{'events_1_subject'};
            my $event   = $POST{'event'}   || $res{'events_1_event'};

            my $curmask = $res{'events_1_allowmask'};
            my $cursec  = $res{'events_1_security'} || $POST{'security'};
            if ($cursec eq 'usemask') {
                $cursec = $curmask == 1 ? "friends" : "custom";
            }

            # start edit form
            my $ret; my $js;
            $ret .= "<table><tr><td>";
            $ret .= "<div style='width: 100%; float: left;'><form method='post' action='editjournal.bml$getextra' id='updateForm' name='updateForm'>";
            $ret .= LJ::form_auth();
            if (!$delayedid) {
                $ret .= LJ::html_hidden('itemid', $ditemid,'mode','edit','edited',1) . "\n";
            } else { 
                $ret .= LJ::html_hidden('delayedid', $delayedid,'mode','edit','edited',1) . "\n";
            }
            
            $event = LJ::durl($event);
            my $journalu = $usejournal ? LJ::load_user($usejournal) : $remote;
            LJ::EmbedModule->parse_module_embed($journalu, \$event, edit => 1);
            $event = LJ::eurl($event);

            my $suspend_msg = $entry_obj->should_show_suspend_msg_to($remote) ? 1 : 0;
            my $entry = {
                'mode' => "edit",
                'auth_as_remote' => 1,
                'subject' => $subject,
                'event' => $event,
                'datetime' => $datetime,
                'usejournal' => $usejournal,
                'security' => $cursec,
                'security_mask' => $curmask,
                'auth' => $auth,
                'remote' => $remote,
                'spellcheck_html' => $spellcheck_html,
                'richtext' => $LJ::DISABLED{'richtext'} ? 0 : 1,
                'mood' => $res{'events_1_'},
                'disabled_save' => $disabled_save,
                'disabled_delete' => $disabled_delete,
                'disabled_spamdelete' => $disabled_spamdelete,
                'suspended' => $suspend_msg,
                'unsuspend_supportid' => $suspend_msg ? $entry_obj->prop("unsuspend_supportid") : 0,
                'jitemid' => $itemid,
                'delayedid' => $delayedid,
                'sticky' => $entry_obj->is_sticky,
                'opt_backdated' => $entry_obj->prop('opt_backdated'),
            };

            for (my $i = 1; $i <= $res{'prop_count'}; $i++) {
                $entry->{"prop_" . $res{"prop_${i}_name"}} = $res{"prop_${i}_value"};
            }

            # add property for current music button displaying if last.fm user specified
            $entry->{prop_last_fm_user} = $u_for_entry->prop('last_fm_user');
            $entry->{prop_copyright} = $entry_obj->prop('copyright') || $remote->prop('default_copyright') || 'P';

            foreach ( keys %POST ) { $entry->{$_} = %POST->{$_}; }
            $entry->{'richtext_default'} = $entry->{"prop_used_rte"} ? 1 : 0,

            my $js = undef;
            my $onload;
            $ret .= LJ::entry_form($entry, \$$head, \$onload, undef, \$js);
            $ret .= "</form></div>";
            my $like_faq_link = LJ::help_icon_html('like', undef, undef, BML::ml('fcklang.ljlike.faq'));
            $ret .= <<LIKE_FAQ;
            <script type="text/javascript">
            // <![CDATA[
                window.faqLink = '$like_faq_link';
            // ]]>
            </script>
LIKE_FAQ
            $ret .= $js;
	
            $ret .= "</td>";
            my $ad = LJ::get_ads({ location => 'bml.editjournal', ljadwrapper => 1 });
            if ($ad) {
                $ret .= "<td valign='top' style='width: 300px;'>$ad</td>";
            }

            $ret .= "</tr></table>";

            my $qotd = LJ::QotD->get_single_question($entry->{prop_qotdid});
            my $qotd_text = LJ::Widget::QotD->qotd_display_embed( questions => [ $qotd ] );
            my $escaped_qotd_text = LJ::ejs($qotd_text);

            # javascript to initialize entry form since we've just called into entry_form
            # -- shove into \$head which is a reference into $_[0]->{head} and will
            #    be placed in the correct BML head portion later
            # -- this is a hack, should be done by weblib and pushed into \$$head above
            #    in a way which is compatible with both this page and update.bml
            my $is_sup = LJ::SUP->is_remote_sup() ? 1 : 0;
            LJ::need_string('entryform.close.confirm');

            $$head .= qq|
    <script type="text/javascript">
    //<![CDATA[
        var seedurl='$LJ::SITEROOT/photobucket_cb.bml';
        var pb_affsite_id = $LJ::PHOTOBUCKET_JWIDGET_ID;
        var cb_url = "&url=" + escape(seedurl);


        function initUpdateBml() {
            window.isSupUser = $is_sup;
            $onload
            window.initEditor();
        }
    //]]>
    LiveJournal.qotdText = "$escaped_qotd_text";
    </script>
|;
            $ret .= LJ::Widget::SettingWindow->render;

            return $ret;
        }

        ###
        ### NO ITEMID - SELECT ENTRY TO EDIT
        ###

        ### already authenticated from above

        return BML::redirect("$LJ::SITEROOT/editjournal.bml")
            unless LJ::did_post();

        my %res;
        my %req = (
                   'mode' => 'getevents',
                   'ver'  => $LJ::PROTOCOL_VER,
                   'user' => $remote->{'user'},
                   'usejournal' => $usejournal,
                   'truncate' => 300,
                    ($POST{'my_posts_only'}) ? ('posterid' =>  $remote->{'userid'}) : (),
                   );

        # last 1
        if ($POST{'selecttype'} eq "last") {
            $req{'selecttype'} = 'one';
            $req{'itemid'} = -1;

            # last n
        } elsif ($POST{'selecttype'} eq 'lastn') {
            $req{'selecttype'} = 'lastn';
            $req{'howmany'} = $POST{'howmany'};

            # day
        } elsif ($POST{'selecttype'} eq 'day') {
            $req{'selecttype'} = 'day';
            $req{$_} = $POST{$_} foreach qw(year month day);
        }

        # do getevents request
        LJ::do_request(\%req, \%res, { 'noauth' => 1, 'u' => $remote });

        # check response
        unless ($res{'success'} eq "OK") {
            return "<?h1 $ML{'Error'} h1?>\n" .
                "<?p $ML{'.error.getting'} <ul><li><b><?_eh $res{'errmsg'} _eh?></b></li></ul> p?>";
        }

        # only one item returned?  go directly to edit it
        if ($res{'events_count'} == 1) {
            my $ditemid = ($res{'events_1_itemid'} * 256) + $res{'events_1_anum'};
            my $ditemid_get = '';
            
            if ($delayedid && $delayedid != 0) {
                $ditemid_get = $getextra ? "$getextra&delayedid=$delayedid" : "?delayedid=$delayedid";
            } else { 
                $ditemid_get = $getextra ? "$getextra&itemid=$ditemid" : "?itemid=$ditemid";

            }
           # return BML::redirect("$LJ::SITEROOT/editjournal.bml$ditemid_get");
        }

        # how many results did we get?
        my $ev_count = $res{'events_count'};
        unless ($ev_count) {
            if ($req{'selecttype'} eq 'lastn') {
                return "<?h1 No Entries Found h1?>\n" .
                    "<?p The selected journal has no entries. p?>\n";
            }

            return "<?h1 No Entries Found h1?>\n" .
                "<?p No entries match the criteria you specified. Please go back and adjust your search. p?>\n";
        }

        ### display results
        return $entry_chooser->(\%res, show_ad => 1);
    } elsif ($mode eq "init") {
        # no authentication needs to be done on this page, it's just a form anyway

        $ret .= "<table style='width: 100%;'><tr><td>";

        # header
        $ret .= "<div class='b-editentries-header'>";
        $ret .= "<h1>$title</h1>";
        my $ad = LJ::get_ads({ location => 'bml.editjournal', ljadwrapper => 1 });
        $ret .= $editprivacy_link if !$ad;

        # edit form


        $ret .= "<form action='editjournal.bml$getextra' method='get' class='b-editentries-form";
        if ($day) {
            $ret .= " b-editentries-form-withdate";
        }
        $ret .= "'>\n";
        $ret .= "<p>".$ML{'.show_entries'}.": 
        <span class='b-editentries-cal'><i></i><b class='b-editentries-cal-message'>".$ML{'.choose_date'}."</b><b class='b-editentries-cal-date'>$day.$month.$year</b></span> <span class='b-editentries-cal-clear'>( <b>Clear</b> )</span>
        <input type='hidden' name='year' value='$year'/>
        <input type='hidden' name='month' value='$month'/>
        <input type='hidden' name='day' value='$day'/>";
        $ret .= "<p>" . LJ::html_text({ 'name' => 'usejournal', 'size' => '20', 'mfaxlength' => '15', 'value' => $GET{'usejournal'} || $POST{'usejournal'}, 'class' => 'b-editentries-comm', 'placeholder' => $ML{'.input.usejournal'} });
        $ret .= LJ::html_submit(undef, $ML{'.btn.search'}) . "</p>";
        $ret .= "<p>" . LJ::html_check({ name => 'only_me', id => 'only_me',
                                value => '1', selected =>  $only_me_checked });
        $ret .= "<label for='only_me'>".$ML{'.only_my_entries'}."</label></p>"; 
        if ($year || $month || $day || $usejournal) {
            $ret .= BML::ml('.back_to_recent_entries', { aopts => "href='editjournal.bml'" } )."</p>";
        }
        $ret .= "</form>\n";

        $ret .= LJ::Widget::Calendar->render();

        $ret .= <<JS_INIT;
            <script type="text/javascript">
                jQuery('form.b-editentries-form')
                    .editentriesfilter();

                jQuery('input.b-editentries-comm')
                    .placeholder();
            </script>
JS_INIT

        my $err = '';
        my $usejournal_u = LJ::load_user ($usejournal || $remote->{'user'});
        my @recent_entries = ();

        my $ymd = join "/", ($year, $month, $day);
        my %ymd_req = ($year && $month && $day && $show ne 'recent') ? ( ymd => $ymd ) : ();
        
        ##
        $only_me_checked = 1 unless $remote->can_manage ($usejournal_u);

        ## Load ids of more recent posts
        ## (skip this step for the first page)
        my @post_ids = ();
        if ($start_from){
            my %ids_opts = (afterid => $start_from);
               $ids_opts{posterid} = $remote->userid if $only_me_checked;

            @post_ids = sort { $b <=> $a } 
                        ($usejournal_u 
                            ? $usejournal_u->get_post_ids(%ids_opts)  
                            : $remote->get_post_ids(%ids_opts) );
        }

        my $next_page = 0;

        my $delayed_entries = [];
        if (!$LJ::DELAYED_ENTRIES_DISABLED) {
            if ( $show eq 'recent' || !($year && $month && $day)) {
                $delayed_entries = LJ::DelayedEntry->get_entries_by_journal($usejournal_u) || [];
            } else {
                $delayed_entries = LJ::DelayedEntry->get_entries_for_day_row($usejournal_u, $year, $month, $day );
            }
        }
        my $delayed_count = scalar(@$delayed_entries) - $delayed_skip;
        my $show_usual = ($items_per_page - $delayed_count) > 0 ? $items_per_page - $delayed_count : 0;
        my $have_next_page = 0;

        if (($usejournal_u && ($LJ::MAX_SCROLLBACK_LASTN = 50000,
            my @recent = LJ::get_recent_items({
                itemshow  => $show_usual + 1,
                err       => \$err,
                userid    => $usejournal_u->{userid},
                clusterid => $usejournal_u->{clusterid},
                remote    => $remote,
                dateformat => 'S2',
                beforeid  => $start_from,
                order     => 'logtime',
                show_sticky_on_top => 1,
                %ymd_req,
                ($only_me_checked) ? ('posterid' =>  $remote->{'userid'}) : (),
            }))) || $delayed_entries) {
            
            if (@recent > $show_usual){
                $have_next_page = 1;
                pop @recent;
            }

            my @delayed = splice(@$delayed_entries, $delayed_skip, $delayed_skip + $items_per_page);
            if ($delayed_count > 0) {
                @recent = $append_delayed->($usejournal_u, \@recent, \@delayed);
            }
            $delayed_entries = undef;

            push @recent_entries, @recent;

            $next_page  = List::Util::min ( map { $_->{'itemid'} } @recent_entries );
            $start_from = List::Util::max ( map { $_->{'itemid'} } @recent_entries );

        }

        ## calculate prev page start poin
        ## 
        my $prev_page_start = 0;
        if (@post_ids){ ## not first page
            my $pos = @post_ids - $items_per_page;
            if ($pos < 0){
                $prev_page_start = $post_ids[0] + 1; # from start
            } else {
                $prev_page_start = $post_ids[$pos];
            }
        }

        $ret .= $entry_chooser->(\@recent_entries,
                                delayed_next => $delayed_count > 0 ? $items_per_page + $delayed_skip : $delayed_skip,
                                delayed_prev => $delayed_skip > 0 ? $delayed_skip - $items_per_page : 0,
                                prev => $prev_page_start, 
                                next => $have_next_page ? $next_page : 0
        );

        my $ad = LJ::get_ads({ location => 'bml.editjournal', ljadwrapper => 1 });
        if ($ad) {
            $ret .= "</td><td valign='top'>$editprivacy_link $ad";
        }

        $ret .= "</td></tr></table>";

        $ret .= LJ::Widget::SettingWindow->render;
        return $ret;
    }
}
_code?>
<=body

bodyopts=><?_code return $_[0]->{'bodyopts'}; _code?>
head<=

<?entryformcss?>
<?_code return $_[0]->{'head'}; _code?>
<?_code return $LJ::COMMON_CODE{'autoradio_check'}; _code?>

<?_code
{
    my $ret;

    LJ::need_res(qw(
                    js/core.js
                    js/dom.js
                    js/httpreq.js
                    js/livejournal.js
                    js/entry.js
                    js/poll.js
                    js/jquery/jquery.lj.editentriesfilter.js
                    ));

    # JS vars for the RTE
    $ret .= LJ::rte_js_vars($remote);

    return $ret;
}
_code?>
<script type='text/javascript'>
    LiveJournal.register_hook("page_load", setCopyrightEdit);
</script>

<=head
page?><?_c <LJDEP>
post: htdocs/editjournal.bml
link: htdocs/lostinfo.bml
</LJDEP> _c?>

