<?page
title=><?_ml .title _ml?>
body<=
<?_code

 use strict;

 my $body;
 
 if ($LJ::SERVER_DOWN) {
     $body = LJ::server_down_html();
     return $body;
 }

 if ($LJ::USE_SSL && ! $LJ::IS_SSL && $FORM{'ssl'} ne "no") {
     return BML::redirect("$LJ::SSLROOT/changepassword.bml");
 }

 my $crumb = $LJ::IS_SSL ? 'securechangepass' : 'changepass';
 LJ::set_active_crumb($crumb);

 my $update_form = sub {
     my $ret;

     # else, show the form to change:
     $ret .= "<form action='changepassword.bml' method='post'>\n";
     $ret .= LJ::form_auth();
     $ret .= LJ::html_hidden(mode => 'submit',
                              ssl => $GET{'ssl'});

     my $remote = LJ::get_remote();

     if (!$remote || !$remote->prop('badpassword')) {
         $ret .= "<?h1 $ML{'.changepassword.header'} h1?>\n";
         $ret .= "<?p $ML{'.changepassword.instructions'} p?>\n";
     }

     # Warn them if logged in and not validated
     if ($remote && !$remote->prop('badpassword') && !LJ::did_post() && $remote->{'status'} ne 'A') {
         $ret .= "<?warningbar <b>$ML{'label.warning'}</b> $ML{'.error.notvalidated'} warningbar?>";
         $ret .= "<br />";
     }

     if ($remote && $remote->prop('badpassword')) {
         $ret .= "<?warningbar <?h1 Time to Pick a New Password h1?>";
         $ret .= qq{
<?p Your current password is too easy for an automated program to guess,
so your account has been frozen.  Before you do anything else, you need
to change your password.
<br /><br />We realize this is inconvenient, but we think you'll agree that your
account security is important enough to require this change.
<br /><br />
When you pick your new password, make sure:
<ul>
<li>It's not a word that's found in a dictionary.</li>
<li>It's not <em>based</em> on a word found in a dictionary. (So no
replacing the letter o with the number 0.)</li>
<li>It has a combination of uppercase and lowercase letters, numbers, and
symbols in it.</li>
<li>It's not based on your name, your pet's name, your birthday, your
phone number, or anything else someone could find out by reading your
journal.</li>
<li>It's not based on a keyboard pattern, like "qwerty" or "q1w2e3r4".</li>
<li>It's not the same password you use for your email account, your bank
account, or anything else.</li>
</ul>
If you've got any questions or any problems, please email
<a href="mailto:support\@livejournal.com">support\@livejournal.com</a>.
p?> warningbar?><br />
};
     }

     $ret .= "<?standout\n";
     $ret .= "$ML{'Username'}:<br />\n";

     # we make the field for the new password *longer* than the max length
     # for a password - that way we can tell if someone is trying to use an
     # excessively long password, instead of silently truncating it.

     my $hval = LJ::ehtml($remote ? $remote->{'user'} : $POST{'user'});
     $ret .= "<input name='user' size='30' maxlength='15' value='$hval' /><br />\n";
     $ret .= "$ML{'.oldpassword'}<br />\n";
     $ret .= "<input type='password' name='password' size='30' maxlength='30' /><br />\n";
     $ret .= "$ML{'.newpassword'}<br />\n";
     $ret .= "<input type='password' name='newpass1' size='30' maxlength='31' /><br />\n";
     $ret .= "$ML{'.newpasswordagain'}<br />\n";
     $ret .= "<input type='password' name='newpass2' size='30' maxlength='31' /><br />\n";
     $ret .= "standout?>\n";

     $ret .= "<?h1 $ML{'Proceed'} h1?>\n";
     $ret .= "<?p $ML{'.proceed.instructions'} p?>\n";

     $ret .= "<?standout\n";
     $ret .= "<input type='submit' value='$ML{'.btn.proceed'}' />\n";
     $ret .= "standout?>\n";
     $ret .= "</form>\n";
     return $ret;
 };

 unless (LJ::did_post()) {
     $body .= $update_form->();
 } elsif ($POST{'mode'} eq 'submit') {
     return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>" unless LJ::check_form_auth();

     my $user = LJ::canonical_username($POST{'user'});
     my $password = $POST{'password'};
     my $newpass1 = LJ::trim($POST{'newpass1'});
     my $newpass2 = LJ::trim($POST{'newpass2'});

     my $remote = LJ::get_remote();
     my $u = LJ::load_user($user);
     $u->prop('badpassword');

     my @errors = ();
     if (grep { $user eq $_ } @LJ::TESTACCTS) { push @errors, $ML{'.error.changetestaccount'}; }
     unless ($user) {
         push @errors, $ML{'.error.mustenterusername'}; 
     } else {
         unless (defined $u) {
             push @errors, BML::ml('.error.invaliduser', {'user' => $user} );
         } else {
             if (LJ::login_ip_banned($u)) {
                 push @errors, $ML{'error.ipbanned'};
             } elsif ($u->{'password'} eq "" || $u->{'password'} ne $password) {
                 push @errors, $ML{'.error.badoldpassword'};
                 LJ::handle_bad_login($u);
             }
         }
     }
     if ($newpass1 ne $newpass2) {
         push @errors, $ML{'.error.badnewpassword'};
     } else {
         if ($newpass1 eq "") {
             push @errors, $ML{'.error.blankpassword'};
         } elsif (length $newpass1 > 30) {
             push @errors, $ML{'.error.characterlimit'};
         } else {
             my $checkpass = LJ::run_hook("bad_password",
                                           {
                                               'u'        => $u,
                                               'password' => $newpass1,
                                           });
             if ($checkpass) {
                 push @errors, BML::ml('.error.badcheck', {'error' => $checkpass});
             }
         }
     }

     # don't allow changes if email address is not validated, unless they
     # have a bad password
     if ($u->{'status'} ne 'A' && !$u->prop('badpassword')) {
         push @errors, $ML{'.error.notvalidated'};
     }

     unless (LJ::is_ascii($newpass1)) {
         push @errors, $ML{'.error.nonascii'};
     }
     
     if (@errors) {
       $body .= LJ::error_list(@errors);
       $body .= $update_form->();
       return $body;
     }

     ## make note of changed password
     my $dbh = LJ::get_db_writer();
     my $oldval = Digest::MD5::md5_hex($u->{'password'} . "change");
     LJ::infohistory_add($u, 'password', $oldval);
     
     LJ::update_user($u, { password => $POST{'newpass1'} });

     # If we forced them to change their password, mark them as now being good
     unless ($LJ::DISABLED{'force_pass_change'}) {
         $u->set_prop('badpassword', 0);
     }

     # Kill all sessions, forcing user to relogin
     $u->kill_all_sessions;
     
     LJ::send_mail({
         'to' => $u->{'email'},
         'from' => $LJ::ADMIN_EMAIL,
         'fromname' => $LJ::SITENAME,
         'charset' => 'utf-8',
         'subject' => $ML{'.email.subject'},
         'body' => BML::ml('.email.body2',
                           { sitename => $LJ::SITENAME,
                             siteroot => $LJ::SITEROOT,
                             username => $u->{user}, }),
     });
     
     $body = "<?h1 $ML{'Success'} h1?><?p $ML{'.success.text'} p?>";
     
     # if they were logged in, tell them to relogin
     $body .= "<?p " . BML::ml('.relogin', { 'aopts' => "href='/login.bml'" }) . " p?>" if $remote;

     LJ::run_hooks("post_changepassword", {
         "u" => $u,
         "newpassword" => $POST{'newpass1'},
         "oldpassword" => $u->{'password'},
     });
 }

 return $body;
_code?>
<=body
page?><?_c <LJDEP>
post: htdocs/changepassword.bml
lib: Digest::MD5
hook: post_changepassword
</LJDEP> _c?>
