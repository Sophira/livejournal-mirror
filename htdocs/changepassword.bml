<?_code

 $title = $ML{'.title'};
 $body = "";
 
 if ($LJ::SERVER_DOWN) {
     $body = LJ::server_down_html();
     $title = $ML{'Sorry'};
     return;
 }

 if ($LJ::USE_SSL && ! $LJ::IS_SSL && $FORM{'ssl'} ne "no") {
     return BML::redirect("$LJ::SSLROOT/changepassword.bml");
 }
 
 if ($POST{'mode'} eq 'submit') 
 {
     my $user = LJ::canonical_username($POST{'user'});
     my $password = $POST{'password'};
     my $newpass1 = LJ::trim($POST{'newpass1'});
     my $newpass2 = LJ::trim($POST{'newpass2'});

     my $remote = LJ::get_remote();
     my $u = LJ::load_user($user);

     my @errors = ();
     if ($user eq "test") { push @errors, $ML{'.error.changetestaccount'}; }
     unless ($user) {
         push @errors, $ML{'.error.mustenterusername'}; 
     } else {
         unless (defined $u) {
             push @errors, BML::ml('.error.invaliduser', {'user' => $user} );
         } else {
             if (LJ::login_ip_banned($u)) {
                 push @errors, $ML{'error.ipbanned'};
             } elsif ($u->{'password'} eq "" || $u->{'password'} ne $password) {
                 push @errors, $ML{'.error.badoldpassword'};
                 LJ::handle_bad_login($u);
             }
         }
     }
     if ($newpass1 ne $newpass2) {
         push @errors, $ML{'.error.badnewpassword'};
     } else {
         if ($newpass1 eq "") {
             push @errors, $ML{'.error.blankpassword'};
         } elsif (length $newpass1 > 30) {
             push @errors, $ML{'.error.characterlimit'};
         } else {
             
             my @checkpass = LJ::run_hooks("bad_password", 
                                           { 'user' => $u->{'user'}, 'password' => $newpass1,
                                             'name' => $u->{'name'}, 'email' => $u->{'email'} });
             if (@checkpass && $checkpass[0]->[0]) {
                 push @errors, BML::ml('.error.badcheck', {'error' => $checkpass[0]->[0]});
             }
         }
     }

     # don't allow changes if email address is not validated
     unless ($u->{'status'} eq 'A') {
         push @errors, $ML{'.error.notvalidated'};
     }

     unless (LJ::is_ascii($newpass1)) {
         push @errors, $ML{'.error.nonascii'};
     }
     
     if (@errors) {
         $body = LJ::bad_input(@errors);
         return;
     }
     
     ## make note of changed password
     my $dbh = LJ::get_db_writer();
     my $oldval = $dbh->quote(Digest::MD5::md5_hex($u->{'password'} . "change"));
     $dbh->do("INSERT INTO infohistory (userid, what, oldvalue, timechange) VALUES ($u->{'userid'}, 'password', $oldval, NOW())");
     
     LJ::update_user($u, { password => $POST{'newpass1'} });

     # Kill all sessions, forcing user to relogin
     LJ::kill_all_sessions($u);
     
     LJ::send_mail({
         'to' => $u->{'email'},
         'from' => $LJ::ADMIN_EMAIL,
         'fromname' => $LJ::SITENAME,
         'charset' => 'utf-8',
         'subject' => $ML{'.email.subject'},
         'body' => BML::ml('.email.body', {'sitename'=>$LJ::SITENAME, 'siteroot'=>$LJ::SITEROOT})});
     
     $body = "<?h1 $ML{'Success'} h1?><?p $ML{'.success.text'} p?>";
     
     # if they were logged in, tell them to relogin
     $body .= "<?p In addition, you have been logged out from all your existing sessions. You should <a href='/login.bml'>login again</a> before continuing. p?>" if $remote;

     LJ::run_hooks("post_changepassword", {
         "u" => $u,
         "newpassword" => $POST{'newpass1'},
         "oldpassword" => $u->{'password'},
     });

     return;
 }

 # else, show the form to change:
 $body .= "<form action='changepassword.bml' method='post'>\n";
 $body .= LJ::html_hidden(mode => 'submit',
                          ssl => $GET{'ssl'});

 $body .= "<?h1 $ML{'.changepassword.header'} h1?>\n";
 $body .= "<?p $ML{'.changepassword.instructions'} p?>\n";
 
 $body .= "<?standout\n";
 $body .= "$ML{'Username'}:<br />\n";

 # we make the field for the new password *longer* than the max length
 # for a password - that way we can tell if someone is trying to use an
 # excessively long password, instead of silently truncating it.

 my $remote = LJ::get_remote_noauth();
 my $hval = LJ::ehtml($remote ? $remote->{'user'} : "");
 $body .= "<input name='user' size='30' maxlength='15' value='$hval' /><br />\n";
 $body .= "$ML{'.oldpassword'}<br />\n";
 $body .= "<input type='password' name='password' size='30' maxlength='30' /><br />\n";
 $body .= "$ML{'.newpassword'}<br />\n";
 $body .= "<input type='password' name='newpass1' size='30' maxlength='31' /><br />\n";
 $body .= "$ML{'.newpasswordagain'}<br />\n";
 $body .= "<input type='password' name='newpass2' size='30' maxlength='31' /><br />\n";
 $body .= "standout?>\n";

 $body .= "<?h1 $ML{'Proceed'} h1?>\n";
 $body .= "<?p $ML{'.proceed.instructions'} p?>\n";

 $body .= "<?standout\n";
 $body .= "<input type='submit' value='$ML{'.btn.proceed'}' />\n";
 $body .= "standout?>\n";
 $body .= "</form>\n";
 return;

_code?><?page
title=><?_code return $title; _code?>
body=><?_code return $body; _code?>
page?><?_c <LJDEP>
post: htdocs/changepassword.bml
lib: Digest::MD5
hook: post_changepassword
</LJDEP> _c?>
