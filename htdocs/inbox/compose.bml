<?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    use warnings;
    use LJ::Message;

    return "User messaging is currently disabled" if $LJ::DISABLED{user_messaging};

    my $remote = LJ::get_remote() or die "You must be logged in";
    my $remote_id = $remote->{'userid'};

    return "<?p " . BML::ml('protocol.not_validated', { sitename => $LJ::SITENAMESHORT, siteroot => $LJ::SITEROOT }) . " p?>"
        unless $remote->is_validated;

    # $_[1] is a pre-request scratch area
    # put variables here so that we can access them later
    # outside of this _code block
    my $head     = \$_[1]->{'head'};

    my $body = '';

    my $reply_to; # User replying to
    my $disabled_to = 0; # disable To field if sending a reply message
    my $msg_subject = ''; # reply subject
    my $msg_body = ''; # reply body
    my $msg_parent = ''; # Hidden msg field containing id of parent message
    my $msg_limit = LJ::get_cap($remote, "usermessage_length");

    my @errors;

    # Submitted message
    if (LJ::did_post()) {
        my $mode = $POST{'mode'};

        if ($mode eq 'send') {
            # Check the To field
            my $otherid = LJ::get_userid($POST{'msg_to'});
            push @errors, "Please provide a valid username to send the message to"
                unless $otherid;

            # strip HTML from subject and test encoding
            my $msg_subject_text = LJ::strip_html($POST{'msg_subject'});
            push @errors, "Invalid text encoding for message subject"
                unless LJ::text_in($msg_subject_text);

            # strip HTML from body and test encoding and length
            my $msg_body_text = LJ::strip_html($POST{'msg_body'});
            push @errors, "Invalid text encoding for message body"
                unless LJ::text_in($msg_body_text);
            my ($msg_len_b, $msg_len_c) = LJ::text_length($msg_body_text);
            push @errors, "Message body is too long(" . LJ::commafy($msg_len_c)
                . "). It should not exceed " . LJ::commafy($msg_limit) . " characters."
                unless ($msg_len_c <= $msg_limit);

            unless (@errors) {
                my $msg = LJ::Message->new({journalid => $remote_id,
                                            otherid   => $otherid,
                                            subject   => $msg_subject_text,
                                            body      => $msg_body_text,
                                            parent_msgid => $POST{'msg_parent'} || undef,
                                            userpic      => $POST{'prop_picture_keyword'} || undef,
                                           });

                if ($msg->send(\@errors)) {
                    my $to_u = LJ::want_user($otherid);
                    $body .= "Your message has been sent successfully.";
                    $body .= "<?p From here you can:<ul>";
                    $body .= "<li><a href='$LJ::SITEROOT/inbox/compose.bml'>Send a new message</a></li>";
                    $body .= "<li><a href='" . $to_u->journal_base. "'>View ". $to_u->{user} ."'s journal</a></li>";
                    $body .= "<li><a href='$LJ::SITEROOT/inbox/'>Return to Inbox</a></li>";
                    $body .= "<li><a href='$LJ::SITEROOT/'>Return Home</a></li>";
                    $body .= "</ul> p?>\n";
                    return $body;
                }
            }
        }
    }

    # Display errors
    $body .= LJ::error_list(@errors) if (@errors);

    # Sending a reply to a message
    if (($GET{mode} && $GET{mode} eq 'reply') || $POST{'msgid'}){
        my $msgid = $GET{'msgid'} || $POST{'msgid'};
        next unless $msgid;

        my $msg = LJ::Message::load($msgid, $remote_id);
        push @errors, "You cannot reply to this message"
            unless ($msg->can_reply($msgid, $remote_id));

        if (@errors) {
            $body .= LJ::error_list(@errors);
            return $body;
        }

        $reply_to = $msg->other_u->user;
        $disabled_to = 1;
        $msg_subject = "Re: " . $msg->subject;
        $msg_body = $msg->body;
        $msg_body =~ s/(^.*)/\> $1/gm;
        $msg_body = "\n\n--- $reply_to wrote:\n" . $msg_body;
        $msg_parent .= LJ::html_hidden({
                          name => 'msg_parent',
                          value => "$msgid",
                       });
    }

    my @userpics = LJ::Userpic->load_user_userpics($remote);
    my @pickws;
    foreach my $pic (@userpics) {
        push @pickws, map { ($_, $_) } $pic->keywords;
    }

    $body .= '<form action="./compose.bml" method="POST">';

    $body .= '';
    my $pic = ''; # displays chosen/default pic
    my $picform = ''; # displays form drop-down
    LJ::Widget::UserpicSelector->render($remote, \$$head, \$pic, \$picform,
                { prop_picture_keyword => $POST{'prop_picture_keyword'} } );
    $body .= $pic;

    $body .= "<div id='metainfo'>";
    $body .= '<p class="pkg"><label class="left">To: </label> ';

    if ($disabled_to) {
        $body .= "$reply_to";
        $body .= LJ::html_hidden({
                    name      => 'msg_to',
                    value     => "$reply_to",
                 });
    } else {
        $body .= LJ::html_text({
                    name      => 'msg_to',
                    size      => '15',
                    value     => $POST{'msg_to'} || $GET{'user'} || undef,
                 });
    }

    $body .= "</p>\n";

    # The drop-down userpic menu
    $body .= $picform . "</div>";

    $body .= "<div style='clear: both;'><p><label>Subject:</label> ";
    $body .= LJ::html_text({
                name    => 'msg_subject',
                size    => '50',
                value   => $POST{'msg_subject'} || $msg_subject,
             });
    $body .= "</p>\n";
    $body .= "<p class='pkg'>";
    $body .= "<textarea name='msg_body' rows=6 cols=55 wrap=soft>";
    $body .= $POST{'msg_body'} || $msg_body;
    $body .= "</textarea><br />";
    $body .= "Up to " . LJ::commafy($msg_limit) . " characters. Plain text, no HTML.";
    $body .= "</p>\n";

    $body .= $msg_parent;
    $body .= LJ::html_hidden({
                name => 'mode',
                value => 'send',
             });

    $body .= LJ::html_submit("Send");
    $body .= "</form></div>";


    return $body;
}
_code?>
<=body
title=><?_code return "Compose Message"; _code?>
head<=
<?_code
    use strict;

    my $ret = $_[1]->{'head'};

    return $ret;
_code?>
<=head
<=body
page?>
