<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('acctstatus');

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my %type = ();
    my $u = LJ::get_authas_user($authas);
    %type = ( type => 'S' ) if $u->is_community;
    # Need to check supermaintainer rights for community
    $u = LJ::get_authas_user($authas, \%type);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    # visibility status name mappings
    my %statusvis = ( "V" => "$ML{'.journalstatus.select.activated'}",
                      "D" => "$ML{'.journalstatus.select.deleted'}" );
    if ($u->is_suspended) {
        %statusvis = ("S" => "$ML{'.journalstatus.select.suspended'}");
    }

    # process form submission
    if (LJ::did_post() && LJ::check_referer('/accountstatus.bml')) {
        my $ret;

        my $statusvis = $POST{'statusvis'};
        my $ok = sub {
            return "<?h1 $ML{'.header.success'} h1?>\n<?p " . $_[0] . " p?>";
        };

        my $dberr = sub {
            return "<?h1 $ML{'Error'} h1?>\n<?p " . $_[0] . " p?>";
        };

        return $dberr->($ML{'error.invalidform'})
            unless LJ::check_form_auth();

        # are they suspended?
        return LJ::bad_input($ML{'.error.nochange.suspend'})
            if $u->is_suspended;

        # are they expunged?
        return LJ::bad_input($ML{'.error.nochange.expunged'})
            if $u->is_expunged;

        # invalid statusvis
        return LJ::bad_input($ML{'.error.invalid'})
            unless $statusvis eq 'D' || $statusvis eq 'V';

        # save changes of purge_community_entries/purge_comments
        {
            my $purge_comments = ($POST{'purge_comments'}) ? 1 : 0;
            my $purge_community_entries = ($POST{'purge_community_entries'}) ? 1 : 0;
            $u->set_prop("purge_external_content", "$purge_comments:$purge_community_entries");
        }

        # no need to change?
        return $ok->(BML::ml('.message.nochange', {'statusvis' => $statusvis{$statusvis} }))
            if $u->statusvis eq $statusvis;

        my $res = 0;

        my $ip = BML::get_remote_ip();

        my @date = localtime(time);
        my $date = sprintf("%02d:%02d %02d/%02d/%04d", @date[2,1], $date[3], $date[4]+1, $date[5]+1900);

        if ($statusvis eq 'D') {
            
            $res = $u->set_deleted;
            
            LJ::statushistory_add( $u, $remote, 'journal_status',
                'Set to deleted via accountstatus.bml' );

            if($res) {
                # sending ESN status was changed
                LJ::Event::SecurityAttributeChanged->new($u, { 
                    action   => 'account_deleted',
                    ip       => BML::get_remote_ip(),
                    datetime => $date,
                })->fire;
            }
        } elsif ($statusvis eq 'V') {
            LJ::run_hooks('account_undelete', $u);

            ## Restore previous statusvis of journal. It may be different
            ## from 'V', it may be read-only, or locked, or whatever.
            my @previous_status = grep { $_ ne 'D' } $u->get_previous_statusvis;
            my $new_status = $previous_status[0] || 'V';
            my $method = {
                V => 'set_visible',
                L => 'set_locked',
                M => 'set_memorial',
                O => 'set_readonly',
                R => 'set_renamed',
            }->{$new_status};

            my $statushistory_msg = 'Undeleted via accountstatus.bml, '
                . 'setting statusvis to ' . $new_status;

            LJ::statushistory_add( $u, $remote, 'journal_status',
                $statushistory_msg );

            return $dberr->("Can't set status '$new_status'") unless $method;
 
            $res = $u->$method;
            
            if($res) {
                LJ::Event::SecurityAttributeChanged->new($u ,  { 
                    action   => 'account_activated',
                    ip       => BML::get_remote_ip(),
                    datetime => $date,
                })->fire;
            }
        }

        # error updating?
        return $dberr->($ML{'.error.db'})
            unless $res;

        # success
        $ret .= $ok->(BML::ml('.message.success', {'statusvis' => $statusvis{$statusvis} }));

        if ($statusvis eq 'D') {
            $ret .= "<?p $ML{'.message.deleted'} p?>";
            # optional stuff that gets printed after deletion
            $ret .= LJ::run_hook("accountstatus.bml_after_deletion", $u, \%POST);
        }

        return $ret;
    }

    # update form

    my $ret;

    # authas switcher form
    $ret .= "<form method='get' action='accountstatus.bml'>\n";
    ## type = 'S' : Only Supermaintainers can delete communities
    $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'}, 'showall' => 1, type => 'S' }) . "\n";
    $ret .= "</form>\n\n";

    my $getextra = "?authas=$authas" unless $authas eq $remote->{'user'};
    $ret .= "<form method='post' action='accountstatus.bml$getextra'>\n";
    $ret .= LJ::form_auth();

    $ret .= "<?h1 $ML{'.journalstatus.head'} h1?><?p $ML{'.journalstatus.about'} p?>\n";

    $ret .= LJ::run_hook("accountstatus_delete_text", $u);

    my ($purge_comments, $purge_community_entries) = split /:/, $u->prop("purge_external_content");

    if (($u->is_person || $u->is_identity) && !$u->is_suspended) {
        $ret .= '<h3>' . $ML{'.label.purge_external_content'} . '</h3>';
        $ret .= "<ul style='list-style:none;margin:0;padding:0;'><li><label for='purge_comments'>";
        $ret .= LJ::html_check({ 'name' => 'purge_comments', 'id' => 'purge_comments', 'selected' => $purge_comments });
        $ret .= "$ML{'.label.purge_comments'}</label></li>";
    }

    if ($u->is_person && !$u->is_suspended) {
        $ret .= "<li><label for='purge_community_entries'>";
        $ret .= LJ::html_check({ 'name' => 'purge_community_entries', 'id' => 'purge_community_entries', 'selected' => $purge_community_entries });
        $ret .= "$ML{'.label.purge_community_entries'}</label></li></ul>";
    }

    $ret .= "<p>$ML{'.journalstatus.select.head'}\n";
    $ret .= LJ::html_select({ 'name' => 'statusvis', 'selected' => $u->statusvis },
                              map { $_, $statusvis{$_} }
                              reverse sort keys %statusvis) . "\n";
    $ret .= LJ::html_submit(undef, $ML{'.btn.status'}, 
                            { 'disabled' => $u->is_suspended }) . "\n";
    $ret .= "</p>\n</form>\n";

    return $ret;
}
_code?>
<=body
page?>

