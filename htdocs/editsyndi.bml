<?page
title=><?_code $ML{'.title'} _code?>
body<=
<?_code
{
    use strict;
    use vars qw(%POST %GET);
    use Class::Autouse qw(LJ::MassPrivacy);
    use LJ::TimeUtil;

    BML::decl_params(_default => qr/./);

    my $u = LJ::get_remote();
    return "<?needlogin?>" unless $u;

    return "This feature is currently disabled."
        if $LJ::DISABLED{mass_privacy};

   return '<div class="warningbar" style="background: url(' . $LJ::IMGPREFIX . '/message-warning.gif?v=4888) repeat-x #FFFFDD;">'
          . $ML{'.unable'} . '</div>' 
        unless $u && LJ::is_enabled('default_copyright', $u);

    my $mode = $POST{'mode'} || $GET{'mode'} || "init";
    my $more_public = 0; # flag indiciating if security is becoming more public
    # Check fields
    my @errors = ();
    if (LJ::did_post()) {
        return LJ::bad_input($ML{'.error.invalidform'})  unless LJ::check_form_auth();

        # Timeframe
        push @errors, $ML{'.timeframe.error.notselected'} unless ($POST{'time'});

        # date range
        if ($POST{'time'} eq 'range' && $mode eq 'change') {
            if ( !($POST{'s_year'} =~ /\d+/) || !($POST{'s_mon'} =~ /\d+/) || !($POST{'s_day'} =~ /\d+/) ) {
                push @errors, $ML{'.timeframe.error.start_date'};
            }
            if ( !($POST{'e_year'} =~ /\d+/) || !($POST{'e_mon'} =~ /\d+/) || !($POST{'e_day'} =~ /\d+/) ) {
                push @errors, $ML{'.timeframe.error.end_date'};
            }

            # Round down the day of month to the last day of the month
            if ( $POST{'s_day'} > LJ::TimeUtil->days_in_month($POST{'s_mon'}, $POST{'s_year'}) ) {
                $POST{'s_day'} = LJ::TimeUtil->days_in_month($POST{'s_mon'}, $POST{'s_year'});
            }
            if ( $POST{'e_day'} > LJ::TimeUtil->days_in_month($POST{'e_mon'}, $POST{'e_year'}) ) {
                $POST{'e_day'} = LJ::TimeUtil->days_in_month($POST{'e_mon'}, $POST{'e_year'});
            }
        }

        # display initial page if errors
        $mode = 'init' if  @errors;

        # check if security is becoming more public
        $more_public = 1 if ($POST{'publicity'} eq 'permit');

        if (($mode eq 'amsure') && $more_public && !LJ::auth_okay($u, $POST{password}, undef, undef, undef)) {
            push @errors, $ML{'.error.incorrect_password'};
            $mode = 'change' if @errors;
        }
    }

    my %publicity = ('permit'   => BML::ml('.label.publicity.permit'),
                     'restrict' => BML::ml('.label.publicity.restrict') );

    # Initial view of page
    if ($mode eq "init") {
        my $ret = '';
        $ret .= LJ::bad_input(@errors) if @errors;
        $ret .= "<?p $ML{'.intro'} p?>";

        $ret .= "<?p " . BML::ml('.calendar',
                                { aopts => "href='" . $u->journal_base() . "/calendar/'" })
                . " p?>\n";;

        $ret .= "<form method='post' action='./editsyndi.bml'>";
        $ret .= "<?h1 $ML{'.timeframe'} h1?>";
        $ret .= "<table><tr><td>\n";
        $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 'time',
                                 'value' => 'all', 'id' => 'time_all',
                                 'selected' => ($POST{time} eq 'all') })
                . "</td>";
        $ret .= "<td><b><label for='time_all'>$ML{'.timeframe.all'}</label></b></td></tr>";
        $ret .= "<tr><td valign='top'>";
        $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 'time',
                                 'value' => 'range', 'id' => 'time_range',
                                 'selected' => ($POST{time} eq 'range') })
                . "</td>";
        $ret .= "<td><b><label for='time_range'>$ML{'.timeframe.range'}</a></b><br />\n";
        $ret .= "<div style='float: left; text-align: right'>$ML{'.timeframe.range.start'}: ";
        $ret .= LJ::html_text({ 'name' => 's_year', 'size' => 4,
                                'value' => $POST{'s_year'} || '1999',
                                'maxlength' => '4' }) . " ";
        $ret .= LJ::html_select({ 'name' => 's_mon', 'selected' => int($POST{'s_mon'}) },
                                  map { $_, $ML{LJ::Lang::month_long_langcode($_)} } (1..12)) . " ";
        $ret .= LJ::html_select({ 'name' => 's_day', 'selected' => int($POST{'s_day'}) },
                                  map { $_, $_ } (1..31)) . "<br/>\n";
        $ret .= "\n$ML{'.timeframe.range.end'}: ";
        $ret .= LJ::html_text({ 'name' => 'e_year', 'size' => 4,
                                'value' => $POST{'e_year'},
                                'maxlength' => '4' }) . " ";
        $ret .= LJ::html_select({ 'name' => 'e_mon', 'selected' => int($POST{'e_mon'}) },
                                  map { $_, $ML{LJ::Lang::month_long_langcode($_)} } (1..12)) . " ";
        $ret .= LJ::html_select({ 'name' => 'e_day', 'selected' => int($POST{'e_day'}) },
                                  map { $_, $_ } (1..31)) . "<br/>\n";
        $ret .= "</td></tr></table>";

        my $selected_publicity = $POST{publicity} || ($u->prop('default_copyright') eq 'C' ? 'restrict' : 'permit');
        $ret .= "<?h1 $ML{'.publicity'} h1?>";
        $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 'publicity',
                                 'value' => 'permit', 'id' => 'publicity_permit',
                                 'selected' => ($selected_publicity eq 'permit') });
        $ret .= "<label for='publicity_permit'>$publicity{'permit'}</label>";
        $ret .= LJ::html_check({ 'type' => 'radio', 'name' => 'publicity',
                                 'value' => 'restrict', 'id' => 'publicity_restrict',
                                 'selected' => ($selected_publicity eq 'restrict') });
        $ret .= "<label for='publicity_restrict'>$publicity{'restrict'}</label>";
        $ret .= "<br />\n";

        $ret .= LJ::form_auth();
        $ret .= LJ::html_hidden("mode","change");
        $ret .= "<?p " . LJ::html_submit(undef, $ML{'.button.update'}) . " p?>";
        $ret .= "</form>";

        $ret .= "<p>" . BML::ml('.also_change_privacy', { aopts => "href='/editprivacy.bml'" }) . "</p>"
            if LJ::is_enabled('default_copyright', $u);

        return $ret;

    # User has chosen parameters for making change
    } elsif ($mode eq "change") {

        my ($posts, $s_unixtime, $e_unixtime);
        my $form_root = $more_public ? $LJ::SSLROOT : ".";
        my $body = "<form method='post' action='$form_root/editsyndi.bml'>";

        $body .= LJ::bad_input(@errors) if @errors;
        $body .= "<p>Change posts to \"$publicity{$POST{'publicity'}}\"";

        if ($POST{'time'} eq 'range') {
            # if this step reloads, due to missing password
            if ($POST{s_unixtime} && $POST{e_unixtime}) {
                $s_unixtime = $POST{s_unixtime};
                $e_unixtime = $POST{e_unixtime};
            } else {
                # Convert dates to unixtime
                use DateTime;
                my $s_dt = DateTime->new( year=> $POST{'s_year'}, month => $POST{'s_mon'}, day => $POST{'s_day'});
                my $e_dt = DateTime->new( year=> $POST{'e_year'}, month => $POST{'e_mon'}, day => $POST{'e_day'});
                $s_unixtime = $s_dt->epoch;
                $e_unixtime = $e_dt->epoch;

                $body .= ", between " . $s_dt->ymd . " and " . $e_dt->ymd;
            }
            $posts = $u->get_post_count(
                     'start_date' => $s_unixtime,
                       'end_date' => $e_unixtime + 24*60*60 );
        } else {
            $posts = $u->get_post_count;
        }

        $body .= ".<p>";

        $body .= "<p>" . BML::ml('.matching', {posts => $posts}) . "</p>";

        if ($posts) {
            $body .= "<h2>$ML{'.rusure'}</h2>";
            $body .= LJ::form_auth();
            $body .= LJ::html_hidden("mode","amsure");
            $body .= LJ::html_hidden("s_unixtime", $s_unixtime) if ($s_unixtime);
            $body .= LJ::html_hidden("e_unixtime", $e_unixtime) if ($e_unixtime);
            $body .= LJ::html_hidden( map { $_ => $POST{$_} } qw(publicity time) );
            if ($more_public) {
                $body .= $ML{'.error.password_required'} . "<br />\n";
                $body .= "<input type='password' name='password' size='20' maxlength='30' />";
            }
            $body .= "<?p " . LJ::html_submit(undef, $ML{'.button.ya.rly'}) . " p?>";
        }

        $body .= "<p>" . BML::ml('.also_change_privacy', { aopts => "href='/editprivacy.bml'" }) . "</p>"
            if LJ::is_enabled('default_copyright', $u);

        return $body;

    # User is sure they want to update posts
    } elsif ($mode eq 'amsure' || $mode eq 'secured') {
        my $body;

        if ($mode eq 'amsure') {
            my $handle = LJ::MassPrivacy->enqueue_job('userid' => $u->{userid},
                                            'publicity' => $POST{publicity},
                                            's_unixtime' => $POST{s_unixtime},
                                            'e_unixtime' => $POST{e_unixtime} );

            if ($handle) {
                $u->log_event('mass_publicity_change', { remote => $u,
                                                         publicity  => $POST{publicity},
                                                         s_unixtime => $POST{s_unixtime},
                                                         e_unixtime => $POST{e_unixtime} } );
                return BML::redirect("$LJ::SITEROOT/editsyndi.bml?mode=secured");
            }
        }

        $body .= "<p>$ML{'.notified'}</p>";
        # TODO: Let the user know when the job is complete

        return $body;
    }

}
_code?>
<=body
page?>
