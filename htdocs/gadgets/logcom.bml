<?_code
{
    use strict;
    use vars qw($title);
    use LJ::Widget::LoginMulti;
    use LJ::ExternalComments;

    return 'This feature is disabled'
        unless LJ::is_enabled('external_comments');

    LJ::need_res(qw( js/partners/placeholder.js
                     js/jquery.js
                     stc/lj_base.css
                     stc/partners/login.css ));

    my $thispage = "$LJ::SITEROOT/gadgets/logcom.bml";
    $thispage .= "?" . LJ::Request->args;

    my $url     = $GET{url};
    my $rskey   = $GET{rsk};

    ## convert remote-site key to lj.com's community
    my $username = LJ::ExternalComments->key_to_username($rskey);
    return "unknown key" unless $username;

    my $journal = LJ::load_user($username);
    return "unknown user" unless $journal;

    ## convert article's uri on partners site to entryid on LJ.com
    my $jitemid = LJ::ExternalComments->url_to_jitemid($journal, $url);
    unless ($jitemid){
        ## create new empty entry for this url
        $jitemid = LJ::ExternalComments->create_entry_for_url($journal, $url);
        return "Can't create new entry" unless $jitemid;
    }

    my $replyto = LJ::Request->get_param('replyto');
    
    if ($replyto) {
        my $parent  = LJ::Comment->new( $journal, 'dtalkid' => $replyto );
        $replyto    = 0
            unless $parent->valid;
    }

    my $entry = LJ::Entry->new($journal, jitemid => $jitemid);

    if (my $remote = LJ::get_remote() and not $GET{viewform}){
        ## show add comment form
        LJ::need_res(qw( stc/partners/login.css ));

        my $remote_sessid;
        if ($remote) {
            $remote_sessid = $remote->session->id;
        }

        my $logout_url = "$LJ::SITEROOT/gadgets/logout.bml?" .
                         'returnto=' . LJ::eurl($thispage) . '&' .
                         'sessid=' . $remote_sessid;

        return
            LJ::Talk::talkform({
                remote   => $remote,
                journalu => $journal,
                ditemid  => $entry->ditemid,
                embedable_form => 1,
                replyto  => int ($replyto / 256),
                logout_url => $logout_url,
            });


    } else {
        ## display login widget
        LJ::need_res(qw(
          stc/lj_base.css
          stc/partners/login.css
        ));

        my $forwhat = 'external-' .
                      $journal->userid . '-' .
                      $entry->ditemid . '-' .
                      $replyto;

        my $uri = URI->new($url);
        if ($replyto) {
            $uri->query_form( $uri->query_form, 'replyto' => $replyto );
            $uri->fragment( 't' . $replyto );
        }

        my $ret = "";
        $ret .= "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
        <html>
        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />
        <head>
        <title>Log in</title>
        " . LJ::res_includes() . "
        <body>"
        . LJ::Widget::LoginMulti->render(thispage => $uri->as_string, forwhat => $forwhat, lj_auth => 1,)
        ."</body></html>";
        return $ret;
    }

}
_code?>
