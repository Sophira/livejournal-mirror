<?page
title=><?_ml .title _ml?>
body<=
<?_code 

 return LJ::server_down_html() if ($LJ::SERVER_DOWN);

 return "<?badinput?>" unless LJ::text_in(\%FORM);
 
 my $mode = $FORM{'mode'};

 # with no mode, decide which screen the user sees first, based
 # on whether or not this LJ installation lets in free users
 if ($mode eq "") {
     $mode = $LJ::USE_ACCT_CODES ? 
         ($FORM{'code'} ? "codesubmit" : "entercode")
             : "getinfo"; 
 }
 
 my $remote = LJ::get_remote();
 
 my %errors;
 my $error_msg = sub {
     my $key = shift;
     my $pre = shift;
     my $post = shift;
     my $msg = $errors{$key};
     return unless $msg;
     return "$pre $msg $post";
 };
 
 # validate a code they've entered and throw them back to entercode
 # mode if it's invalid
 if ($LJ::USE_ACCT_CODES && ($mode eq "codesubmit" || $mode eq "submit"))
 {
     my $code = $FORM{'code'};
     my $error;
     my $userid = 0;  # acceptable userid for double-click protection
     if ($mode eq "submit") {
         my $u = LJ::load_user($FORM{'user'});
         $userid = $u->{'userid'};
     }
     $errors{'code'} = $error
         unless (LJ::acct_code_check($code, \$error, $userid));
     if (%errors) {
         $mode = "entercode";
     } elsif ($mode eq "codesubmit") {
         $mode = "getinfo";
     } 
 }

 # MODE: entercode - enter an account code to proceed making an account
 if ($LJ::USE_ACCT_CODES && $mode eq "entercode")
 {
     my $ret;
     my $v;

     $ret .= "<form method=\"post\" action=\"create.bml\">\n";
     $ret .= "<input type=\"hidden\" name=\"mode\" value=\"codesubmit\">\n";

     $ret .= "<?h1 $ML{'.useacctcodes.welcome'} h1?><?p $ML{'.useacctcodes.entercode'} p?>";

     $v = LJ::ehtml($FORM{'code'});
     $ret .= "<?standout Code: <input type=\"text\" name=\"code\" value=\"$v\" size=\"13\" maxlength=\"12\"> <input type=\"submit\" value=\"$ML{'.btn.proceed'}\">";
     $ret .= $error_msg->('code', '<br>');     
     $ret .= " standout?>";
     $ret .= "</form>\n";

     open (REM, "$LJ::HOME/htdocs/inc/account-codes");
     while (<REM>) {
         $ret .= $_;
     }	
     close REM;

     return $ret;
 }
 
 # MODE: submit - try to create an account.  might change mode
 #       if there are errors, we'll populate %errors and 
 #       return to "getinfo" mode below
 SUBMIT:
 while ($mode eq "submit")  # using while instead of if so we can 'last' out of it
 {
     return "<b>$ML{'Error'}</b>: $ML{'.error.postrequired'}" unless LJ::did_post();
     
     my $user = LJ::canonical_username($FORM{'user'});
     my $email = LJ::trim(lc($FORM{'email'}));

     # reject this email?
     return LJ::sysban_block(0, "Create user blocked based on email",
                             { 'new_user' => $user, 'email' => $email, 'name' => $user })
         if LJ::sysban_check('email', $email);

     my $dbh = LJ::get_db_writer();
     my $quser = $dbh->quote($user);
     my $qemail = $dbh->quote($email);
     
     if (length($user) > 15) { 
         $errors{'username'} = "$ML{'error.usernamelong'}";
     }
     if ($FORM{'user'} && ! $user) { 
         $errors{'username'} = "$ML{'error.usernameinvalid'}";
     }
     unless ($FORM{'user'}) { 
         $errors{'username'} = "$ML{'.error.username.mustenter'}"; 
     }
     foreach my $re ("^system\$", @LJ::PROTECTED_USERNAMES) {
         next unless ($user =~ /$re/);

         # you can give people sharedjournal priv ahead of time to create
         # reserved communities:
         next if LJ::check_priv($remote, "sharedjournal", $user);

         $errors{'username'} = "$ML{'.error.username.reserved'}";
     }

     # see if they're confused and entered a valid account code
     # for their username (happens often)
     if ($LJ::USE_ACCT_CODES && $user =~ /^.....a[ab].....$/) {
         # see if the acctcode is valid and unused
         my ($acid, $auth) = LJ::acct_code_decode($user);
         my $is_valid = $dbh->selectrow_array("SELECT COUNT(*) FROM acctcode ".
                                              "WHERE acid=? AND rcptid=0",
                                              undef, $acid);
         $errors{'username'} = "$ML{'.error.username.iscode'}"
             if $is_valid;
     }
     
     my $u = LJ::load_user($user);
     my $second_submit = 0;
     if ($u) {
         my $in_use = 1;

         if ($u->{'email'} eq $FORM{'email'}) {
             if (LJ::login_ip_banned($u)) {
                 # brute-force possible going on
             } else {
                 if ($u->{'password'} eq $FORM{'password1'}) {
                     # oh, they double-clicked the submit button 
                     $second_submit = 1;
                     $in_use = 0;
                 } else {
                     LJ::handle_bad_login($u);                     
                 }
             }
         }

         if ($in_use) {
             $errors{'username'} = "$ML{'.error.username.inuse'}"; 
         }
     }
 
     $FORM{'password1'} = LJ::trim($FORM{'password1'});
     $FORM{'password2'} = LJ::trim($FORM{'password2'});

     if ($FORM{'password1'} ne $FORM{'password2'}) { 
         $errors{'password'} = "$ML{'.error.password.nomatch'}"; 
     } else {
         my @checkpass = LJ::run_hooks("bad_password", 
                                       { 'user' => $user, 'name' => $user, 
                                         'email' => $email, 'password' => $FORM{'password1'} });
         if (@checkpass && $checkpass[0]->[0]) {
             $errors{'password'} = "Bad password: $checkpass[0]->[0]";
         }
     }
     if (! $FORM{'password1'}) { 
         $errors{'password'} = "$ML{'.error.password.blank'}";
     } elsif (length $FORM{'password1'} > 30) {
         $errors{'password'} = "$ML{'password.max30'}";
     }

     unless (LJ::is_ascii($FORM{'password1'})) {
         $errors{'password'} = "$ML{'.error.password.asciionly'}";
     }

     if ($FORM{'under13'} ||
         $LJ::COPPA_CHECK eq "over" && ! $FORM{'over13'}) {
         return "$ML{'.error.coppa.under13'}";
     }

     if ($LJ::TOS_CHECK && ! $FORM{'agree_tos'}) {
         $errors{'agree_tos'} = $ML{'.tos.error'};
     }

     # check the email address
     {
         my @email_errors;
         LJ::check_email($email, \@email_errors);
         if ($LJ::USER_EMAIL and $email =~ /\@\Q$LJ::USER_DOMAIN\E$/i) {
             push @email_errors, BML::ml(".error.email.lj_domain",
                                         {domain => $LJ::USER_DOMAIN});
         }
         $errors{'email'} = join(", ", @email_errors) if @email_errors;
     }


     last SUBMIT if %errors;

     my $qclusterid = ($LJ::ALLOW_CLUSTER_SELECT
                       ? $FORM{'cluster_id'}
                       : LJ::new_account_cluster()) + 0;
     die "Cluster 0 not supported" unless $qclusterid;

     $qpassword = $dbh->quote($FORM{'password1'});
     my $userid = $u->{'userid'}+0;
     unless ($second_submit)
     {
         my $caps   = int($LJ::NEWUSER_CAPS);
         my $status = ($LJ::EVERYONE_VALID ? 'A'  : 'N');
         $dbh->do("INSERT INTO user (user, email, password, status, caps, name, clusterid, dversion) ".
                  "VALUES ($quser, $qemail, $qpassword, '$status', $caps, $quser, $qclusterid, $LJ::MAX_DVERSION)");
         if ($dbh->err) {
             return "<?h1 $ML{'Error'} h1?><?p $ML{'error.procrequest'} <b>" . $dbh->errstr . "</b> p?>";
         }
         $userid = $dbh->{'mysql_insertid'};
         $dbh->do("REPLACE INTO useridmap (userid, user) VALUES ($userid, $quser)");
         $dbh->do("REPLACE INTO userusage (userid, timecreate) VALUES ($userid, NOW())");

         # if we're using account codes on this site, mark the code as used
         if ($LJ::USE_ACCT_CODES) {
             my ($acid, $auth) = LJ::acct_code_decode($FORM{'code'});
             $dbh->do("UPDATE acctcode SET rcptid=$userid WHERE acid=$acid");
             if ($dbh->err) { return $dbh->errstr; }
         }

         # if we have initial friends for new accounts, add them.
         foreach my $friend (@LJ::INITIAL_FRIENDS) {
             my $friendid = LJ::get_userid($friend);
             LJ::add_friend($userid, $friendid) if $friendid;
         }
         foreach my $friend (@LJ::INITIAL_OPTIONAL_FRIENDS) {
             my $friendid = LJ::get_userid($friend);
             LJ::add_friend($userid, $friendid) if $friendid and $FORM{"initial_optional_friend_$friend"};
         }

         LJ::run_hooks("post_create", {
             'userid' => $userid,
             'user' => $user,
             'code' => $FORM{'code'},
         });
     }
     
     my $aa = {};
     if ($userid) {
         $aa = LJ::register_authaction($userid, "validateemail", $email);
     }

     my $body = BML::ml('email.newacct.body', {
         "email" => $email,
         "regurl" => "$LJ::SITEROOT/confirm/$aa->{'aaid'}.$aa->{'authcode'}",
         "username" => $user,
         "password" => $FORM{'password1'},
         "sitename" => $LJ::SITENAME,
         "siteroot" => $LJ::SITEROOT,
         "admin_email" => $LJ::ADMIN_EMAIL,
         "bogus_email" => $LJ::BOGUS_EMAIL,
     });
     
     LJ::send_mail({
         'to' => $email,
         'from' => $LJ::ADMIN_EMAIL,
         'fromname' => $LJ::SITENAME,
         'charset' => 'utf-8',
         'subject' => BML::ml('email.newacct.subject', {'sitename' => $LJ::SITENAME}),
         'body' => $body,
     });

     my $nu = LJ::load_userid($userid, "force");

     if ($LJ::TOS_CHECK && -f "$LJ::HOME/htdocs/inc/legal-tos") {
         my $rev;
         open (TOS, "$LJ::HOME/htdocs/inc/legal-tos");
         while ((!$rev) && (my $line = <TOS>)) {
             my $rcstag = "Revision";
             if ($line =~ /\$$rcstag:\s*(\S+)\s*\$/) {
                 $rev = $1;
             }
         }
         close TOS;
         LJ::set_userprop($nu, "legal_tosagree", join(', ', time(), $rev));
     }

     # FIXME: we shouldn't auto-log people in who are creating
     # communities, but really this page shouldn't be necessary to
     # create a community.  /community/create.bml should handle that.
     LJ::make_login_session($nu);

     $ret = "<?h1 $ML{'.success.head'} h1?><?p ".BML::ml(".success.text1", {'email' => $email, 'username' => $user}) ." p?>";
     my $uri = LJ::journal_base($nu);
     $ret .= "<?p $ML{'.success.text2'} p?>\n";
     $ret .= "<?standout <font size='+1' face='arial'><b><a href='$uri'>$uri/</a></b></font> standout?>\n";
     $ret .= "<?p $ML{'.success.text3'} p?>\n";
     
     $ret .= "<form method='get' action='editinfo.bml?authas=$user'>";
     $ret .= "<p align='center'>" . LJ::html_submit(undef, "$ML{'.success.btn.enterinfo'} &rarr;") . "</p>";
     $ret .= "</form>\n";
     
     return $ret;
    
 }

 if ($mode eq "getinfo" || %errors)
 {
     my $ret;
     my $v;

     $ret .= "<?p $ML{'.create.text'} p?>";
     $ret .= "<form action=\"create.bml\" method=\"post\">\n";
     $ret .= "<input type=\"hidden\" name=\"mode\" value=\"submit\">\n";
     $ret .= "<input type=\"hidden\" name=\"code\" value=\"" . LJ::ehtml($FORM{'code'}) . "\">\n";     

     $ret .= "<ol>";

     ### username
     $v = LJ::ehtml($FORM{'user'});
     $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.username.box.head'}</div>";
     $ret .= $error_msg->('username', '<p class="formitemFlag">', '</p>');
     $ret .= "<div class='formitemDesc'>" . BML::ml(".username.text", {'sitename' => $LJ::SITENAME}) . "</div>";
     $ret .= LJ::html_text({'name' => 'user', 'size' => 15, 'maxlength' => 15, 'value' => $v,});
     $ret .= "<div class='formitemNote'>$ML{'.username.charsallowed'}<br /><br /></div>";
     $ret .= "</div></li>";

     ### email address
     $v = LJ::ehtml($FORM{'email'});
     $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.email.input.head'}</div>";
     $ret .= $error_msg->('email', '<p class="formitemFlag">', '</p>');
     $ret .= "<div class='formitemDesc'>$ML{'.email.text'}</div>";
     $ret .= LJ::html_text({'name' => 'email', 'size' => 40, 'maxlength' => 50, 'value' => $v,});
     $ret .= "<div class='formitemNote'>$ML{'.email.note'}</div>";
     $ret .= "</div></li>";

     $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.password.input.head1'}</div>";
     $ret .= $error_msg->('password', '<p class="formitemFlag">', '</p>');
     $ret .= "<div class='formitemDesc'>$ML{'.password.text'}</div>";
     $ret .= LJ::html_text({'name' => 'password1', 'size' => 30, 'maxlength' => 31, 'type' => "password",});
     $ret .= "<div class='formitemNote'>$ML{'.password.input.head2'}</div>";
     $ret .= LJ::html_text({'name' => 'password2', 'size' => 30, 'maxlength' => 31, 'type' => "password",});
     $ret .= "</div></li>";

     if (@LJ::INITIAL_OPTIONAL_FRIENDS) {
         $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.initialfriends.heading'}</div>";
         $ret .= "<div class='formitemDesc'>$ML{'.initialfriends'}</div>";
         $ret .= "<div class='formitemNote'>";
         foreach my $friend (@LJ::INITIAL_OPTIONAL_FRIENDS) {
             $ret .= LJ::did_post() && !$FORM{"initial_optional_friend_$friend"} ? 
                     LJ::html_check({'name' => "initial_optional_friend_$friend", 'value' => 1, }) :
                     LJ::html_check({'name' => "initial_optional_friend_$friend", 'value' => 1, 'checked' => "checked", });
             $ret .= LJ::ljuser($friend) . " " . $ML{".initial.friend.$friend"} . "<br />";
         }
         $ret .= "</div></div></li>";
     }
     if ($LJ::COPPA_CHECK)
     {
         if ($LJ::COPPA_CHECK eq "over") {
             $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.age.head'}</div>";
             $ret .= "<div class='formitemDesc'>$ML{'.age.check2.question'}</div>";
             $ret .= "<div class='formitemNote'>";
             $ret .= "<input type=\"checkbox\" value=\"1\" name=\"over13\" /> $ML{'.age.check2.yes'}";
         } else {
             $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.age.head'}</div>";
             $ret .= "<div class='formitemDesc'>$ML{'.age.check.question'}</div>";
             $ret .= "<div class='formitemNote'>";
             $ret .= "<input type=\"checkbox\" value=\"1\" name=\"under13\" /> $ML{'.age.check.yes'}";
         }
         $ret .= "</div></div></li>";
     }

     if ($LJ::TOS_CHECK)
     {
         $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.tos.heading'}</div>";
         $ret .= "<div class='formitemDesc'>$ML{'.tos.p1'}</div>";
         $ret .= $error_msg->('agree_tos', '<p class="formitemFlag">', '</p>');
         my $checked = $POST{'agree_tos'} ? "checked='checked'" : "";
         $ret .= "<iframe width='600' height='300' src='/legal/tos-mini.bml' style='border: 1px solid gray;'></iframe>";
         $ret .= "<div class='formitemNote'><input type='checkbox' name='agree_tos' value='1' $checked /> $ML{'.tos.haveread'}";
         $ret .= "</div></div></li>";
     }

     if ($LJ::ALLOW_CLUSTER_SELECT) {
         $ret .= "<li><div class='formitem'><div class='formitemName'>$ML{'.clusterselect.head'}</div>";
         $ret .= "<div class='formitemDesc'>$ML{'.clusterselect.text'}</div>";
         $ret .= LJ::html_select({ 'name' => 'cluster_id' },
                                 "0", "$BML{'.clusterselect.nocluster'}", 
                                 map { $_, BML::ml(".clusterselect.clusternum", {'number' => $_}) } @LJ::CLUSTERS);

         $ret .= "<div class='formitemNote'>$ML{'.clusterselect.cluster'}</div>";
         $ret .= "</div></li>";
     }

     $ret .= "</ol><?hr?><p class='formitemFlag'><b>$ML{'.aolnotice.head'}</b><br />".BML::ml(".aolnotice.text", {'sitename' => $LJ::SITENAME}) ."</p>";

     $ret .= "<div class='formitemName'>$ML{'.proceed.head'}</div>";
     $ret .= "<div class='formitemDesc'>$ML{'.proceed.text'}</div>";
     $ret .= "<input type=\"submit\" value=\"$ML{'.proceed.btn.proceed'}\"><br />";
     $ret .= "<div class='formitemNote'>$ML{'.proceed.warning'}</div>";
     $ret .= "</form>";

     return $ret;
 }

 return "$ML{'error.unknownmode'}: <b>$mode</b>";

_code?>

<=body
head<=
<style media='screen' type='text/css'>
.formitem {
    color: #343434;
    font-size: 1em;
}

.formnumber {
    font-weight: bold;
    margin-top: 1.8em;
    font-size: .9em;
}

.formitemName {
    font-weight: bold;
    font-size: .9em;
    margin-top: 1.8em;
}

.formitemDesc {
    margin-top: .4em;
    margin-bottom: .4em;
  color: #505050;
}

.formitemNote {
  color: #F37B37;
    font-size: .9em;
    margin-top: .4em;
    margin-bottom: .4em;
}

.formitemFlag {
  color: #CE0000;
    font-size: .9em;
    margin-top: .4em;
    margin-bottom: .4em;
}
</style>
<=head
page?><?_c <LJDEP>
link: htdocs/legal/privacy.bml
post: htdocs/create.bml, htdocs/editinfo.bml
file: htdocs/inc/account-codes
hook: post_create
</LJDEP> _c?>
