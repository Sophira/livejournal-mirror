<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%POST %GET);
    use LJ::Auth;
    use LJ::JSON;

    my $err = sub {
        my $msg = shift;
        return LJ::JSON->to_json({
            error => "Error: $msg",
        });
    };

    my $nop = sub {
        return LJ::JSON->to_json({
            success => 0,
        });
    };

    # get user
    my $remote = LJ::get_remote()
        or return $err->("Sorry, you must be logged in to use this feature.");

    my $authas = delete $POST{authas};

    my $action = $POST{action} or return $err->("No action specified");
    my $success = 0;
    my %ret;

    # do authas
    my $u = LJ::get_authas_user($authas) || $remote;
    return $err->("You could not be authenticated as the specified user.")
        unless $u;

    # get qids
    my @qids;
    @qids = split(',', $POST{qids}) if $POST{qids};

    my @items;

    if (scalar @qids) {
        foreach my $qid (@qids) {
            my $item = eval {LJ::NotificationItem->new($u, $qid)};
            push @items, $item if $item;
        }
    }

    $ret{items} = [];
    my $inbox = $u->notification_inbox;
    my $cur_folder = $POST{'cur_folder'} || 'all';

    # do actions
    if ($action eq 'mark_read') {
        $_->mark_read foreach @items;
        $success = 1;
    } elsif ($action eq 'mark_unread') {
        $_->mark_unread foreach @items;
        $success = 1;
    } elsif ($action eq 'delete') {
        foreach my $item (@items) {
            push @{$ret{items}}, { qid => $item->qid, deleted => 1 };
            if ($POST{spam}) {
                my $msg = $item->event->load_message();
                my $senderid = $item->event->arg2;
                $msg->mark_as_spam();
                my @deleted_qids = $inbox->delete_all_from_sender($senderid);
                foreach (@deleted_qids) {
                    push @{$ret{items}}, { qid => $_->{qid}, deleted => 1 };
                }
            } else {
                $item->delete;
            }
        }

        if (scalar @items >= 15) {
            $remote->log_event('inbox_massdel', {
                                     remote => $remote,
                                     actiontarget => scalar @items,
                                     method => 'delete',
                                     view   => $cur_folder,
                                     via    => 'web', });
        }

        $success = 1;
    } elsif ($action eq 'delete_all') {
        @items = $inbox->delete_all( $cur_folder, interface => 'web',
                                                  spam => $POST{spam}  );

        foreach my $item (@items) {
            push @{$ret{items}}, { qid => $item->{qid}, deleted => 1 };
        }

        $success = 1;
    } elsif ($action eq 'mark_all_read') {
        $inbox->mark_all_read( $cur_folder );

        $success = 1;
    } elsif ($action eq 'set_default_expand_prop') {
        $u->set_prop('esn_inbox_default_expand', $POST{default_expand} eq 'Y' ? 'Y' : 'N');
    } elsif ($action eq 'get_unread_items') {
        $ret{unread_count} = $u->notification_inbox->unread_count;
    } elsif ($action eq 'toggle_bookmark') {
        my $up;
        $up = LJ::run_hook('upgrade_message', $u, 'bookmark');
        $up = "<br />$up" if ($up);
        
        foreach my $item (@items) {
            my $ret = $u->notification_inbox->toggle_bookmark($item->qid);
            return $err->("Max number of bookmarks reached.$up") unless $ret;
        }
        $success = 1;
    } else {
        return $err->("Invalid action $action");
    }

    foreach my $item ($u->notification_inbox->items) {
        my $class = $item->event->class;
        $class =~ s/LJ::Event:://;
        push @{$ret{items}}, {
            read => $item->read,
            spam => $item->spam,
            qid  => $item->qid,
            bookmarked => $u->notification_inbox->is_bookmark($item->qid),
            category => $class,
        };
    }

    return LJ::JSON->to_json({
        success => $success,
        unread_all => $inbox->all_event_count,
        unread_usermsg_recvd => $inbox->usermsg_recvd_event_count,
        unread_friend => $inbox->friendplus_event_count,
        unread_entrycomment => $inbox->entrycomment_event_count,
        unread_usermsg_sent => $inbox->usermsg_sent_event_count,
        spam_count => $inbox->spam_event_count,
        %ret,
    });
}

_code?>
