<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%POST);
    use LJ::Auth;
    use LJ::JSON;

    my $err = sub {
        my $msg = shift;
        return LJ::JSON->to_json({
            error => "Error: $msg",
        });
    };

    # get user
    my $remote = LJ::get_remote()
        or return $err->("Sorry, you must be logged in to use this feature.");

    # check auth token
    return $err->("Invalid auth token") unless LJ::Auth->check_ajax_auth_token($remote, '/__rpc_changerelation', %POST);

    my $target = $POST{target} or return $err->("No target specified");
    my $action = $POST{action} or return $err->("No action specified");

    # Prevent XSS attacks
    $target = LJ::ehtml($target);
    $action = LJ::ehtml($action);

    my $targetu = LJ::load_user($target) or return $err->("Invalid user $target");

    my $success = 0;

    my %ret = ();

    # admined communities
    my $cids = [];
    $cids = LJ::load_rel_target($remote, 'A');

    if ($action eq 'addFriend') {
        my $errmsg = "";
        return $err->($errmsg)
            unless $remote->can_add_friends(\$errmsg, {friend => $targetu});

        $success = $remote->friend_and_watch($targetu);
    } elsif ($action eq 'removeFriend') {
        $success = $remote->remove_friend($targetu);
    } elsif ($action eq 'join') {
        my ($code, $message) = LJ::join_community($remote, $targetu);

        unless ($code) {
            return $err->($message);
        } elsif($message) {
            $ret{note} = $message;
            $success = 1;
        }
    } elsif ($action eq 'leave') {
        my ($code, $error) = LJ::leave_community($remote, $targetu);

        unless ($code) {
            return $err->($error);
        }

        $success = 1;
    } elsif ($action eq 'setBan') {
        my $list_of_banned = LJ::load_rel_user($remote, 'B') || [ ];

        return $err->("Exceeded limit maximum of banned users")
            if @$list_of_banned >= ($LJ::MAX_BANS || 5000);

        my $ban_user = LJ::load_user($target);
        $success = $remote->ban_user($ban_user);

        LJ::run_hooks('ban_set', $remote, $ban_user);

    } elsif ($action eq 'setUnban') {
        my $unban_user = LJ::load_user($target);
        $success = $remote->unban_user_multi($unban_user->{userid});

    } elsif ($action eq 'banEverywhere') {

        my $ban_user = LJ::load_user($target);


        # all communities
        my $us = LJ::load_userids(@$cids);

        my $ok = 1;
        $success = 1;

        foreach my $u (values %$us) {
            next if $u->is_expunged;

            my $list_of_banned = LJ::load_rel_user($u, 'B') || [ ];
            if (@$list_of_banned >= ($LJ::MAX_BANS || 5000)) {
                $ok = 0;
                next;
            }

            if ($u->ban_user($ban_user)) {
                LJ::run_hooks('ban_set', $u, $ban_user);
            } else { # failed
                $success = 0;
            }
        }

        # no so hard error, simply not success...
        #return $err->("Exceeded limit maximum of banned users on some journals") unless $ok;

    } elsif ($action eq 'unbanEverywhere') {

        my $unban_user = LJ::load_user($target);

        # admined communities
        $cids = LJ::load_rel_target($remote, 'A');

        # all communities
        my $us = LJ::load_userids(@$cids);

        $success = 1;

        foreach my $u (values %$us) {
            next if $u->is_expunged;
            $success = 0 unless $u->unban_user_multi($unban_user->userid);
        }

    } else {
        return $err->("Invalid action $action");
    }

    sleep 1 if $LJ::IS_DEV_SERVER;

    if (@$cids) {
        $ret{is_banned_everywhere} = 1;

        # all communities
        my $us = LJ::load_userids(@$cids);

        foreach my $u (values %$us) {
            next if $u->is_expunged;
            $ret{is_banned_everywhere} = 0 unless LJ::is_banned($targetu, $u->id);
        }
    }

    # we (maybe) just changed the relation. we don't want to return stale
    # relation status, so force is_friend to use the master
    local $LJ::_PRAGMA_FORCE_MASTER = 1;
    return LJ::JSON->to_json({
        success   => $success,
        is_friend => LJ::is_friend($remote, $targetu),
        is_member => LJ::is_friend($targetu, $remote),
        is_banned => $remote->is_banned($targetu),
        %ret,
    });
}

_code?>
