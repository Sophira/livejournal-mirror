<?_code
{
    use strict;
    use LJ::Talk;

    BML::set_language_scope('/talkread.bml');

    sub error
    {
        return LJ::JSON->to_json({ error => $_[0] });
    }

    use vars qw(%GET %ML);

    # return LJ::server_down_html() if $LJ::SERVER_DOWN;
    return error('Server is down') if $LJ::SERVER_DOWN;

    ## Workaround mail client bug when don't understand quoted-printable.
    ## Only correct 'journal' if 'itemid' was also broken, to avoid the
    ## unlikely clash with a journal name.
    if ($GET{'itemid'} =~ s/^3D//)
    {
        $GET{'journal'} =~ s/^3D//;
        $GET{'thread'} =~ s/^3D//;
    }

    # LJ::Request->notes("codepath" => "bml.talkread");

    # TODO: check $GET{journal}, $GET{itemid}

    my $itemid = $GET{itemid};

    my $init = LJ::Talk::init(\%GET);
    return error($init->{error}) if $init->{error};

    my $u = $init->{'journalu'};
    return error($ML{'talk.error.nojournal'}) unless $u;

    my $ditemid = $init->{'ditemid'} + 0;

    ## Redirect if account was renamed
    # if ($u->{'journaltype'} eq "R") {
    #     LJ::load_user_props($u, "renamedto");
    #     if ($u->{'renamedto'} ne "") {
    #         return BML::redirect(LJ::journal_base($u->{'renamedto'}) . "/$ditemid.html");
    #     }
    # }

    ## Now check for init->error, since we know the account wasn't renamed
    return error($init->{error}) if $init->{'error'};

    LJ::Request->notes("journalid" => $u->{'userid'});

    my $thread = $init->{'thread'};
    my $dthread = $init->{'dthread'};
    $itemid = $init->{'itemid'} + 0;

    my $stylemine = $init->{'style'} eq "mine" ? "style=mine" : "";
    my $formatlight = $GET{'format'} eq 'light' ? 'format=light' : '';

    my $item = LJ::Talk::get_journal_item($u, $itemid);

    if ($init->{'oldurl'} && $item) {
        $init->{'anum'} = $item->{'anum'};
        $init->{'ditemid'} = $init->{'itemid'} * 256 + $item->{'anum'};
        $ditemid = $init->{'ditemid'} + 0;
    }

    my $entry = LJ::Entry->new($u, ditemid => $ditemid);

    unless ($item && $item->{'anum'} == $init->{'anum'}) {
        return error('Not found');
    }

    my $talkurl = LJ::journal_base($u) . "/$ditemid.html";

    ### load users
    my ($up);  # $up = user posted journal item
    LJ::load_userids_multiple([ $item->{'posterid'} => \$up, ], [ $u ]);

    my $remote = LJ::get_remote();

    ### set viewall/viewsome
    my $viewall = 0;
    my $viewsome = 0;
    if ($GET{viewall} && LJ::check_priv($remote, 'canview', 'suspended')) {
        $viewall = LJ::check_priv($remote, 'canview', '*');
        $viewsome = $viewall || LJ::check_priv($remote, 'canview', 'suspended');
    }

    ### check for deleted/suspended/security
    unless ($viewsome) {

        # check suspended user
        if ($u->is_suspended || $up->is_suspended) {
            return error('Suspended');
        }

        # check deleted
        if ($u->is_deleted) {
            return error('Deleted');
        }

        # check suspended entry
        if ($entry && $entry->is_suspended_for($remote)) {
            return error('Suspended post');
        }
    }

    unless ($viewall) {
        ###  Check security before viewing this post
        my $errtxt;
        return error($errtxt) unless LJ::Talk::check_viewable($remote, $item, \%GET, \$errtxt);
    }

    my $props = $item->{'props'};
    my $nocomments_old = $viewall ?
                         0 :
                         $u->{'opt_showtalklinks'} eq "N" ? 1 : $props->{'opt_nocomments'};
    my $comments_shown = $viewall || $entry->comments_shown;
    my $allow_commenting = $entry->posting_comments_allowed;

    LJ::run_hooks("need_res_for_journals", $u);
    my $graphicpreviews_obj = LJ::graphicpreviews_obj();
    $graphicpreviews_obj->need_res($u);

    my $showmultiform = $remote &&
                        ($remote->{'user'} eq $u->{'user'} ||
                         $remote->{'user'} eq $up->{'user'} ||
                         $remote->can_manage($u));

    my $multiform_selects = 0;  # are there select boxes?  don't show form if not.

    LJ::run_hook('notify_event_displayed', $entry);

    my $LJ_cmtinfo = {  # data structure to give to javascript for commentmanage
        form_auth => LJ::form_auth(1),
        journal   => $u->{user},
        canAdmin  => ($remote && $remote->can_manage($u)) ? 1 : 0,
        remote    => $remote ? $remote->{user} : "",
    };

    my $output = {};

    my $comments = LJ::Talk::get_thread_html(
        $u,
        $up,
        $entry,
        $thread,
        {
            page              => $GET{page},
            expand            => $GET{expand},
            view              => $GET{view},
            format            => $GET{format},
            style             => $init->{style},
            viewsome          => $viewsome,
            viewall           => $viewall,
            LJ_cmtinfo        => $LJ_cmtinfo,
            showmultiform     => $showmultiform,
            show_collapselink => 1,
            get_root_only     => $GET{single} ? 1 : 0,
            show_link_all     => 1,
            depth             => $GET{depth} || 0,
        },
        $output
    );

    return error($comments) unless ref $comments;
    
    unless ($comments_shown)
    {
        # TODO: think about it
        $comments = [];
    }

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();
    BML::noparse();

    return LJ::JSON->to_json( [
        map { {
            thread => $_->{thread},
            html   => $_->{html}->{text},
            depth  => $_->{depth},
            state  => $_->{state},
        } } @$comments
    ] );
}

_code?>

