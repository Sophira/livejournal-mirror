<?_code
{
    use strict;
    use JSON;
    use vars qw(%FORM);

    my $max_users = 100;

    my $type    = $FORM{type}   || 'user';
    my $q       = $FORM{q}      || '';
    my $output  = $FORM{output} || 'html';

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();
    BML::noparse();

    return JSON::objToJson({error => "There is no any query provided",}) unless $q;

    if ($type eq "user" || $type eq "ljtalk") {
        my $user = lc($q);
        $user =~ s!\@$LJ::USER_DOMAIN!!;
        my $what;
        if ($user =~ s!/(\w+)!!) {
            $what = $1;
        }

        $user =~ s/-/_/g;
        $user =~ s/[^\w]//g;

        my $url;

        if ($user) {
            if (my $u = LJ::load_user($user)) {
                return JSON::objToJson({error => "No user found",})
                    if $u->is_deleted or $u->is_suspended or $u->is_expunged or not $u->opt_showcontact =~ /Y|R/;
                if ($what eq "pics") {
                    $url = "$LJ::SITEROOT/allpics.bml?user=$user";
                } elsif ($output eq "foaf") {
                    $url = LJ::journal_base($user) . '/data/foaf';
                } else {
                    $url = $u->profile_url;
                    $url .= "?mode=full" if $what eq 'full';
                }
            }
        }

        if ($url) {
            my %ret = ( status => 'success', result => '<a href="' . $url . '">' . $user . '</a>', );
            return LJ::js_dumper(\%ret);
        }
        return JSON::objToJson({error => "No user found",});
    }

    if ($type eq "email") {
        my $email = lc($q);
        my $dbr = LJ::get_db_reader();
        my $uids_ref = $dbr->selectall_arrayref("SELECT userid FROM user WHERE journaltype='P' AND statusvis='V' ".
                                        "AND email=? LIMIT $max_users", undef, $email);
        # try the email table
        unless (@$uids_ref) {
            $uids_ref = $dbr->selectall_arrayref(qq{
                SELECT e.userid
                FROM user u, email e
                WHERE e.email=? AND e.userid=u.userid AND u.journaltype='P' AND u.statusvis='V'
                LIMIT $max_users
            }, undef, $email);
        }

        my %ret = ( status => 'success', result => '' );

        foreach my $uid (@$uids_ref) {
            $uid = $uid->[0]; # dereference
            if (my $u = LJ::load_userid($uid)) {
                next unless $u->is_validated;
                next if $u->is_deleted or $u->is_suspended or $u->is_expunged or not $u->opt_showcontact =~ /Y|R/;
                if ($output eq "foaf") {
                    $ret{result} .= '<a href="' . LJ::journal_base($u) . '/data/foaf">' . $u->{user}. '</a>';
                } else {
                    $ret{result} .= '<a href="' . $u->profile_url . '">' . $u->{user}. '</a>';
                }
                $ret{result} .= '&nbsp';
            }
        }
        return LJ::js_dumper(\%ret) if $ret{result};
        return JSON::objToJson({error => "No user found",});
    }

    if ($type eq "im" ||
        $type eq "aolim" || $type eq "icq" ||
        $type eq "yahoo" || $type eq "msn" ||
        $type eq "jabber" || $type eq "skype" ||
        $type eq "google_talk") {

        use LJ::Directory::Constraint::ContactInfo;
        my @uids = LJ::Directory::Constraint::ContactInfo->new(screenname => $q)->matching_uids;

        my $us = LJ::load_userids(@uids);
        my @us = grep { not ($_->is_deleted or $_->is_suspended or $_->is_expunged) 
                        and $_->opt_findbyemail =~ /Y/ and $_->opt_showcontact =~ /Y|R/ } values %$us;

        my %ret = ( status => 'success' );
        if (@us == 1) {
            my $u = shift @us;
            if ($output eq "foaf") {
                $ret{result} = '<a href="' .$u->journal_base . '/data/foaf">' . $u->{user}. '</a>';
            } else {
                $ret{result} = '<a href="' . $u->profile_url . '">' . $u->{user}. '</a>';
            }
            return LJ::js_dumper(\%ret);
        } elsif (@us > 1) {
            $ret{result} = LJ::user_search_display(
                                                    users      => \@us,
                                                    timesort   => 1,
                                                    perpage    => 50,
                                                  );
            return LJ::js_dumper(\%ret);
        }

        # If we haven't returned already then the search turned up nothing.
        return JSON::objToJson({error => "No user found",});
    }

    return JSON::objToJson({error => "No type parameter",});
}
_code?>
