<?_code # -*-bml-*-

{
    use strict;
    use vars qw(%GET);

    use LJ::Auth;
    use LJ::JSON;
    use LJ::CtxPopup;

    my $language_scope = '/tools/endpoints/ctxpopup.bml';

    BML::set_language_scope($language_scope);

    my $err = sub {
        my $msg = shift;
        my %extra = @_;

        return LJ::JSON->to_json({
            error => "$msg",
            %extra,
        });
    };

    # get user
    my $remote        = LJ::get_remote();
    my $journalu      = LJ::get_active_journal();
    my $is_remote_sup = LJ::SUP->is_remote_sup();

    my $get_user = sub {
        # three ways to load a user:

        # username:
        if ( my $user = LJ::canonical_username($GET{'user'}) ) {
            return LJ::load_user($user);
        }

        # identity:
        if (my $userid = $GET{'userid'}) {
            return undef unless $userid =~ /^\d+$/;

            my $u = LJ::load_userid($userid);
            return undef unless $u && $u->identity;
            return $u;
        }

        # based on userpic url
        if (my $upurl = $GET{'userpic_url'}) {
            return undef unless $upurl =~ m!(\d+)/(\d+)!;

            my ($picid, $userid) = ($1, $2);
            my $u = LJ::load_userid($userid);
            my $up = LJ::Userpic->instance($u, $picid);
            return $up->valid ? $u : undef;
        }
    };

    my $u = $get_user->();
    my %ret = $u ? $u->info_for_js : ();

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();

    return $err->("Error: Invalid mode")                        unless $GET{mode} eq 'getinfo';
    return $err->("No such user", noshow => 1)                  unless $u;
    return $err->("This user's account is deleted.")            if $u->is_deleted;
    return $err->("This user's account is deleted and purged.") if $u->is_expunged;
    return $err->("This user's account is suspended.")          if $u->is_suspended;

    # uri for changerelation auth token
    my $uri = '/__rpc_changerelation';

    # actions to generate auth tokens for
    my @actions = ();
    my $usericon = $u->custom_usericon;

    $ret{url_addfriend} = "$LJ::SITEROOT/friends/add.bml?user=" . $u->{user};
    $ret{url_buy_userhead} = $LJ::SITEROOT."/shop/userheads.bml";

    if ($usericon eq '' || scalar grep { $usericon eq $_ } @LJ::DEFAULT_USERHEADS_LIST) {
        $ret{is_custom_userhead} = 0;
    } else {
        $ret{is_custom_userhead} = 1;
    }

    $ret{is_custom_userhead} = 0 if !$is_remote_sup && $LJ::DISABLED{'userhead_nonsup'};

    my $up = $u->userpic;

    if ($up) {
        $ret{url_userpic} = $up->url;
        $ret{userpic_w}   = $up->width;
        $ret{userpic_h}   = $up->height;
    } else {
        # if it's a feed, make their userpic the feed icon
        if ($u->is_syndicated) {
            $ret{url_userpic} = "$LJ::IMGPREFIX/feed100x100.png?v=7859";
        } elsif ($u->is_identity) {
            ## show OpedID placeholder for OpenID accounts, and
            ## default placeholder for all the rest identities (Facebook, Twitter etc)
            my $identity = $u->identity;

            if ($identity && $identity->isa("LJ::Identity::OpenID")) {
                $ret{url_userpic} = "$LJ::IMGPREFIX/profile_icons/openid.gif?v=14273";
            }
            else {
                $ret{url_userpic} = "$LJ::IMGPREFIX/ctxpopup-nopic.gif?v=8313";
            }
        } elsif ( $u->is_comm ) {
            $ret{url_userpic} = "$LJ::IMGPREFIX/profile_icons/comm.png?v=24097";
        } else {
            $ret{url_userpic} = "$LJ::IMGPREFIX/ctxpopup-nopic.gif?v=8313";
        }

        $ret{userpic_w} = 100;
        $ret{userpic_h} = 100;
    }

    my $prop_ratings = $u->prop('ratings');
    my $ratings      = $prop_ratings ? $prop_ratings eq 'Y' : LJ::PersonalStats::AccessControl::default_ratings($u);

    my $show_ratings;
    if (LJ::is_enabled('new_homepage_noncyr_sc')) {
        $show_ratings = $ratings || LJ::check_priv($remote, 'siteadmin', 'selfpromo');
    } else {
        $show_ratings = $u->journaltype eq 'C' || LJ::SUP->is_sup_enabled($u);
    }

    if ( $show_ratings ) { 
        my ($first, %filter);

        my $country = LJ::GeoLocation->get_country_info_by_ip || '';
        if ($country eq 'UA') {
            $filter{filter} = 'UA';
        } else {
            $country = $u->prop('country');
        }

        my $position = LJ::PersonalStats::DB->fetch_raw('ratings', {
            func => 'get_value',
            what => $u->journaltype eq 'C' ? 'communities' : 'users',
            journal_id => $u->userid,
            by => 'friends_weight',
            type => 0,
            sup =>  LJ::SUP->is_sup_enabled($u) ? 1 : 0,
            %filter,
        });

        my $soc_capital = LJ::User::display_soccap($u->get_social_capital()); 

        if (ref $position eq 'HASH') {
            $first = $position->{result}->{position}!=0 ? 0 : 1;
        }

        $ret{first}  = $first; 
        $ret{value}  = $soc_capital;
    
    }

    if ($remote) {
        $ret{is_friend}    = $remote->is_friend($u);
        $ret{is_friend_of} = $u->is_friend($remote);
        $ret{is_requester} = LJ::u_equals($remote, $u);

        # Subscribe/Unscubscribe to/from user
        if (LJ::is_enabled('new_friends_and_subscriptions')) {
            $ret{is_subscriber}   = $u->is_subscribedon($remote);
            $ret{is_subscribedon} = $remote->is_subscribedon($u);
        }
    }

    $ret{is_logged_in}  = $remote ? 1 : 0;

    if ($u->is_comm) {
        $ret{url_joincomm}  = "$LJ::SITEROOT/community/join.bml?comm=" . $u->{user};
        $ret{url_leavecomm} = "$LJ::SITEROOT/community/leave.bml?comm=" . $u->{user};

        push @actions, 'join', 'leave';
    }

    if ($u && $remote) {
        $ret{alias}        = LJ::ljuser_alias($u->{user});
        $ret{alias_enable} = $remote->get_cap('aliases') ? 1 : 0;
        $ret{alias_title}  = $ret{alias} ne '' ? $ML{'.editalias.title'} : $ML{'.addalias.title'};
    }

    my @ml_keys = qw/
        add_friend ban ban_in_my community edit_friend_tags feed join_community journal leave
        loading profile remove_friend
        report send_gift buy_same_userhead send_message stop_community subscribe_feed
        this_is_you unban unsubscribe_feed updating view watch_community
        your_friend ljtalk online offline
        subscribe unsubscribe
    /;

    ## optimization: load all ML strings into local cache at once
    LJ::Lang::get_text_multi(
        BML::get_language(), undef, [
            map {
                "$language_scope.$_"
            } @ml_keys
        ]
    );

    # Get ctxpopup status
    $ret{ctxpopup_status} = LJ::CtxPopup::get_status($u, {%ret});

    foreach my $key (@ml_keys) {
        $ret{"ml_$key"} = $ML{".$key"};
    }

    if ($journalu && $journalu->is_community) {
        $ret{'ml_filter_by_poster_me'}  = $ML{'ml_filter_by_poster_me'};
        $ret{'ml_filter_by_poster'}     = $ML{'ml_filter_by_poster'};
    }

    if ($u && $remote && $u==$remote && $u->is_identity) {
        $ret{"ml_upgrade_account"} = $ML{"horizon.nav.identity_convert"};
    }

    my $cids = [];

    if ($remote) {
        $cids = LJ::load_rel_target($remote, 'A'); # admined communities
    }

    # generate auth tokens
    if ($remote) {
        push @actions, 'addFriend', 'removeFriend', 'setBan' , 'setUnban';

        if (@$cids) {
            $ret{have_communities} = 1;
            push @actions, 'banEverywhere', 'unbanEverywhere';
            $ret{ban_everywhere_title} = $ML{'.ban_everywhere.title'};
            $ret{unban_everywhere_title} = $ML{'.unban_everywhere.title'};
        }

        foreach my $action (@actions) {
            $ret{"${action}_authtoken"} = LJ::Auth->ajax_auth_token(
                $remote,
                $uri,
                target => $u->user,
                action => $action,
            );
        }
    }

    my @hooked = LJ::run_hooks("ctxpopup_extra_info", $u);

    foreach my $result (@hooked) {
        %ret = (%ret, @$result);
    }

    if ($remote && $u) {
        $ret{is_banned} = LJ::is_banned($u,$remote) ? 1 : 0;

        if (@$cids) {
            $ret{is_banned_everywhere} = 1;

            foreach my $cid (@$cids) {
                $ret{is_banned_everywhere} = 0 unless LJ::is_banned($u, $cid);
            }
        }
    }

    if ($remote && $u && $ret{is_custom_userhead} && $u->custom_usericon_appid) {

        my $app = LJ::UserApps->get_application(id => $u->custom_usericon_appid);

        if ($app && $app->can_show_restricted) {
            $ret{is_app_userhead} = 1;

            if ($app->is_authorized(user => $remote)) {
                if($remote->custom_usericon_appid == $app->id) {
                    # default view !!! TODO: pass referer parameters
                    $ret{url_userhead_install} = $app->href;
                    $ret{ml_userhead_install} = BML::ml('.app_use');
                } else {
                    # Edit profile
                    $ret{url_userhead_install} = "$LJ::SITEROOT/manage/profile/#userheads";
                    $ret{ml_userhead_install} = BML::ml('.app_change_userhead');
                }
            } else {    # Not installed
                # INSTALL view !!!
                $ret{url_userhead_install} = $app->href;
                $ret{ml_userhead_install} = BML::ml('.app_install', { name => $app->name });
            }
        }
    }

    my $partner = LJ::PartnerSite->find_by_journal_username( $u->user );

    if ($partner && $partner->overrides->{'ctxpopup'}) {
        $ret{partner} = 1;
    } else {
        $ret{partner} = 0;
    }

    $ret{success} = 1;

    return LJ::JSON->to_json(\%ret);
}
_code?>
