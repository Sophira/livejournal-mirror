<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>LiveJournal Poll</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta content="noindex, nofollow" name="robots">
<script src="<?_code $LJ::STATPREFIX _code?>/stc/fck/editor/dialog/common/fck_dialog_common.js" type="text/javascript"></script>
<script src="<?_code $LJ::STATPREFIX _code?>/js/poll.js" type="text/javascript"></script>
<script type="text/javascript">
//Standard setup stuff (notice the command name used in the property names)//var oEditor = window.parent.InnerDialogLoaded();
jQuery = top.jQuery;
var FCK = oEditor.FCK;
var FCKLang = oEditor.FCKLang;
var LJPollCommand = oEditor.LJPollCommand;
var poll;
var answer_count = [];
var Questions = 1; // Number of questions for a poll
var current_question = 0;

// Dialog box tabs
window.parent.AddTab('setup', 'Setup');
window.parent.AddTab('questions', 'Questions');

function OnDialogTabChange(tabCode){
	ShowE('divSetup', (tabCode == 'setup'));
	ShowE('divQuestions', (tabCode == 'questions'));
}

window.onload = function (){ //Runs when this page is loaded
	LoadSelected(); //see function below
	window.parent.SetOkButton(true); // Show the "Ok" button.
};

//Get the currently selected element from the editor. Two Options follow.

//1. Use this form for some elements such as images//var eSelected = oEditor.FCKSelection.GetSelectedElement() ;

//2. Use this form for elements with inner text (including the if statement)
var eSelected = FCK.Selection.MoveToAncestorNode('FORM');

if(eSelected){
	FCK.Selection.SelectNode(eSelected);
}

//If an object is currently selected, load the properties into the dialog
function LoadSelected(){
	if(eSelected && eSelected.className == 'ljpoll' && eSelected.getAttribute('data')){
		poll = new top.Poll(unescape(eSelected.getAttribute('data')));
		populateWizard();
		// Save the element selected
		FCK.Selection.Element = eSelected;
	} else {
		if(FCK.Selection.Element){
			delete FCK.Selection.Element;
		}
	}
}

//Code that runs after the OK button is clicked//If a link has been entered, pass the values to the Add() function in the fckplugin.js file.
function Ok(){
	var pollsource = constructPoll();
	if(pollsource.length > 0){
		LJPollCommand.Add(pollsource);
	}
	return true;
}

function constructPoll(){
	var poll = new top.Poll(document, Questions);
	return poll.outputHTML();
}

function populateWizard(){
	var form = document.poll;
	if(poll.name){
		form.name.value = poll.name;
	}
	jQuery(form.whovote).val([poll.whovote]);
	jQuery(form.whoview).val([poll.whoview]);

	var aincrement = 5; // Answer Increment and default minimum
	// For each Question
	for(var i = 0; i < poll.questions.length; i++){
		answer_count[i] = Math.max(aincrement, poll.questions[i].answers.length);
		if(i > 0){
			addQuestion(false, true);
		}
		if(poll.questions[i].type){
			jQuery(form['type_' + i]).val(poll.questions[i].type);
		}
		insertQandA(false, false, i);
	}
	updateQuestionNav();
}

function insertQandA(add_answers, switch_answers, q_num){
	var form = document.poll;
	var add_a = false;
	var switch_a = false;
	q_num = (q_num != null) ? q_num : current_question;
	if(add_answers != null && form["inserted_" + q_num] != null && add_answers){
		add_a = true;
	}
	if(switch_answers != null && form["inserted_" + q_num] != null && switch_answers){
		switch_a = true;
	}

	// Answer counter
	var aincrement = 5; // Answer Increment and default minimum
	var acount = aincrement;
	// Adding answer fields
	if(add_a){
		if(poll && poll.questions[q_num] != null){
			var alength = Math.max(poll.questions[q_num].answers.length, answer_count[q_num]);
			acount = alength + aincrement;
		} else {
			acount += aincrement;
		}
		// Switching type of answer fields
	} else if(switch_a){
		if(poll && poll.questions[q_num].answers.length > answer_count[q_num]){
			answer_count[q_num] = poll.questions[q_num].answers.length;
		}
		acount = answer_count[q_num];
	} else if(answer_count[q_num]){
		acount = answer_count[q_num];
	}
	if(acount < aincrement){
		acount = aincrement;
	} // Always show at least the minimum number of answer fields
	answer_count[q_num] = acount;

	var html = '';
	if(form["type_" + q_num] != null){
		html = insertA(switch_a, add_a, q_num);
	}

	document.getElementById('QandA_' + q_num).innerHTML = html;
	document.poll["setType_" + q_num].value = '<?_ml fcklang.poll.question.label.switch _ml?>';
	if(!add_a && !switch_a && poll){
		populateQandA(poll, form, q_num);
	}
	if(add_a){
		var opt = 'answer_' + q_num + '_' + (acount - aincrement);
		form[opt].focus();
	}
	return false;
}

function insertA(switch_a, add_a, q_num){
	var form = document.poll;

	var html = '';
	var type;
	var ele = form["type_" + q_num];
	type = ele.options[ele.selectedIndex].value;

	if(poll && poll.questions[q_num] && poll.questions[q_num].answers.length){
		acount = poll.questions[q_num].answers.length;
	}

	html += "<div id='innerA' style='height: 120px; overflow: auto'>";
	html += "<input type='hidden' name='inserted_" + q_num + "' value='1' />";

	if(type == "radio" || type == "check" || type == "drop"){
		for(var i = 0; i < answer_count[q_num]; i++){
			var atype = type;
			var value = '';
			if(switch_a || add_a){
				var opt = 'answer_' + q_num + '_' + i;
				if(form[opt] != null){
					value = form[opt].value;
				}
			}
			if(atype == "check"){
				atype = "checkbox";
			}
			if(type != "drop"){
				html += '<input name="dummy_' + q_num + '" disabled="disabled" type="' + atype + '">';
			}
			html += '<input maxlength="500" value="' + value + '" name="answer_' + q_num + '_' + i + '" size="35" type="text"><br />';
		}
	} else if(type == "text"){
		html += '<?_ml fcklang.poll.question.text.label.size _ml?> ' + '<input maxlength="3" value="30" name="pq_' + q_num + '_size" size="3" type="text"> ';
		html += '<?_ml fcklang.poll.question.text.label.maxlength _ml?> ' + '<input maxlength="3" value="50" name="pq_' + q_num + '_maxlength" size="3" type="text">\n';
	} else if(type == "scale"){
		html += '<?_ml fcklang.poll.question.scale.label.from _ml?> ' + '<input maxlength="9" value="1" name="pq_' + q_num + '_from" size="3" type="text">\n';
		html += '<?_ml fcklang.poll.question.scale.label.to _ml?> ' + '<input maxlength="9" value="10" name="pq_' + q_num + '_to" size="3" type="text">\n';
		html += '<?_ml fcklang.poll.question.scale.label.by _ml?> ' + '<input maxlength="9" value="1" name="pq_' + q_num + '_by" size="3" type="text">\n';
	}

	html += "</div>";

	// Add Answer button
	if(type == "radio" || type == "check" || type == "drop"){
		html += "<input type='button' name='more_answer' value=' <?_ml fcklang.poll.question.label.more _ml?> ' onclick='insertQandA(true)'>";
	}

	return html;
}

function populateQandA(poll, form, q_num){
	var question = poll.questions[q_num];
	if(question == null){
		return;
	}
	form['question_' + q_num].value = question.name;
	if(question.type){
		if(/^check|drop|radio$/.test(question.type)){
			for(var j = 0; j < question.answers.length; j++){
				var pqNum = 'answer_' + q_num + '_' + j;
				if(form[pqNum]){
					form[pqNum].value = question.answers[j];
				}
			}
		} else if(question.type == 'text'){
			form["pq_" + q_num + "_size"].value = question.size;
			form["pq_" + q_num + "_maxlength"].value = question.maxlength;
		} else if(question.type == 'scale'){
			form["pq_" + q_num + "_from"].value = question.from;
			form["pq_" + q_num + "_to"].value = question.to;
			form["pq_" + q_num + "_by"].value = question.by;
		}
	}
}

function addQuestion(switchQ, ignore_empty){
	var form = document.poll;

	// Don't add new questions if the current one is empty
	if(!ignore_empty && form["question_" + current_question].value == ''){
		alert("<?_ml fcklang.poll.wizard.notice.empty _ml?>");
		return;
	}

	// Add to Questions counter
	Questions++;

	// Current question
	var current_div = document.getElementById('qa_' + current_question);

	// Create new question
	var newDiv = createQuestionDiv(Questions - 1);
	current_div.parentNode.appendChild(newDiv);

	if(switchQ){
		switchQuestion(Questions - 1);
	} else {
		// Update/Insert navigation for Questions
		updateQuestionNav();
	}
}

function switchQuestion(q_selected){

	// Hide current question
	var current_div = document.getElementById('qa_' + current_question);
	current_div.style.display = 'none';

	// Display chosen question
	current_question = q_selected;
	document.getElementById('qa_' + current_question).style.display = 'block';

	updateQuestionNav();
}

function updateQuestionNav(){
	var html = '';

	// Only show questions nav if multiple questions
	if(Questions > 1){
		html += "<?_ml fcklang.poll.nav.label.question _ml?>".replace("#1", current_question + 1)
			.replace("#2", Questions) + " &nbsp; ";
		if(current_question > 0){
			html += "<a href='javascript:switchQuestion(" + (current_question - 1);
			html += ")'><?_ml fcklang.poll.nav.label.prev _ml?></a> ";
		} else {
			html += "<?_ml fcklang.poll.nav.label.prev _ml?> ";
		}
		html += "| ";
		if(current_question < Questions - 1){
			html += "<a href='javascript:switchQuestion(" + (current_question + 1);
			html += ")'><?_ml fcklang.poll.nav.label.next _ml?></a> ";
		} else {
			html += "<?_ml fcklang.poll.nav.label.next _ml?> ";
		}
	}
	document.getElementById('QNav').innerHTML = html;
}

function createQuestionDiv(q_num){
	var div = document.createElement("div");
	div.id = "qa_" + q_num;
	div.style.display = 'none';

	var html = '';
	var title = '<?_ml fcklang.poll.question.title _ml?>'.replace('#1', q_num + 1);
	html += '<p><table><tr><td>' + title + ' </td>';
	html += '<td><input name="question_' + q_num + '" type="text" size="50" value=""></td></tr>\n';
	html += '<tr>\n';
	html += '<td><?_ml fcklang.poll.question.label.anstype _ml?> </td><td><select name="type_' + q_num + '">\n';
	html += '<option value="--"></option>\n';
	html += '<option value="radio"><?_ml fcklang.poll.question.anstype.option.radio _ml?></option>\n';
	html += '<option value="check"><?_ml fcklang.poll.question.anstype.option.check _ml?></option>\n';
	html += '<option value="drop"><?_ml fcklang.poll.question.anstype.option.dropdown _ml?></option>\n';
	html += '<option value="text"><?_ml fcklang.poll.question.anstype.option.text _ml?></option>\n';
	html += '<option value="scale"><?_ml fcklang.poll.question.anstype.option.scale _ml?></option>\n';
	html += '</select>\n';
	html += '<input type="button" name="setType_' + q_num + '" value="<?_ml fcklang.poll.question.label.insert _ml?>" ' + 'onclick="insertQandA(false, true)" />\n';
	html += '</td></tr>\n';
	html += '<tr><td></td><td><div id="QandA_' + q_num + '"></div></td></tr></table></p>\n';

	div.innerHTML = html;

	return div;
}

</script>
</head>

<body style="overflow: hidden">
<form action="" name="poll">
	<div id='divSetup'>
		<p>
			<?_ml fcklang.poll.label.name _ml?><br /> <input name="name" id="name" type="text" size="50">
		</p>

		<p>
			<?_ml fcklang.poll.label.whovote _ml?><br />
			<input name="whovote" value="all" type="radio" id="whovote_all" checked="checked">
			<label for="whovote_all"><?_ml fcklang.poll.whovote.option.everyone _ml?></label><br />
			<input name="whovote" value="friends" type="radio" id="whovote_friend">
			<label for="whovote_friend"><?_ml fcklang.poll.whovote.option.friends _ml?></label>
		</p>

		<p>
			<?_ml fcklang.poll.label.whoview _ml?><br />
			<input name="whoview" value="all" type="radio" id="whoview_all" checked="checked">
			<label for="whoview_all"><?_ml fcklang.poll.whoview.option.everyone _ml?></label><br />
			<input name="whoview" value="friends" type="radio" id="whoview_friends">
			<label for="whoview_friends"><?_ml fcklang.poll.whoview.option.friends _ml?></label><br />
			<input name="whoview" value="none" type="radio" id="whoview_none">
			<label for="whoview_none"><?_ml fcklang.poll.whoview.option.owner _ml?></label>
		</p>
	</div>
	<div id="divQuestions" style="display: none">
		<div style="padding: 0 3px 3px 3px; border-bottom: 1px dashed #cec6b5; width: 100%">
			<div style='float:right;'>
				<input type='button' value=' Next Question ' onclick='addQuestion(true)'>
			</div>
			<div id='QNav' style="padding-top: 3px;">
				<?_code my $ret = BML::ml('fcklang.poll.nav.label.question'); $ret =~ s/#\d/1/g; return $ret; _code?>	&nbsp;				<?_ml fcklang.poll.nav.label.prev _ml?> | <?_ml fcklang.poll.nav.label.next _ml?>
			</div>
			<div style="clear: both"></div>
		</div>
		<div id="QArray" style="height: 220px; border: 0;">
			<div id="qa_0">
				<p>
				<table>
					<tr>
						<td><?_code my $ret = BML::ml('fcklang.poll.question.title'); $ret =~ s/#\d/1/g; return $ret; _code?></td>
						<td><input name="question_0" type="text" size="50" value=""></td>
					</tr>
					<tr>
						<td><?_ml fcklang.poll.question.label.anstype _ml?></td>
						<td><select name="type_0">
							<option value="--"></option>
							<option value="radio"><?_ml fcklang.poll.question.anstype.option.radio _ml?></option>
							<option value="check"><?_ml fcklang.poll.question.anstype.option.check _ml?></option>
							<option value="drop"><?_ml fcklang.poll.question.anstype.option.dropdown _ml?></option>
							<option value="text"><?_ml fcklang.poll.question.anstype.option.text _ml?></option>
							<option value="scale"><?_ml fcklang.poll.question.anstype.option.scale _ml?></option>
						</select>
							<input type="button" name="setType_0" value="<?_ml fcklang.poll.question.label.insert _ml?>" onclick="insertQandA(false, true)" />
						</td>
					</tr>
					<tr>
						<td></td>
						<td>
							<div id="QandA_0"></div>
						</td>
					</tr>
				</table>
				</p>
			</div>
		</div>
	</div>
</form>
</body>
</html>