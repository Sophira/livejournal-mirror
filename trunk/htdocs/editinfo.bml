<?page
title=><?_ml .title _ml?>
body<=
<?_code

 return LJ::server_down_html() if ($LJ::SERVER_DOWN);

 $FORM{'unban'} =~ s/\0/,/g;
 return "<?badinput?>" unless LJ::text_in(\%FORM);

 my $dbs = LJ::get_dbs();
 my $dbh = $dbs->{'dbh'};
 my $dbr = $dbs->{'reader'};

 my $ret;
 my $remote = LJ::get_remote($dbs);
 my $mode = $FORM{'mode'} || ($remote && $FORM{'authas'} ne "(other)" ? "modify" : "loginform");

 if ($mode eq "loginform")
 {
     $ret .= "<?h1 $ML{'.title'} h1?><?p $ML{'.login.enterinfo'} p?>";
     $ret .= "<form action='editinfo.bml' method='post'>";
     $ret .= "<input type='hidden' name='mode' value='modify'>";
     $ret .= "<?standout <table> ";
     $ret .= LJ::auth_fields_2($dbs, \%FORM, { 'shared' => 1, 'getother' => 0 });
     $ret .= "<tr><td colspan='2' align='center'><input type='submit' value='Proceed...'>";
     $ret .= "</td></tr></table> standout?></form>\n";
     $ret .= "<?h1 $ML{'lostinfo.head'} h1?><?p $ML{'lostinfo.text'} p?> ";
     return $ret;
 }
 my ($u, $user, $err);
 my $user = LJ::get_effective_user($dbs, {
     'form' => \%FORM,
     'out_u' => \$u,
     'remote' => $remote,
     'out_err' => \$err,
 });

 return $LJ::MSG_READONLY_USER if LJ::get_cap($remote, "readonly");

 return LJ::bad_input($err) if $err;

 $u ||= LJ::load_user($dbs, $user);
 return LJ::bad_input("Invalid username") unless $u;

 my $hpassword = LJ::hash_password($u->{'password'});

 LJ::load_user_props($dbr, $u, "opt_whatemailshow",
                     "country", "state", "city",
                     "zip", "icq", "aolim", "yahoo", "msn", "url",
                     "urlname", "gender", "jabber", "opt_blockrobots",
                     "opt_notalkicons", "opt_logcommentips",
                     "howhear", "opt_bdaymail", "opt_hidefriendofs",
                     "sidx_bdate", "sidx_loc", "mailencoding", "opt_nctalklinks",
                     "opt_whoscreened"
                     );

 my %saved = (); # to store values before they undergo normalisation

 $saved{'name'} = $u->{'name'};

 foreach (values %$u) { LJ::text_out(\$_); }

 my $quser = $dbr->quote($user);

 my $dbcs = $dbs;
 my $clustered = $u->{'clusterid'};
 $dbcs = LJ::get_cluster_set($u) if $clustered; 

 if ($u->{'has_bio'}) {
     $u->{'bio'} = LJ::dbs_selectrow_array($dbcs, "SELECT bio FROM userbio ".
                                           "WHERE userid=$u->{'userid'}");
     $saved{'bio'} = $u->{'bio'};
     LJ::text_out(\$u->{'bio'});
 }

 $sth = $dbr->prepare("SELECT i.interest, i.intid FROM interests i, userinterests ui WHERE i.intid=ui.intid AND ui.userid=$u->{'userid'}");
 $sth->execute;
 my %interests = ();
 while ($_ = $sth->fetchrow_hashref) {
     $interests{$_->{'interest'}} = $_->{'intid'};
 }

 my %countries;
 my %states;
 LJ::load_codes($dbs, { "country" => \%countries, "state" => \%states });

 my $mode = $FORM{'mode'} || "modify";

 if ($mode eq "modify")
 {
     my $ret = "";

     if ($remote) {
         $ret .= "<form method='post'>";
         $ret .= "<?h1 $ML{'.switch.header'} h1?><?p $ML{'.switch.workwith'} ";
         $ret .= LJ::make_shared_select($dbs, $remote, \%FORM);
         $ret .= " <input type='submit' value='$ML{'.switch.button'}'> p?></form>";
     }

     $ret .= "<form method=\"POST\">\n";
     $ret .= "<input type=\"hidden\" name=\"mode\" value=\"domodify\" />\n";
     $ret .= "<input type=\"hidden\" name=\"user\" value=\"<?_eh $user _eh?>\" />\n";
     $ret .= "<input type=\"hidden\" name=\"hpassword\" value=\"$hpassword\" />\n";

     ### personal information
     $ret .= "<?h1 $ML{'.persinfo.header'} h1?><?p $ML{'.persinfo.disclaimer'} p?>\n";

     my %htmlu = ();
     foreach my $v (qw(name email url urlname zip city url aolim jabber icq yahoo msn howhear bio))
     {
         $htmlu{$v} = BML::eall($u->{$v});
     }

     $ret .= "<P><TABLE WIDTH=100%>\n";

     # name
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.name.title'}</TD>";
     if(LJ::text_in($saved{'name'})) {
         $ret .= "<TD><INPUT NAME=name VALUE=\"$htmlu{'name'}\" MAXLENGTH=50></TD></TR>\n";
     } else {
         $ret .= "<input type='hidden' name='name_absent' value='yes' />";
         $ret .= "<td><?inerr $ML{'.error.invalidname'} inerr?></td></tr>\n";
     }

     # birthday
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.bday.title'}</TD><TD>";
     my %bdpart;
     if ($u->{'bdate'} =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/)
     {
         ($bdpart{'year'}, $bdpart{'month'}, $bdpart{'day'}) = ($1, $2, $3);
         if ($bdpart{'year'} eq "0000") { $bdpart{'year'} = ""; }
         if ($bdpart{'day'} eq "00") { $bdpart{'day'} = ""; }
     }
     $ret .= "<SELECT NAME=\"month\"><OPTION VALUE=\"\">";
     for (my $i=1; $i<=12; $i++) {
         my $sel = $bdpart{'month'} == $i ? " SELECTED" : "";
         $ret .= "<OPTION VALUE=$i$sel>" . LJ::Lang::month_long("EN", $i) . "\n";
     }
     $ret .= "</SELECT> ";
     $ret .= "<INPUT SIZE=3 MAXLENGTH=2 NAME=day VALUE=\"$bdpart{'day'}\">, <INPUT SIZE=5 MAXLENGTH=4 NAME=year VALUE=\"$bdpart{'year'}\"> ($ML{'.bday.year.opt'})";

     $ret .= "</TD></TR>\n";

     # gender
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.gender.title'}</TD><TD><SELECT NAME=\"gender\">";
     my @gender = ("U" => "(Unspecified)", "M" => "Male", "F" => "Female");
     while (my ($g, $gword)=splice(@gender, 0, 2))
     {
         my $sel = $u->{'gender'} eq $g ? " SELECTED" : "";
         $ret .= "<OPTION VALUE=\"$g\"$sel>$gword\n";
     }
     $ret .= "</SELECT></TD></TR>\n";

     # email
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.email.title'}</TD><TD><INPUT NAME=email VALUE=\"$htmlu{'email'}\" MAXLENGTH=50 SIZE=40></TD></TR>\n";

     # url
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.webpageurl.title'}</TD><TD><INPUT NAME=url VALUE=\"$htmlu{'url'}\" SIZE=40> ($ML{'.optional'})</TD></TR>\n";

     # urlname
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.webpagename.title'}</TD><TD><INPUT NAME=urlname VALUE=\"$htmlu{'urlname'}\" SIZE=40> ($ML{'.optional'})</TD></TR>\n";

     # chat thingies
     foreach my $p (["aolim", "AOL IM", 28], ["icq", "ICQ \#", 12], 
                    ["yahoo", "Yahoo! ID", 33], ["msn", "MSN Messenger", 60],
                    ["jabber", "Jabber Address", 60])
     {
         $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$p->[1]</TD><TD><INPUT NAME=\"$p->[0]\" VALUE=\"$htmlu{$p->[0]}\" SIZE=20 MAXLENGTH=$p->[2]> ($ML{'.optional'})</TD></TR>\n";
     }
             
     # country
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.country.title'}</TD><TD><SELECT NAME=country><OPTION VALUE=\"\">($ML{'.country.choose'})\n";
     $ret .= "<OPTION VALUE=\"US\">United States\n";
     foreach (sort { $countries{$a} cmp $countries{$b} } keys %countries)
     {
         my $sel = $_ eq $u->{'country'} ? " SELECTED" : "";
         $ret .= "<OPTION VALUE=\"$_\"$sel>$countries{$_}\n";
     }
     $ret .= "</SELECT></TD></TR>\n";

     # city
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.city.title'}</TD><TD><INPUT NAME=city VALUE=\"$htmlu{'city'}\"></TD></TR>\n";

     # state
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.state.title'}</TD><TD><SELECT NAME=statedrop><OPTION VALUE=\"\">($ML{'.state.us'})\n";
     foreach (sort { $states{$a} cmp $states{$b} } keys %states)
     {
         my $sel = $_ eq $u->{'state'} ? " SELECTED" : "";
         $ret .= "<OPTION VALUE=\"$_\"$sel>$states{$_}\n";
     }
     my $otherstate = BML::eall(defined($states{$u->{'state'}}) ? "" : $u->{'state'});
     $ret .= "</SELECT><BR>$ML{'.state.other'}: <INPUT NAME=stateother SIZE=20 MAXLENGTH=50 VALUE=\"$otherstate\"></TD></TR>\n";

     # zip
     $ret .= "<TR><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.zip.title'}</TD><TD><INPUT NAME=zip VALUE=\"$htmlu{'zip'}\" SIZE=6 MAXLENGTH=5> ($ML{'.zip.usonly'})</TD></TR>\n";

     # text messaging
     if (LJ::get_cap($u, "textmessaging"))
     {
         $sth = $dbr->prepare("SELECT provider, number, security FROM txtmsg WHERE userid=$u->{'userid'}");
         $sth->execute;
         my $tminfo = $sth->fetchrow_hashref;
         foreach (values %$tminfo) { LJ::text_out(\$_); }

         # text messaging
         $ret .= "<TR VALIGN=TOP><TD ALIGN=RIGHT BGCOLOR=<?emcolor?>>$ML{'.tm.title'}<BR>($ML{'.tm.about'})</TD><TD>";
         $ret .= "<TABLE BORDER=0><TR><TD>";
         $ret .= "<INPUT TYPE=CHECKBOX NAME=\"use_txtmsg\" " . ($u->{'txtmsg_status'} eq "on" ? "CHECKED" : "") . "></TD><TD COLSPAN=2><B>$ML{'.tm.sec.about'}</B></TD></TR>";
         $ret .= "<TR><TD ROWSPAN=3>&nbsp;</TD><TD>$ML{'.tm.sec.title'}</TD><TD>";
         my %levels = ("all" => BML::ml(".security.visibility.anybody"),
                       "reg" => BML::ml(".security.visibility.regusers"),
                       "friends" => BML::ml(".security.visibility.friends"));
         my @levels = qw(all reg friends);
         $ret .= "<SELECT NAME=\"txtmsg_security\">";
         foreach my $lev (@levels) {
             my $sel = $tminfo->{'security'} eq $lev ? " SELECTED" : "";
             $ret .= "<OPTION VALUE=\"$lev\"$sel>$levels{$lev}\n";
         }
         $ret .= "</SELECT>\n";
         $ret .= "</TD></TR>";
         $ret .= "<TR><TD>$ML{'.tm.servprov'}</TD><TD>";
         {
             my @opts = ("", "");
             foreach my $p (LJ::TextMessage::providers()) {
                 my $info = LJ::TextMessage::provider_info($p);
                 push @opts, ($p, $info->{'name'});
             }
             $ret .= LJ::html_select({ 'name' => 'txtmsg_provider',
                                       'selected' => $tminfo->{'provider'}, },
                                     @opts);
         }
         
         $ret .= " ($ML{'.tm.details'})</TD></TR>";
         $ret .= "<TR><TD>$ML{'.tm.phonenum'}</TD><TD><INPUT NAME=\"txtmsg_number\" SIZE=15 MAXLENGTH=40 VALUE=\"$tminfo->{'number'}\"></TD></TR>";
         $ret .= "</TABLE></TD></TR>\n";
     }

     # end personal info
     $ret .= "</TABLE>\n";

     ### User bio
     $ret .= "<?h1 $ML{'.bio.header'} h1?><?p $ML{'.bio.about'} p?>";
     if (LJ::text_in($saved{'bio'})) {
         $ret .= "<UL><TEXTAREA NAME=bio ROWS=10 COLS=50 WRAP=SOFT>$htmlu{'bio'}</TEXTAREA></UL>";
     } else {
         $ret .= "<input type='hidden' name='bio_absent' value='yes' />";
         $ret .= "<?p <?inerr $ML{'.error.invalidbio'} inerr?> p?>";
     }

     ### How heard Settings
     unless ($htmlu{'howhear'}) {
         $about = BML::ml(".howhear.about", { 'sitename' => $LJ::SITENAME, });
         $ret .= "<?h1 $ML{'.howhear.header'} h1?><?p $about";
         $ret .= "<UL><INPUT NAME=howhear VALUE=\"$htmlu{'ints'}\" SIZE=60 MAXLENGTH=100></UL>";
         $ret .= " p?>";
     }

     {
         ### Interests
         $ret .= "<?h1 $ML{'.int.header'} h1?>";
         my @eintsl;
         foreach (sort keys %interests) {
             push @eintsl, $_ if LJ::text_in($_);
         }
         my $eints = BML::eall(join(", ", @eintsl));
         $ret .= "<?p $ML{'.int.about'} p?>";
         $ret .= "<?p $ML{'.int.ex.good'} p?>";
         $ret .= "<?p $ML{'.int.ex.bad'} p?>";
         $ret .= "<ul><textarea name='interests' rows='10' cols='50' wrap='soft'>$eints</textarea></ul>";
     }

     ### Picture Settings
     $ret .= "<?h1 $ML{'.userpic.header'} h1?><?p $ML{'.userpic.about'}\n<P><CENTER>";
     if ($u->{'defaultpicid'})
     {
         my $picid = $u->{'defaultpicid'};
         LJ::load_userpics($dbs, \%userpics, [ $picid ]);	 
         $ret .= "<IMG SRC=\"$LJ::USERPIC_ROOT/$picid/$u->{'userid'}\" WIDTH=$userpics{$picid}->{'width'} HEIGHT=$userpics{$picid}->{'height'}>";
     } else
     {
         $ret .= "<I>($ML{'.userpic.none'})</I>";
     }
     $ret .= "</CENTER><P>$ML{'.userpic.edit'} p?>\n";


     ### Permission Settings
     $ret .= "<?h1 $ML{'.settings.header'} h1?><?p $ML{'.settings.about'} p?>";
     $ret .= "<P><TABLE>\n";

     my $checked;
     $checked = $u->{'allow_infoshow'} eq "Y" ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=allow_infoshow $checked></TD><TD><B>$ML{'.allowshowinfo.title'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.allowshowinfo.about'}</TD></TR>\n";

     $checked = $u->{'allow_contactshow'} ne "N" ? "CHECKED" : "";
     $ret .= "<tr valign=middle><td width=50 align=right><input type=checkbox name=allow_contactshow $checked></td><td><b>$ML{'.allowshowcontact.title'}</b></td></tr>\n";
     $ret .= "<tr><td>&nbsp;</td><td> $ML{'.allowshowcontact.about'}";

     {
         $ret .= "<p><b>$ML{'.security.header'}</b> ";
         $ret .= LJ::html_select({ 'name' => 'contactshow_sec',
                                   'selected' => $u->{'allow_contactshow'},
                               }, 
                                 "Y" => BML::ml(".security.visibility.everybody"),
                                 "F" => BML::ml(".security.visibility.friends"),
                                 );

         $ret .= "<p><b>$ML{'.allowshowcontact.email'}</b><ul>";

         my $cur = $u->{'opt_whatemailshow'} || "B";
         my @vals = ( ($LJ::USER_EMAIL && LJ::get_cap($u, "useremail"))
                     ? ("B" => BML::ml(".allowshowcontact.email.both", { 'domain' => $LJ::USER_DOMAIN}),
                        "A" => BML::ml(".allowshowcontact.email.actual_only"),
                        "L" => BML::ml(".allowshowcontact.email.lj_only"),
                        "N" => BML::ml(".allowshowcontact.email.neither"))
                     : ("A" => BML::ml(".allowshowcontact.email.show"),
                        "N" => BML::ml(".allowshowcontact.email.no_show")));
         $ret .= "<SELECT NAME=\"opt_whatemailshow\">";
         while (my ($key, $des) = splice(@vals, 0, 2)) {
             my $sel = $key eq $cur ? "SELECTED" : "";
             $ret .= "<OPTION VALUE=\"$key\" $sel>$des";
         }
         $ret .= "</SELECT></ul>";
         
         $ret .= ($LJ::USER_EMAIL
                  ? $ML{'.allowshowcontact.email.withdomainaddr'}
                  : $ML{'.allowshowcontact.email.withoutdomainaddr'});
     }

     $ret .= "</TD></TR>\n";

     $checked = $u->{'opt_mangleemail'} eq "Y" ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_mangleemail $checked></TD><TD><B>$ML{'.mangleaddress.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.mangleaddress.about'}</TD></TR>\n";

     $checked = $u->{'opt_blockrobots'} ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_blockrobots VALUE=1 $checked></TD><TD><B>$ML{'.blockrobots.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.blockrobots.about'}</TD></TR>\n";

     $checked = $u->{'allow_getljnews'} eq "Y" ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=allow_getljnews $checked></TD><TD><B>$ML{'.opt_in.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.opt_in.about'}</TD></TR>\n";

     $checked = $u->{'opt_bdaymail'} ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_bdaymail $checked></TD><TD><B>$ML{'.bdayreminders.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.bdayreminders.about'}</TD></TR>\n";

     $checked = $u->{'opt_hidefriendofs'} ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_hidefriendofs $checked></TD><TD><B>$ML{'.hidefriendof.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.hidefriendof.about'}</TD></TR>\n";

     $checked = $u->{'opt_nctalklinks'} ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_nctalklinks $checked></TD><TD><B>$ML{'.numcomments.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.numcomments.about'}</TD></TR>\n";

     $checked = $u->{'opt_showtalklinks'} eq "Y" ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_showtalklinks $checked></TD><TD><B>$ML{'.enableboards.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.enableboards.about'}\n";

     $ret .= "<P><B>$ML{'.whoreply.header'}</B> ";
     $ret .= LJ::html_select({ 'name' => 'opt_whocanreply', 'selected' => $u->{'opt_whocanreply'}, },
                          "all" => BML::ml(".security.visibility.anybody"), "reg" => BML::ml(".security.visibility.regusers"), "friends" => BML::ml(".security.visibility.friends"));

     $ret .= "<P><B>$ML{'.logip.header'}</B> ";
     $ret .= LJ::html_select({ 'name' => 'opt_logcommentips', 'selected' => $u->{'opt_logcommentips'}, },
                          "N" => BML::ml(".donotlog"), "S" => BML::ml(".logip.anon_only"), "A" => BML::ml(".logip.always"));
 
     $ret .= "<p><b>$ML{'.screen.header'}</b> ";
     $ret .= LJ::html_select({ 'name' => 'opt_whoscreened', 'selected' => $u->{'opt_whoscreened'}, }, "N" => $ML{'.screen.none'}, "R" => $ML{'.screen.anon'}, "F" => ($u->{'journaltype'} eq 'C' ? $ML{'.screen.nonmembers'} : $ML{'.screen.nonfriends'}), "A" => $ML{'.screen.all'});
     
     $ret .= "<P><TABLE>\n";

     $checked = $u->{'opt_gettalkemail'} eq "Y" ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_gettalkemail $checked></TD><TD><B>$ML{'.getreplies.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.getreplies.about'}</TD></TR>\n";

     $checked = $u->{'opt_htmlemail'} eq "Y" ? "CHECKED" : "";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX NAME=opt_htmlemail $checked></TD><TD><B>$ML{'.htmlemail.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.htmlemail.about'}</TD></TR>\n";

     $checked = $u->{'opt_notalkicons'} ? "" : "CHECKED";
     $ret .= "<TR VALIGN=MIDDLE><TD WIDTH=50 ALIGN=RIGHT><INPUT TYPE=CHECKBOX VALUE=1 NAME=opt_talkicons $checked></TD><TD><B>$ML{'.showsubjicons.header'}</B></TD></TR>\n";
     $ret .= "<TR><TD>&nbsp;</TD><TD>$ML{'.showsubjicons.about'}</TD></TR>\n";

     $ret .= "</TABLE></TD></TR>\n";

     $ret .= "</table>\n";

     if ($LJ::UNICODE) {
         $ret .= "<?h2 $ML{'.encoding.header'} h2?><?p $ML{'.encoding.about'} p?><table>\n";
         $ret .= "<tr><td width='50'>&nbsp;</td><td><p><b>$ML{'.autotranslate.header'}</b>";
         
         my (%old_encnames, %mail_encnames, %encodings);
         LJ::load_codes($dbs, { "encoding" => \%encodings } );
         LJ::load_codes($dbs, { "encname" => \%old_encnames } );
         %mail_encnames = %old_encnames;

         # which encodings to show? For now, we just delete utf-8 from the old encodings
         # list because it doesn't make sense there.
         foreach my $id (keys %encodings) {
             delete $old_encnames{$id} if lc($encodings{$id}) eq 'utf-8';
         }

         $ret .= LJ::html_select({'name'=>'oldenc', 'selected'=>$u->{'oldenc'}}, %old_encnames);
         $ret .= "</p><p>$ML{'.autotranslate.about'}</p></td></tr>";
         $ret .= "<tr><td>&nbsp;</td><td><p><b>$ML{'.translatemailto.header'}</b>";
         $ret .= LJ::html_select({'name'=>'mailencoding', 'selected'=>$u->{'mailencoding'}}, %mail_encnames);
         $ret .= "</p><p>$ML{'.translatemailto.about'}</p></td></tr>";
         $ret .= "</table>\n";
     }

     ####### let them un-ban users if they've banned users
     my @banned = ();
     my $quserid = $u->{'userid'}+0;
     $sth = $dbr->prepare("SELECT r.targetid, u.user FROM reluser r, user u WHERE r.targetid=u.userid AND r.userid=$quserid AND r.type='B'");
     $sth->execute;
     push @banned, $_ while ($_ = $sth->fetchrow_hashref);
     
     if (@banned) {
         $ret .= "<?h1 $ML{'.unbanusers.header'} h1?><?p $ML{'.unbanusers.about'} p?>";
         $ret .= "<UL>";
         foreach (@banned) {
             $ret .= "<INPUT TYPE=CHECKBOX NAME=\"unban\" VALUE=\"$_->{'targetid'}\"> $_->{'user'}<BR>\n";
         }
         $ret .= "</UL>";

     }

     ### ending submit block
     $ret .= "<?h1 $ML{'.finished.header'} h1?><?p $ML{'.finished.about'} p?>\n";
     $ret .= "<?standout <INPUT TYPE=SUBMIT VALUE=\"$ML{'.finished.save_button'}\"> standout?>\n";
     $ret .= "</FORM>\n";

     return $ret;
 }

 if ($mode eq "domodify")
 {
     my @errors = ();
     my $state = "";

     my ($zipcity, $zipstate);
     my $qzip = $dbr->quote($FORM{'zip'});
     if ($FORM{'country'} eq "US") {
         $sth = $dbr->prepare("SELECT city, state FROM zip WHERE zip=$qzip");
         $sth->execute;
         ($zipcity, $zipstate) = $sth->fetchrow_array;
     }

     my $this_year = (localtime())[5]+1900;

     unless ($FORM{'name'} || defined($FORM{'name_absent'})) { push @errors, "Your name is a required field.  At least provide your first name, or a nickname or handle."; }
     if ($FORM{'year'} && $FORM{'year'} < 100) { push @errors, "Invalid birthday year.  Enter a 4-digit year."; }
     if ($FORM{'year'} && $FORM{'year'} >= 100 && 
        ($FORM{'year'} < 1890 || $FORM{'year'} > $this_year)) { push @errors, "Invalid birthday year."; }
     if ($FORM{'month'} && ($FORM{'month'} < 1 || $FORM{'month'} > 12)) { push @errors, "Invalid birthday month.  Enter a month from 1-12.  (Jan-Dec)"; }
     if ($FORM{'day'} && ($FORM{'day'} < 1 || $FORM{'day'} > 31)) { push @errors, "Invalid birthday day.  Enter a day from 1-31."; }
     if (@errors == 0 && $FORM{'day'} > LJ::days_in_month($FORM{'month'}, $FORM{'year'})) {
         push @errors, "Invalid day for that month.";
     }
     push @errors, "<?requirepost?>" unless LJ::did_post();

     if ($FORM{'country'} ne "US" && $FORM{'zip'})
     {
         push @errors, "$ML{'.error.locale.zip_requires_us'}";
     }
     if ($FORM{'country'} eq "US" && $FORM{'stateother'})
     {
         push @errors, "$ML{'.error.locale.country_ne_state'}";
     } elsif ($FORM{'country'} && $FORM{'country'} ne "US" && $FORM{'statedrop'})
     {
         push @errors, "$ML{'.error.locale.state_ne_country'}";
     }
     
     # zip-code validation stuff
     if ($FORM{'country'} eq "US") 
     {
         if ($FORM{'statedrop'} && $zipstate && $FORM{'statedrop'} ne $zipstate) {
             push @errors, "$ML{'.error.locale.zip_ne_state'}";
         }
         if ($zipcity) {
             $FORM{'statedrop'} = $zipstate;
             $FORM{'city'} = $zipcity;
         }
     }

     if ($FORM{'country'} && !defined($countries{$FORM{'country'}})) {
         push @errors, $ML{'.error.locale.invalid_country'};
     }
     
     if ($FORM{'use_txtmsg'}) {
         unless ($FORM{'txtmsg_provider'}) {
             push @errors, $ML{'.error.tm.require_provider'};
         }
         unless ($FORM{'txtmsg_number'}) {
             push @errors, $ML{'.error.tm.require_number'};
         }
     }

     unless ($FORM{'email'}) { push @errors, "You must provide your email address"; }
     if ($LJ::USER_EMAIL and $FORM{'email'} =~ /\@\Q$LJ::USER_DOMAIN\E$/i) {
         push @errors, BML::ml(".error.email.lj_domain", { 'user' => $u->{'user'}, 'domain' => $LJ::USER_DOMAIN, });
     }
     if ($FORM{'email'} =~ /\s/) { push @errors, "$ML{'.error.email.no_space'}"; }
     unless (@errors)
     {
         &check_email($FORM{'email'}, \@errors);
     }
     
     return LJ::bad_input(@errors) if @errors;

     $state = $FORM{'statedrop'} || $FORM{'stateother'};
     my $email_changed = ($u->{'email'} ne $FORM{'email'});
     if ($email_changed) {
         # record old email address;
         my $oldemail = $dbh->quote($u->{'email'});
         my $oldstatus = $dbh->quote($u->{'status'});
         $dbh->do("INSERT INTO infohistory (userid, what, oldvalue, timechange, other) VALUES ($u->{'userid'}, 'email', $oldemail, NOW(), $oldstatus)");
     }
     
     $FORM{'url'} =~ s/\s+$//; $FORM{'url'} =~ s/^\s+//;
     if ($FORM{'url'}) {
         unless ($FORM{'url'} =~ /^https?:\/\//) {
             $FORM{'url'} =~ s/^http\W*//;
             $FORM{'url'} = "http://$FORM{'url'}";
         }
     }

     my $newname = defined($FORM{'name_absent'}) ? $saved{'name'} : $FORM{'name'};
     $newname =~ s/[\n\r]//g;
     $newname = LJ::text_trim($newname, LJ::BMAX_NAME, LJ::CMAX_NAME);

     my $newbio = defined($FORM{'bio_absent'}) ? $saved{'bio'} : $FORM{'bio'};
     my $has_bio = ($newbio =~ /\S/) ? "Y" : "N";
     my $txtmsg_status = $FORM{'use_txtmsg'} ? "on" : "off";
     # setup what we're gonna update in the user table:
     my %update = (
                   'name' => $newname,
                   'bdate' => sprintf("%04d-%02d-%02d", $FORM{'year'}, $FORM{'month'}, $FORM{'day'}),
                   'email' => $FORM{'email'},
                   'status' => ($email_changed && $u->{'status'} eq "A") ? "T" : $u->{'status'},
                   'has_bio' => $has_bio,
                   'allow_infoshow' => $FORM{'allow_infoshow'} ? "Y" : "N",
                   'allow_getljnews' => $FORM{'allow_getljnews'} ? "Y" : "N",
                   'opt_showtalklinks' => $FORM{'opt_showtalklinks'} ? "Y" : "N",
                   'opt_gettalkemail' => $FORM{'opt_gettalkemail'} ? "Y" : "N",
                   'opt_htmlemail' => $FORM{'opt_htmlemail'} ? "Y" : "N",
                   'opt_mangleemail' => $FORM{'opt_mangleemail'} ? "Y" : "N",
                   'opt_whocanreply' => $FORM{'opt_whocanreply'},
                   'txtmsg_status' => $txtmsg_status,
                   );

     if ($FORM{'allow_contactshow'}) {
         $update{'allow_contactshow'} = "Y";
         $update{'allow_contactshow'} = "F" if ($FORM{'contactshow_sec'} eq "F");
     } else {
         $update{'allow_contactshow'} = "N";
     }

     if (defined $FORM{'oldenc'}) {
         $update{'oldenc'} = $FORM{'oldenc'};
     }

     # update 'user' table
     my $sets = "";
     foreach (keys %update)
     {
         $sets .= "$_=" . $dbh->quote($update{$_}) . ",";
     }
     chop $sets;

     my $sql = "UPDATE user SET $sets WHERE user=$quser";
     $dbh->do($sql);
     if ($dbh->err) { return "<?h1 $ML{'Error'} h1?><?p $ML{'error.dberror'} <b>" . $dbh->errstr . "</b> p?>"; }

     ### change any of the userprops ?
     {
         $FORM{'opt_blockrobots'} = $FORM{'opt_blockrobots'} ? 1 : 0;
         $FORM{'opt_bdaymail'} = $FORM{'opt_bdaymail'} ? 1 : 0;
         $FORM{'opt_hidefriendofs'} = $FORM{'opt_hidefriendofs'} ? 1 : 0;
         $FORM{'opt_notalkicons'} = $FORM{'opt_talkicons'} ? 0 : 1;   # (negated)
         $FORM{'opt_nctalklinks'} = $FORM{'opt_nctalklinks'} ? 1 : 0;
         if ($FORM{'opt_logcommentips'} ne "N" && 
             $FORM{'opt_logcommentips'} ne "S" && 
             $FORM{'opt_logcommentips'} ne "A") { $FORM{'opt_logcommentips'} = "N"; }
         $FORM{'opt_whoscreened'} = "N" unless $FORM{'opt_whoscreened'} =~ m/^(N|R|F|A)$/;
         $FORM{'state'} = $state;

         # for the directory.
         $FORM{'sidx_bdate'} = "";
         $FORM{'sidx_loc'} = "";	 
         if ($update{'allow_infoshow'} eq 'Y') {
             if ($FORM{'year'}) {
                 $FORM{'sidx_bdate'} = sprintf("%04d-%02d-%02d", map { $FORM{$_} }
                                               qw(year month day));
             }

             if ($FORM{'country'}) {
                 my $state;
                 if ($FORM{'country'} eq "US") {
                     $state = $FORM{'statedrop'};
                 } else {
                     $state = $FORM{'stateother'};
                 }
                 $FORM{'sidx_loc'} = sprintf("%2s-%s-%s",
                                             $FORM{'country'},
                                             $state,
                                             $FORM{'city'});
             }
         }

         my @uprops = (
                       "opt_whatemailshow", 
                       "country", "state", "city", "zip", "icq",
                       "aolim", "yahoo", "msn", "url", "urlname",
                       "gender", "jabber", "opt_blockrobots",
                       "opt_notalkicons", "opt_logcommentips",
                       "opt_bdaymail", "opt_hidefriendofs",
                       "sidx_bdate", "sidx_loc", "mailencoding", "opt_nctalklinks",
                       "opt_whoscreened",
                       );	

         # this is only done once, then never appears again.
         if ($FORM{'howhear'}) {
             push @uprops, "howhear";
         }

         foreach my $uprop (@uprops) {
             if ($FORM{$uprop} ne $u->{$uprop}) {
                 LJ::set_userprop($dbs, $u->{'userid'}, $uprop, $FORM{$uprop});
             }
         }
     }


     #### update their bio text
     if (($u->{'bio'} ne $FORM{'bio'}) && !defined($FORM{'bio_absent'})) {
         my $db_bio = $dbcs->{'dbh'};
         if ($has_bio eq "N") {
             $db_bio->do("DELETE FROM userbio WHERE userid=$u->{'userid'}");
             LJ::dudata_set($db_bio, $u->{'userid'}, 'B', 0, 0) if $clustered;
         } else {
             my $qbio = $dbh->quote($FORM{'bio'});
             $db_bio->do("REPLACE INTO userbio (userid, bio) VALUES ($u->{'userid'}, $qbio)");
             LJ::dudata_set($db_bio, $u->{'userid'}, 'B', 0, length($FORM{'bio'})) if $clustered;
         }
     }

     #### update their text messaging info
     if ($txtmsg_status eq "off") {
         if ($u->{'txtmsg_status'} eq "on") {
             $dbh->do("DELETE FROM txtmsg WHERE userid=$u->{'userid'}");
         }
     } elsif ($txtmsg_status eq "on") {
         my $qnumber = $dbh->quote($FORM{'txtmsg_number'});
         my $qsec = $dbh->quote($FORM{'txtmsg_security'});
         my $qprov = $dbh->quote($FORM{'txtmsg_provider'});
         $dbh->do("REPLACE INTO txtmsg (userid, provider, number, security) VALUES ($u->{'userid'}, $qprov, $qnumber, $qsec)");
     }

     ### update interests
     unless ($FORM{'interests_absent'}) {
         $FORM{'interests'} =~ s/^\s+//;
         $FORM{'interests'} =~ s/\s+$//;
         $FORM{'interests'} =~ s/\n/,/g;
         my @ints = split (/\s*,\s*/, $FORM{'interests'});
         my $intcount = scalar(@ints);
         if ($intcount > 150) {
             return LJ::bad_input(BML::ml(".error.excessive_int", {'intcount' => $intcount}));
         }
         LJ::set_interests($dbs, $u->{'userid'}, \%interests, \@ints);
     }

     #### now unban users they selected to be unbanned
     if ($FORM{'unban'})
     {
         my $bannedin = join(",", map { $dbh->quote($_); } split(/,/, $FORM{'unban'}));
         my $quserid = $u->{'userid'}+0;
         $dbh->do("DELETE FROM reluser WHERE userid=$quserid AND type='B' AND targetid IN ($bannedin)");
     }

     ##### /unban

     if ($email_changed) 
     {
         my $aa = {};
         $aa = LJ::register_authaction($dbs, $u->{'userid'}, 
                                       "validateemail", $FORM{'email'});

         my $body = ("You have just changed your LiveJournal email address.  To validate the change, please go to this address:\n\n" .
                     "     $LJ::SITEROOT/confirm/$aa->{'aaid'}.$aa->{'authcode'}\n\n" .
                     "Regards,\n$LJ::SITENAME Team\n\n$LJ::SITEROOT/\n");
         
         LJ::send_mail({
             'to' => $FORM{'email'},
             'from' => $LJ::ADMIN_EMAIL,
             'charset' => 'utf-8',
             'subject' => "Email Address Changed",
             'body' => $body,
         });
     }

     # tell the user all is well
     my $ret = "<?h1 $ML{'.success.header'} h1?><?p ";
     $ret .= BML::ml(".success.message", { 'user' => $user, }); 
     $ret .= " p?>";
     return $ret;
 }

 return "<?h1 $ML{'Error'} h1?><?p $ML{'error.unknownmode'} p?>"

_code?>

<=body
page?><?_c <LJDEP>
lib: LJ::TextMessage, cgi-bin/ljlib.pl, cgi-bin/ljlang.pl
link: htdocs/legal/privacy.bml, htdocs/support/faqbrowse.bml, htdocs/tools/textmessage.bml, htdocs/uploadpic.bml
link: htdocs/paidaccounts/index.bml, htdocs/users, htdocs/userinfo.bml
post: htdocs/editinfo.bml
img: htdocs/userpic
</LJDEP> _c?>
