<HTML><HEAD><TITLE>Console Reference</TITLE></HEAD>
<BODY>

[ <A HREF="./">console</A> | reference ]

<P><B>Grammar</B>
<BR>Think of this like a DOS or <tt>bash</tt> prompt.  The first word is a command.  Every word after that is an argument to that command.  Every command has a different number of required and optional parameters.  White space delimits arguments.  If you need a space in an argument, put double quotes around the whole thing.  If you need double quotes and spaces in an argument, escape the quote with a backslash (\) first.  If you need to do a backslash, escape that with a backslash.
<P>It's pretty straight-forward.  If you're confused, ask.

<P><B>Command Reference</B>
<BR>Arguments in &lt;angle brackets&gt; are required.  Arguments in [brackets] are optional.  If there is more than one optional argument, you can't skip one and provide one after it.  Once you skip one, you have to skip the rest.

(=_CODE

 use strict;
 use vars qw($dbh %FORM %cmd);
 require 'ljlib.pl';
 
 require 'console.pl';

 my ($ret, $sth);
 &connect_db();

 $ret .= "<DL>";
 foreach my $cmdname (sort keys %ljcon::cmd) 
 {
     my $cmd = $ljcon::cmd{$cmdname};
     my $args = &ehtml($cmd->{'argsummary'});
     $ret .= "<DT><P><TABLE WIDTH=100% CELLPADDING=2><TR><TD BGCOLOR=#D0D0D0><TT><B>$cmdname</B> $args</TT></TD></TR></TABLE>";
     $ret .= "<DD><P>$cmd->{'des'}";
     if ($cmd->{'args'}) {
	 my @des = @{$cmd->{'args'}};
	 $ret .= "<P><DL>";
	 while (my ($arg, $des) = splice(@des, 0, 2)) {
	     $ret .= "<DT><B><I>$arg</I></B><DD>$des";
	 }
	 $ret .= "</DL>";
     }
 }
 $ret .= "</DL>";
 return $ret;
 


_CODE=)

</BODY></HTML>
