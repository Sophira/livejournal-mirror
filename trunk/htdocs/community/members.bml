<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    return LJ::server_down_html() if $LJ::SERVER_DOWN;

    # always have links at top
    my $ret = BML::ml('Backlink', {
        'link' => '/community/manage.bml',
        'text' => $ML{'.manage2'},
    });

    # get remote
    my $remote = LJ::get_remote();
    unless ($remote) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'error.noremote'} p?>";
        return $ret;
    }

    my $cname = $GET{'comm'};
    return BML::redirect("$LJ::SITEROOT/community/manage.bml") unless $cname;

    # get $c object
    my $c = LJ::load_user($cname);
    unless ($c) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.nocomm'} p?>";
        return $ret;
    }
    my $cid = $c->{'userid'};

    # is $remote an admin?
    unless (LJ::check_rel($c, $remote, 'A')) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml('.error.noaccess', { 'comm' => LJ::ljuser($cname, { 'type' => 'C' }) }) . " p?>";
        return $ret;
    }

    my @allattribs = ('member', 'post', 'preapprove', 'moderate', 'admin');

    # saving a form submission
    if ($POST{'action:update'}) {

        my @saveattribs = split(',', $POST{'attribs'});

        # add new users
        foreach my $num (1..5) {
            next unless $POST{"add_$num"} =~ /^\w+$/ ||
                        grep { defined $POST{"add_${num}_$_"} } @saveattribs;

            my $target = LJ::load_user($POST{"add_$num"});
            next unless $target->{'journaltype'} eq 'P';
            
            # make a urlencoded arg string
            my $arg = join("&", "targetid=$target->{'userid'}",
                                map { "$_=1" }
                                grep { defined $POST{"add_${num}_$_"} }
                                @saveattribs);

            # insert authactions row
            my $aa = LJ::register_authaction($cid, 'comm_invite', $arg);
            unless ($aa) {
                $ret .= "<?h1 $ML{'Error'} h1?><?p Error registering authaction. p?>";
                return $ret;
            }

            # email recipient user to tell them about it
            my $body = "A maintainer of the $cname community has requested " .
                "that you be added to the community.  If you do not wish to be " .
                "added to $cname, just ignore this email.  However, if " .
                "you would like to join the community, please click the link " .
                "below to authorize this action.\n\n" .
                "     $LJ::SITEROOT/approve/$aa->{'aaid'}.$aa->{'authcode'}\n\n" .
                "Regards\n$LJ::SITENAME Team\n";

            LJ::send_mail({
                'to' => $target->{'email'},
                'from' => $LJ::ADMIN_EMAIL,
                'fromname' => $LJ::SITENAME,
                'charset' => 'utf-8',
                'subject' => "Community Membership: $cname",
                'body' => $body
            });

        }

        # initialize lists of users to update and delete
        # keyed on attribute type
        my %add = ();
        my %delete = ();
        foreach (@allattribs) {
            $add{$_} = {};
            $delete{$_} = {};
        }

        # need a db handle now
        my $dbh = LJ::get_db_writer();

        my @userids = split(',', $POST{'ids'});

        # if we have $other_maints, then there are maintainers not in our
        # current view, so they will not be modified, so the user can delete
        # all maintainers from the current view
        my $in = join(',', map { $dbh->quote($_) } @userids);
        my $other_maints = $dbh->selectrow_array("SELECT COUNT(*) FROM reluser " .
                                                 "WHERE userid=? AND type='A' " .
                                                 "AND targetid NOT IN ($in)",
                                                 undef, $cid);

        # users already in community
        my $maints = 0;
        foreach my $id (@userids) {
            $id = $id + 0;
            foreach (@saveattribs) {
                if ($POST{"edit_${id}_$_"}) {
                    $add{$_}->{$id} = 1;
                } else {
                    $delete{$_}->{$id} = 1;
                }
            }
            $maints++ if $add{'admin'}->{$id};
        }

        # can't remove ALL maintainers, give them an error so they can
        # go back and decide who to keep
        if (! $other_maints && $maints < 1) {
             $ret .= "<?h1 $ML{'Error'} h1?><?p Your community, " .
                     LJ::ljuser($cname, { 'type' => 'C' }) . 
                     ", must have at least one maintainer. " .
                     "Please <a href='" . BML::get_uri() . "?comm=$cname'>" .
                     "go back</a> and add a maintainer. p?>";
             return $ret;
        }
   
        # revocation of membership implies revocation of posting access    
        foreach (keys %{$delete{'member'}}) {
            $delete{'post'}->{$_} = 1;
            delete $add{'post'}->{$_};
        }

        # perform deletions
        if (%{$delete{'member'}}) {
            my $in = join(',', keys %{$delete{'member'}});
            $dbh->do("DELETE FROM friends WHERE userid=$cid AND friendid IN ($in)");
        }
        if (%{$delete{'admin'}}) {
            my $in = join(',', keys %{$delete{'admin'}});
            $dbh->do("DELETE FROM reluser WHERE userid=$cid AND type='A' AND targetid IN ($in)");
        }
        if (%{$delete{'post'}}) {
            my $in = join(',', keys %{$delete{'post'}});
            $dbh->do("DELETE FROM reluser WHERE userid=$cid AND type='P' AND targetid IN ($in)");
        }
        if (%{$delete{'moderate'}}) {
            my $in = join(',', keys %{$delete{'moderate'}}); 
            $dbh->do("DELETE FROM reluser WHERE userid=$cid AND type='M' AND targetid IN ($in)");
        }
        if (%{$delete{'preapprove'}}) {
            my $in = join(',', keys %{$delete{'preapprove'}}); 
            $dbh->do("DELETE FROM reluser WHERE userid=$cid AND type='N' AND targetid IN ($in)");
        }

        # perform additions
        if (%{$add{'member'}}) {
            my $in = join(',', map { "($cid, $_)" } keys %{$add{'member'}});
            $dbh->do("REPLACE INTO friends (userid,friendid) VALUES $in");
        }
        if (%{$add{'admin'}}) {
            my $in = join(',', map { "($cid, $_, 'A')" } keys %{$add{'admin'}});
            $dbh->do("REPLACE INTO reluser (userid,targetid,type) VALUES $in");
        }
        if (%{$add{'post'}}) {
            my $in = join(',', map { "($cid, $_, 'P')" } keys %{$add{'post'}});
            $dbh->do("REPLACE INTO reluser (userid,targetid,type) VALUES $in");
        }
        if (%{$add{'moderate'}}) {
            my $in = join(',', map { "($cid, $_, 'M')" } keys %{$add{'moderate'}});
            $dbh->do("REPLACE INTO reluser (userid,targetid,type) VALUES $in");
        }
        if (%{$add{'preapprove'}}) {
            my $in = join(',', map { "($cid, $_, 'N')" } keys %{$add{'preapprove'}});
            $dbh->do("REPLACE INTO reluser (userid,targetid,type) VALUES $in");
        }

        $ret .= "<?h1 $ML{'.success.header'} h1?><?p $ML{'.success.message'} p?>";
        $ret .= "<?p " . BML::ml(".success.return", { 'link' => BML::get_uri() . "?comm=$cname" }) . " p?>";

        return $ret;

    }

    # browsing mode

    # columns of our table, excluding username
    my @attribs = ('member', 'post');
    LJ::load_user_props($c, 'moderated');
    push @attribs, ('preapprove', 'moderate')
        if $c->{'moderated'};
    push @attribs, 'admin';

    # now get lists of: members, admins, able to post, moderators
    my %users = ();

    # need a dbr now
    my $dbr = LJ::get_db_reader();

    # get community members
    my $sth = $dbr->prepare("SELECT u.userid, u.user FROM user u, friends f WHERE u.userid=f.friendid AND f.userid=$cid");
    $sth->execute;

    while (my ($id, $user) = $sth->fetchrow_array) {
        $users{$id}->{'userid'} = $id;
        $users{$id}->{'name'} = $user;
        $users{$id}->{'member'} = 1;
    }

    my $sth = $dbr->prepare("SELECT r.targetid, r.type, u.user FROM reluser r, user u WHERE r.targetid = u.userid AND r.userid=$cid AND r.type IN ('A','P','M','N')");
    $sth->execute;

    while (my ($id, $type, $user) = $sth->fetchrow_array) {
        $users{$id}->{'userid'} = $id;
        $users{$id}->{'name'} = $user;
        my $key = {'A'=>'admin','P'=>'post','M'=>'moderate','N'=>'preapprove'}->{$type};
        $users{$id}->{$key} = 1;
    }

    # sorting method;
    my $method = $GET{'sort'};

    my $cmp = sub {$a->{'name'} cmp $b->{'name'}};
    $cmp = sub {$b->{'member'} <=> $a->{'member'}} if $method eq 'member';
    $cmp = sub {$b->{'admin'} <=> $a->{'admin'}} if $method eq 'admin';
    $cmp = sub {$b->{'post'} <=> $a->{'post'}} if $method eq 'post';
    $cmp = sub {$b->{'moderate'} <=> $a->{'moderate'}} if $method eq 'moderate';
    $cmp = sub {$b->{'preapprove'} <=> $a->{'preapprove'}} if $method eq 'preapprove';

    my @users = sort $cmp values %users;
    my $page_size = 100; # change to adjust page size

    # are we going to jump to a specific user ?
    my $jumppage;
    my $jumpuser;
    if (@users > $page_size && $POST{'jumpto'} =~ /^\w+$/) {
        my $ct;
        foreach (@users) {
            $jumppage++ if $ct % $page_size == 0;
            if ($POST{'jumpto'} eq $_->{'name'}) {
                $jumpuser = $_->{'name'};
                last;
            }
            $ct++;
        }
        undef $jumppage unless $jumpuser;
    }

    # how to make links back to this page
    my $self_link = sub {
        my $sort = "&sort=$GET{'sort'}" if $GET{'sort'};
        return "members.bml?comm=$cname&page=$_[0]$sort";
    };

    my %items = BML::paging(\@users, $jumppage || $GET{'page'}, $page_size);
    my $navbar = LJ::paging_bar($items{'page'}, $items{'pages'},
                                 { 'self_link' => $self_link });
    @users = @{$items{'items'}};

    # output starts here
    $ret .= "<?p " . BML::ml('.name', { 'name' => LJ::ljuser($cname, { 'type' => 'C' }) });
    $ret .= " " . BML::ml('.settings', { 'link' => BML::get_uri() . "?comm=$cname"}) . " p?>";

    $ret .= "<form method='post' action='members.bml?comm=$cname'>";

    # jump to user
    if ($items{'pages'} > 1) {
        $ret .= "<div style='margin-left: 30px;'>Jump to user: ";
        $ret .= LJ::html_text({ 'name' => 'jumpto', 'value' => $POST{'jumpto'},
                                'size' => '10', 'maxlength' => '15' }) . " ";
        $ret .= LJ::html_submit(undef, 'Go') . "</div>";

        $ret .= $navbar;
    }

    my $sortlink = BML::get_uri() . "?comm=$cname&sort=";
    $ret .= "<br /><div align='center'><table border='2' cellpadding='5'>\n<tr>" .
            "<td><a href='${sortlink}name'>$ML{'.key.name'}</a></td>";
    $ret .= "<td><a href='${sortlink}$_'><b>".$ML{".key.$_"}."</b></a></td>" for (@attribs);
    $ret .= "</tr>\n";

    # rows for existing users
    foreach(@users) {
        $ret .= "<tr><td>" . LJ::ljuser($_->{'name'}) . "</td>";
        foreach my $key (@attribs) {
            $ret .= "<td align='center'>";
            $ret .= LJ::html_check({ 'name' => "edit_$_->{'userid'}_$key",
                                     'selected' => $_->{$key} });
            $ret .= "</td>";
        }
        $ret .= "</tr>\n";
    }

    # if on the last page, let users add to the list
    if ($items{'page'} == $items{'pages'}) {
        foreach(1..5) {
            $ret .= "<tr><td>" . LJ::html_text({ 'name' => "add_$_", 'size' => '10',
                                                 'maxlength' => '15' }) . "</td>";
            foreach my $key (@attribs) {
                $ret .= "<td align='center'>";
                $ret .= LJ::html_check({ 'name' => "add_${_}_$key" });
                $ret .= "</td>";
            }
            $ret .= "</tr>\n";
        }
    }
    $ret .= "</table>\n";

    # some hidden values
    $ret .= LJ::html_hidden('ids', join(',', map { $_->{'userid'}} @users),
                            'attribs', join(',', @attribs)) . "\n";

    $ret .= "<p>" . LJ::html_submit('action:update', $ML{'.update'}) . "</p>\n";
    $ret .= "</form></div>\n\n";

    $ret .= $navbar;

    return $ret;

}
_code?>

<=body
page?>
