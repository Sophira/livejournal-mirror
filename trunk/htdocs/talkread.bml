(=PAGE
TITLE=>Read Comments
BODY<=

(=_CODE
#line 6

 my $PAGE_SIZE = 25;
 my $THREADING_POINT = 50;

 return LJ::server_down_html() if ($LJ::SERVER_DOWN);

 my $dbs = LJ::get_dbs();
 my $dbh = $dbs->{'dbh'};
 my $dbr = $dbs->{'reader'};

 &load_subjecticon;  # TODO: blech

 my $SELF = "/talkread.bml";
 my $ret = "";

 ## fix bug where mail clients don't understand quoted-printable encoding
 $FORM{'itemid'} =~ s/^3D//;

 ### load the log properties
 my %logprops = ();
 LJ::load_log_props($dbs, [ $FORM{'itemid'} ], \%logprops);

 my $itemid = $FORM{'itemid'}+0;
 my $qitemid = $FORM{'itemid'}+0;
 my $page = int($FORM{'page'}) || 1;
 my $thread = int($FORM{'thread'}) || 0;

 my $item;
 my @dbl = ($dbh);
 if ($dbs->{'has_slave'}) { unshift @dbl, $dbr; }
 foreach my $db (@dbl) {
     $sth = $db->prepare("SELECT replycount, ownerid, posterid, eventtime, security, allowmask, UNIX_TIMESTAMP()-UNIX_TIMESTAMP(logtime) AS 'secondsold' FROM log WHERE itemid=$qitemid");
     $sth->execute;
     $item = $sth->fetchrow_hashref;
     last if $item;
 }
 unless ($item) {
     return "(=H1 Error H1=)(=P No such entry. (itemid = $itemid) P=)";
 }
 
 # load the text of the item we just loaded (didn't join above so
 # we could use slaves (no logtext on slaves))
 {
     my $lt = LJ::get_logtext($dbs, $itemid);
     my $v = $lt->{$itemid};
     $item->{'subject'} = $v->[0];
     $item->{'event'} = $v->[1];
 }
 
 ### load users
 $sth = $dbr->prepare("SELECT * FROM user WHERE userid IN ($item->{'ownerid'}, $item->{'posterid'})");
 $sth->execute;
 my ($u, $up);
 my $quser;
 while ($_ = $sth->fetchrow_hashref) {
     if ($_->{'userid'} == $item->{'ownerid'})  { 
	 $u  = $_; 
	 $quser = $dbr->quote($u->{'user'});
     }
     if ($_->{'userid'} == $item->{'posterid'}) { $up = $_; }
 }
 LJ::load_user_props($dbs, $up, "opt_showtopicstuff");

 my $remote = LJ::get_remote($dbs);

 ## ref stuff

 ####  Check security before viewing this post
 unless (LJ::can_view($dbs, $remote, $item)) {
     return "(=H1 Error H1=)(=P You must be logged in to view this protected entry. P=)"
	 unless (defined $remote);
     return "(=H1 Error H1=)(=P You are not authorized to view this protected entry. P=)";
 }

 $event = $item->{'event'};

 LJ::expand_embedded($dbs, $itemid, $remote, \$event);
 $event = BML::ebml(LJ::CleanHTML::clean_event(\$event, $logprops{$itemid}->{'opt_preformatted'}));
 
 $ret .= "<p>";
 $ret .= "<table><tr valign='middle'>";

 my $picid = $up->{'defaultpicid'};
 if ($logprops{$itemid}->{'picture_keyword'}) {
     my $qkw = $dbr->quote($logprops{$itemid}->{'picture_keyword'});
     my $sth = $dbr->prepare("SELECT m.picid FROM userpicmap m, keywords k WHERE m.userid=$up->{'userid'} AND m.kwid=k.kwid AND k.keyword=$qkw");
     $sth->execute;
     ($picid) = $sth->fetchrow_array;
 }
 if ($picid) {
     LJ::load_userpics($dbs, \%userpics, [ $picid ]);
     my $alt = $up->{'name'};
     if ($logprops{$itemid}->{'picture_keyword'}) {
	 $alt .= ": $logprops{$itemid}->{'picture_keyword'}";
     }
     $alt = LJ::ehtml($alt);
     $ret .= "<td><img src='/userpic/$picid' width='$userpics{$picid}->{'width'}' height='$userpics{$picid}->{'height'}' align='absmiddle' hspace='3' title='$alt' alt=''></td>";
 }
 
 my $extra = "";
 if ($up->{'user'} ne $u->{'user'}) {
     $extra = " </b>(posting in (=LJUSER $u->{'user'} LJUSER=))<b>";
 }
  $ret .= "<td>";
 $ret .= "<a href='/userinfo.bml?user=$up->{'user'}'><img border='0' src='$LJ::IMGPREFIX/userinfo.gif' width='17' height='17' align='absmiddle'></a>";
 $ret .= "<b><a href='$LJ::SITEROOT/users/$up->{'user'}/'>" . &BML::eall($up->{'name'}) . "</a> ";

 $ret .= "$extra said...</b>";

 my $etime = $item->{'eventtime'};
 $etime =~ s!(\d\d\d\d)-(\d\d)-(\d\d)!LJ::date_to_view_links($u, $&)!e;
 $ret .= "<br /><font size='-1'>@ $etime</font>";
 $ret .= "</td></tr></table>";

 ## standout bar
 {
     my @linkele;
     push @linkele, "<a href='/go.bml?itemid=$itemid&dir=prev'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/btn_prev.gif' width='22' height='20' alt='Previous Entry' title='Previous Entry' border='0'></a>";
     $ret .= "<link href='/go.bml?itemid=$itemid&amp;dir=prev' rel='Previous'>\n";     
     
     push @linkele, "<a href='/tools/memadd.bml?itemid=$itemid'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/memadd.gif' width='22' height='20' alt='Add to memories!' title='Add to memories!' border='0'></a>";

     if (defined $remote && ($remote->{'user'} eq $u->{'user'} ||
			     $remote->{'user'} eq $up->{'user'} ||
			     LJ::check_priv($dbs, $remote, "sharedjournal", $u->{'user'})))
     {
	 push @linkele, "<a href='/editjournal_do.bml?itemid=$itemid'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/btn_edit.gif' width='22' height='20' alt='Edit Entry' title='Edit Entry' border='0'></a>";
     }

     if ($up->{'opt_showtopicstuff'} ne "N") {
	 push @linkele, "<a href='/topics/additem.bml?itemid=$itemid'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/topic_add.gif' width='22' height='20' title='Add to Topic Directory' alt='Add to Topic Directory' border='0'></a>";
     }

     push @linkele, "<a href='/tools/tellafriend.bml?itemid=$itemid'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/btn_tellfriend.gif' width='22' height='20' alt='Tell a Friend!' title='Tell a Friend!' border='0'></a>";

     push @linkele, "<a href='/go.bml?itemid=$itemid&dir=next'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/btn_next.gif' width='22' height='20' alt='Next Entry' title='Next Entry' border='0'></a>";	
     $ret .= "<link href='/go.bml?itemid=$itemid&amp;dir=next' rel='Next'>\n";

     if (@linkele) {
	 $ret .="(=STANDOUT ";
	 $ret .= join("&nbsp;&nbsp;", @linkele);
	 $ret .= " STANDOUT=)";
     }
 }

 ## dump the log entry, unless we're browsing a thread.
 unless ($thread)
 {
     my %current;
     if ($logprops{$itemid}->{'current_mood'} || $logprops{$itemid}->{'current_moodid'}) {
	 LJ::load_moods($dbs);
	 $current{'Mood'} = $logprops{$itemid}->{'current_mood'};
	 my $mid = $logprops{$itemid}->{'current_moodid'};
	 if ($mid) {
	     my $theme = $up->{'moodthemeid'};
  	     LJ::load_mood_theme($dbs, $theme);
	     my %pic;
	     if (LJ::get_mood_picture($theme, $mid, \%pic)) {
		 $current{'Mood'} = "<img src='$pic{'pic'}' align='absmiddle' width='$pic{'w'}' height='$pic{'h'}' vspace='1'> $LJ::CACHE_MOODS{$mid}->{'name'}";
	     } else {
		 $current{'Mood'} = $LJ::CACHE_MOODS{$mid}->{'name'};
	     }
	 }
     }
     if ($logprops{$itemid}->{'current_music'}) {
	 $current{'Music'} = $logprops{$itemid}->{'current_music'};
     }

     $ret .= "<ul>"; # using <ul> for intenting isn't proper, but this will all go away in s2 anyway.

     ### currents
     if (%current) {
	 $ret .= "<table border=0>\n";
	 foreach (sort keys %current) {
	     $ret .= "<tr><td align=right><b>Current $_:</b></td><td>$current{$_}</td></tr>\n";
	 }
	 $ret .= "</table><p>\n";
     }

     ###
     if ($item->{'subject'}) {
	 my $subject = $item->{'subject'};
       LJ::CleanHTML::clean_subject(\$subject);
	 $ret .= "<font face='Arial,Helvetica' size='+1'><i><b>$subject</b></i></font><br />\n";
     }

     $ret .= $event;
     $ret .= "</ul>";
 }


 $ret .= "<br clear='all' /><hr width='100%' size='2' align='center' />";
 ### is this in a topic?
 {
     my $cache = {};
     my $in_topic = 0;

     $sth = $dbr->prepare("SELECT tptopid, status FROM topic_map WHERE itemid=$qitemid");
     $sth->execute;
     while (my $mape = $sth->fetchrow_hashref)
     {
	 next unless ($mape->{'status'} eq "on");
	 unless ($in_topic) {
	     $in_topic = 1;
	     $ret .= "<b>Read similar journal entries:</b><br />";
	 }
	 
	 # TODO: LJ::Topic isn't yet $dbs/$dbarg aware
	 my @hier = LJ::Topic::get_hierarchy($dbh, { 'topid' => $mape->{'tptopid'} });
	 $ret .= "<b>";
	 $ret .= join(" : ", map { "<a href='$_->{'url'}'>$_->{'name'}</a>"; } @hier);
	 $ret .= "</b><br /><hr />";
	 
     }
 }
 ### /topic

 my %users_to_load;
 my @posts_to_load;
 my %posts;
 my %children;
 
 # TODO: FIXME: shouldn't use master here... but tricky not to.
 $sth = $dbh->prepare("SELECT t.talkid, t.posterid, u.user AS 'userpost', t.datepost, t.parenttalkid, tt.subject, t.state FROM talk t, talktext tt LEFT JOIN useridmap u ON u.userid=t.posterid WHERE t.nodetype='L' AND t.nodeid=$qitemid AND t.talkid=tt.talkid ORDER BY t.talkid");
 $sth->execute;
 my $post_count = 0;
 while (my $post = $sth->fetchrow_hashref) {
     $post_count++ unless ($post->{'state'} eq "D");
     $posts{$post->{'talkid'}} = $post;
     push @{$children{$post->{'parenttalkid'}}}, $post->{'talkid'};
 }	
 
 ## temporary:
 if ($item->{'replycount'} > $post_count) {
     # something messed?
     LJ::query_buffer_flush($dbh, "log");
     
     my $qpc = $post_count + 0;
     $dbh->do("UPDATE log SET replycount=$qpc WHERE itemid=$qitemid");
 }

 if ($post_count < $THREADING_POINT) {
     $PAGE_SIZE = $THREADING_POINT;
 }
 
 my $top_replies = $thread ? 1 : @{$children{$thread}};
 my $pages = int($top_replies / $PAGE_SIZE);
 if ($top_replies % $PAGE_SIZE) { $pages++; }

 my @top_replies = $thread ? ($thread) : sort { $post{$a}->{'datepost'} cmp $post{$b}->{'datepost'} } @{$children{$thread}};
 foreach (@top_replies) {  $posts{$_}->{'_hide'} = 1; }
 my $itemfirst = $PAGE_SIZE * ($page-1) + 1;
 my $itemlast = $page==$pages ? $top_replies : ($PAGE_SIZE * $page);

 @top_replies = @top_replies[$itemfirst-1 .. $itemlast-1];

 foreach (@top_replies) {  delete $posts{$_}->{'_hide'} }

 push @posts_to_load, @top_replies;
 if (@posts_to_load < $PAGE_SIZE) {
     # then let's show some more!
     my @check_for_children = @posts_to_load;
     while (@check_for_children && @posts_to_load < $PAGE_SIZE) 
     {
	 my $cfc = shift @check_for_children;
	 next unless (defined $children{$cfc});
	 foreach my $child (sort { $posts{$a}->{'datepost'} cmp $posts{$b}->{'datepost'} } @{$children{$cfc}}) {
	     last unless (@posts_to_load < $PAGE_SIZE);
	     push @check_for_children, $child;
	     push @posts_to_load, $child;
	 }
     }
 }
 
 unless (@posts_to_load) {
     $ret .= "No replies";
 }
 my $talkid_in = join(",", @posts_to_load);

 ### loads more of some of the posts, uses slaves if possible.
 my $posts_loaded = LJ::get_talktext($dbs, @posts_to_load);
 foreach my $talkid (keys %{$posts_loaded}) {
     $posts{$talkid}->{'body'} = $posts_loaded->{$talkid}->[1];
     $posts{$talkid}->{'_loaded'} = 1;
     $users_to_load{$posts{$talkid}->{'posterid'}} = 1;
 }

 ### load meta-data
 $sth = $dbr->prepare("SELECT tp.talkid, tpl.name, tp.value FROM talkproplist tpl, talkprop tp WHERE tp.talkid IN ($talkid_in) AND tp.tpropid=tpl.tpropid");
 $sth->execute;
 while (my ($id, $name, $value) = $sth->fetchrow_array) {
     $posts{$id}->{$name} = $value;
 }

 foreach my $talkid (sort { $a <=> $b } keys %posts)
 {
     $_ = $posts{$talkid};
     next if ($_->{'_hide'});

     if ($_->{'state'} eq "D") {
	 $_->{'subject'} = "[deleted]";
     }
     elsif ($_->{'state'} eq "A") {
	 # if the message isn't deleted, flag its parent(s) as
	 # having children to recurse into later.
	 my $par = $_->{'parenttalkid'};
	 while ($par) {
	     $posts{$par}->{'_haschildren'}++;
	     $par = $posts{$par}->{'parenttalkid'};
	 }

	 unless ($user{$_->{'userpost'}}) {
	     $user{$_->{'userpost'}} = {};
	     if ($_->{'_loaded'}) {
		 $users_to_load{$_->{'posterid'}} = 1;
	     }
	 }
     }
 }
 
 my %userpics = ();
 if (%users_to_load) {
     my @pics_to_load;
     my $userid_in = join(", ", keys %users_to_load);
     $sth = $dbr->prepare("SELECT user, statusvis, email, name, defaultpicid FROM user WHERE userid IN ($userid_in)");
     $sth->execute;
     push @pics_to_load;
     while ($_ = $sth->fetchrow_hashref) {
	 $user{$_->{'user'}} = $_;
	 push @pics_to_load, $_->{'defaultpicid'};
     }
     LJ::load_userpics($dbs, \%userpics, [ @pics_to_load ]);     
 }

 ########## make the navcrap
 my $navcrap;
 if ($pages > 1) {
     $navcrap .= "(=STANDOUT <center><font face='Arial,Helvetica' size='-1'><b>";
     $navcrap .= "Page $page of $pages<br />";
     my $left = "<b>&lt;&lt;</b>";
     if ($page > 1) { $left = "<a href='" . LJ::self_link(\%FORM, { 'page' => $page-1 }) . "'>$left</a>"; }
     my $right = "<b>&gt;&gt;</b>";
     if ($page < $pages) { $right = "<a href='" . LJ::self_link(\%FORM, { 'page' => $page+1 }) . "'>$right</a>"; }
     $navcrap .= $left . " ";
     for (my $i=1; $i<=$pages; $i++) {
	 my $link = "[$i]";
	 if ($i != $page) { $link = "<a href='" . LJ::self_link(\%FORM, { 'page' => $i }) . "'>$link</a>"; }
	 else { $link = "<font size='+1'><b>$link</b></font>"; }
	 $navcrap .= "$link ";
     }
     $navcrap .= "$right";
     $navcrap .= "</font></center> STANDOUT=)\n";
 }
 ####### end navcrap

 if ($navcrap) {
     $ret .= "<p>$navcrap</p>";
 }

 unless ($logprops{$itemid}->{'opt_nocomments'} or $u->{'opt_showtalklinks'} eq "N") {
     $ret .= "<center><b><a href='talkpost.bml?itemid=$itemid'>(Post a new comment)</a></b></center>";

     if ($post_count > 0) 
     {
	 &recurse_post(\%posts, \$ret, $thread, {}, { "newfirst" => 0, 
						      "children" => \%children,  
						  });
	 $ret .= "<p><hr /><center><b><a href='talkpost.bml?itemid=$itemid'>(Post a new comment)</a></b></center></p>";
     }
	 
     if ($navcrap) {
	 $ret .= "<p>$navcrap</p>";
     }
 }

sub recurse_post
{
    my ($postref, $ret, $tid, $mark, $opts) = @_;
    # don't let people make circular references
    return if ($mark->{$tid});
    $mark->{$tid} = 1;
    
    my $bgcolor = ($opts->{'depth'} % 2) ? "(=EMCOLORLITE=)" : "(=EMCOLOR=)";

    # find child messages (replys to $tid)
    my @childs = sort { $postref->{$a}->{'datepost'} cmp $postref->{$b}->{'datepost'} }
    grep { ($postref->{$_}->{'state'} ne "D" || $postref->{$_}->{'_haschildren'}) }
    @{$opts->{'children'}->{$tid}};

    #$$ret .= "<p>recurse_post($tid): children=(@childs)\n";

    return unless ($tid || @childs);

    my $post = $postref->{$tid};

    # display new or old first?
    if ($opts->{'newfirst'}) { @childs = reverse @childs; }

    if ($tid) 
    {
	my $datepost = "<font size='-1'>" . substr($post->{'datepost'}, 0, 16) . "</font>";
	my $userpost = $post->{'userpost'};
	my $user = "<i>(Anonymous)</i>";
		

	if ($post->{'state'} eq "D") {
	    $$ret .= "<p><a name='t$tid'></a><table><tr>";
	    $$ret .= "<td><img src='$LJ::IMGPREFIX/dot.gif' height='1' width='" . ($opts->{'depth'} * 25) . "'></td>";
	    $$ret .= "<td><b>(Deleted post)</b></td></tr></table>\n";
	} elsif ($userpost && $user{$userpost}->{'statusvis'} eq "S") {
	    $$ret .= "<p><a name='t$tid'></a><table><tr>";
	    $$ret .= "<td><img src='$LJ::IMGPREFIX/dot.gif' height='1' width='" . ($opts->{'depth'} * 25) . "'></td>";
	    $$ret .= "<td><b>(Reply from suspended user)</b></td></tr></table>\n";
	} else {
	    if ($userpost) {
		$user = "(=LJUSER $userpost LJUSER=)";
	    }
	    my $icon = &show_image($post->{'subjecticon'});

	    if ($post->{'_loaded'}) {
		$$ret .= "<p><a name='t$tid'></a><table width='100%'><tr>";
		$$ret .= "<td rowspan='2'><img src='$LJ::IMGPREFIX/dot.gif' height='1' width='" . ($opts->{'depth'} * 25) . "'></td>";
		$$ret .= "<td bgcolor='$bgcolor' width='100%'>";
		if ($userpost) {
		    my $picid = $user{$userpost}->{'defaultpicid'};
		    my $pickw = $post->{'picture_keyword'};
		    if ($pickw) {
			$picid = $user{$userpost}->{'_pictures'}->{$pickw};
			unless ($picid) {
			    my $qkw = $dbr->quote($pickw);
			    my $sth = $dbr->prepare("SELECT m.picid FROM userpicmap m, keywords k WHERE m.userid=$post->{'posterid'} AND m.kwid=k.kwid AND k.keyword=$qkw");
			    $sth->execute;
			    my ($alt_picid) = $sth->fetchrow_array;
			    if ($alt_picid) {
				LJ::load_userpics($dbs, \%userpics, [ $alt_picid ]);
				$picid = $alt_picid;
			    }
			}
		    }
		    $picid ||= $user{$userpost}->{'defaultpicid'};
		    if ($picid) {
			my $alt = $user{$userpost}->{'name'};
			if ($post->{'picture_keyword'}) {
			    $alt .= ": $post->{'picture_keyword'}";
			}
			$alt = LJ::ehtml($alt);

			$$ret .= "<img align='left' hspace='3' src='/userpic/$picid'";
			$$ret .= " width='$userpics{$picid}->{'width'}'";
			$$ret .= " title='$alt' ALT='";
			$$ret .= " height='$userpics{$picid}->{'height'}'>";
		    }
		}
		
		my $cleansubject = $post->{'subject'};
		LJ::CleanHTML::clean_subject(\$cleansubject);

		$$ret .= "<font size='+1' face='Arial,Helvetica'><b>$cleansubject</b></font> $icon";
		$$ret .= "<br />$user\n";
		$$ret .= "<br />$datepost\n";
		if ($post->{'poster_ip'} && $remote && $remote->{'user'} eq $up->{'user'}) {
		    $$ret .= "(from $post->{'poster_ip'})";
		}
		$$ret .= " <font size='-1'>(<a href='$SELF?itemid=$itemid&amp;thread=$tid#t$tid'>link</a>)</font> ";
		
		if ($remote && ($remote->{'user'} eq $userpost ||
				$remote->{'user'} eq $u->{'user'} ||
			        LJ::check_priv($dbs, $remote, "sharedjournal", $u->{'user'})))
		{
		    $$ret .= "<a href='delcomment.bml?id=$tid'><img align='absmiddle' hspace='2' vspace='2' src='$LJ::IMGPREFIX/delcomment.gif' width='22' height='20' title='Click to delete' alt='Delete' border='0'></a>";
		}
	    
		$$ret .= "</td></tr>";
		$$ret .= "<tr><td>\n";
		
		## escape BML block codes.  so (=TAG ... TAG=) turns into (&#0061; ... TAG=)
		$post->{'body'} =~ s/\(=/\(&\#0061\;/g;
		LJ::CleanHTML::clean_comment(\$post->{'body'}, $post->{'opt_preformatted'});
		$$ret .= $post->{'body'};
		
		$$ret .= "<p><font size='-2'>";
		if ($post->{'parenttalkid'} != 0 && $post_count >= $PAGE_SIZE) {
		    $$ret .= "<a href='$SELF?itemid=$itemid&amp;thread=$post->{'parenttalkid'}'>(Parent)</a> ";
		}
		if (defined $opts->{'children'}->{$tid} && $post_count >= $PAGE_SIZE) {
		    $$ret .= "<a href='$SELF?itemid=$itemid&amp;thread=$tid'>(Thread)</a> ";
		}
		$$ret .= "<a href='/talkpost.bml?replyto=$tid'>(Reply to this)</a></font>";
		$$ret .= "</td></tr></table>\n";  # close colored table
	    } else {
		# link to message
		$$ret .= "<a name='t$tid'></a><table><tr>";
		$$ret .= "<td><img src='$LJ::IMGPREFIX/dot.gif' height='1' width='" . ($opts->{'depth'} * 25) . "'></td>";
		$$ret .= "<td><a href='$SELF?itemid=$itemid&amp;thread=$tid'>" . BML::eall($post->{'subject'} || "(no subject)") . "</a> - $user, <i>$post->{'datepost'}</i></td></tr></table>\n";
	    }
	}
    }

    if (@childs) 
    {
	my $count;
	# go through children and show them too.
	foreach my $id (@childs) {
	    next if ($postref->{$id}->{'_hide'});
	    &recurse_post($postref, $ret, $id, $mark, { "depth" => $opts->{'depth'} + ($tid ? 1 : 0),
							"children" => $opts->{'children'},							    
							});
	}
    } else {
#	$$ret .= "No sub-posts.";
    }
}

LJ::strip_bad_code(\$ret);
return $ret;

_CODE=)
<=BODY
PAGE=)(=_C <LJDEP>
link: htdocs/userinfo.bml, htdocs/go.bml, htdocs/tools/memadd.bml, htdocs/editjournal_do.bml, htdocs/topics/additem.bml
link: htdocs/tools/tellafriend.bml, htdocs/talkpost.bml, htdocs/talkread.bml, htdocs/delcomment.bml
img: htdocs/img/btn_prev.gif, htdocs/img/memadd.gif, htdocs/img/btn_edit.gif, htdocs/img/topic_add.gif, htdocs/img/btn_tellafriend.gif
img: htdocs/img/btn_next.gif, htdocs/img/dot.gif, htdocs/img/delcomment.gif
</LJDEP> _C=)

