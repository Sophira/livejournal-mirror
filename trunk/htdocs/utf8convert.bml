(=_CODE

 $title = "UTF-8 Conversion Page";
 $body = "";

 my @areanames = ('personal','interests','keywords','memories','polls','styles');

 my %areas = ('personal'=>{
                  'des'=>'Personal Information: name, biography, friend groups\' names',
                  'browse'=>'browse_personals',
                  'save'=>'save_personals',
              },

              'interests'=>{
                  'des'=>'Personal information: interests',
                  'browse'=>'browse_interests',
                  'save'=>'save_interests',
              },

              'keywords'=>{
                  'des'=>'Picture keywords',
                  'browse'=>'browse_pickwd',
                  'save'=>'save_pickwd',
              },

              'memories'=>{
                  'des'=>'Text of memory descriptions',
                  'browse'=>'browse_memories',
                  'save'=>'save_memories',
              },

              'polls'=>{
                  'des'=>'Text of questions/answers for polls you created',
                  'browse'=>'browse_polls',
                  'save'=>'save_polls',
              },

              'styles'=>{
                  'des'=>'Text of styles and overrides belonging to you',
                  'browse'=>'browse_styles',
                  'save'=>'save_styles',
              },
             );


 my $dbs = LJ::get_dbs();

 unless ($LJ::UNICODE) {
     $body .= "(=H1 Not Supported H1=)(=P This installation of LiveJournal does not support Unicode and therefore visiting this page is useless. P=)";
     return;
 }

 my $remote = LJ::get_remote($dbs);
 unless ($remote) {
     $body .= "(=H1 Login first H1=)(=P To convert existing information to UTF-8 you must first <a href=\"/login.bml?ret=1\">login</a>. P=)";
     return;
 }

 LJ::load_remote($dbs, $remote);
 # avva, kinda improper usage of load_codes, but works i guess -brad
 LJ::load_codes($dbs, { "encname" => \%LJ::CACHE_ENCNAMES } )
     unless %LJ::CACHE_ENCNAMES;
 LJ::load_codes($dbs, { "encoding" => \%LJ::CACHE_ENCODINGS } )
     unless %LJ::CACHE_ENCODINGS;

 # check arguments. There are three: mode, area, encid
 my $mode = $FORM{'mode'};
 my $area = $FORM{'area'};
 my $encid = $FORM{'encid'} + 0;

 $mode = 'overview' unless defined $mode;
 if ( ($mode =~ m/^save.*/) && !$encid) {
     $body .= "(=H1 Encoding not defined H1=)(=P Cannot save converted data without encoding information. P=)";
     return;
 }

 if ($mode eq 'overview') {
     $body .= "(=H1 What is this page for? H1=)(=P This page is useful to those users who have maintained their journals since before LiveJournal switched to Unicode. LiveJournal's switch to Unicode means that all information that users submit to LiveJournal, including their entries, comments, bios, interests, etc. - all of this is stored internally in the UTF-8 encoding of the Unicode standard, which allows multiple languages and scripts to coexist within the same text. P=)";
     $body .= "(=P However, the switch to Unicode also means that all prior information already stored in the database that is not in pure ASCII form must be augmented with information about the encoding it was submitted in. This information is known to the user who wrote that data - you - but not LiveJournal. P=)";
     $body .= "(=P Entries and comments, which form the bulk of information stored inside LiveJournal's databases, are converted to UTF-8 on-the-fly using encoding information that you specify on the <a href=\"editinfo.bml\"><b>Personal Info</b></a> page. However, various types of miscellaneous information, such as picture keywords, your name, names of your friend groups, your interests, etc. must be explicitly converted. And this is the purpose of this page. P=)";
     $body .= "(=P <b>If your journal is written in English, you always use English for communication in LiveJournal and never use even accent symbols of other West European languages, you do not need to use this page.</b> P=)";

     $body .= "(=HR=)";
     if ($remote->{'oldenc'}) {
         $body .= "(=H1 Mass Conversion H1=)(=P We detect that you have defined the \"old encoding\" value of <b>$LJ::CACHE_ENCNAMES{$remote->{'oldenc'}}</b> on your personal info page. You can choose to mass-convert all your miscellaneous information to UTF-8 under the assumption that it is all stored in this encoding. <b>Do not</b> choose this option if you might have used some other encoding in the past (anywhere besides your entries and comments) while using LiveJournal. If you are not sure, use the <b>Conversion by Area</b> option below. P=)";

         $body .= "(=P <form method='post' action='utf8convert.bml'>\n";
         $body .= "<input type=hidden name=mode value='saveall'>\n";
         $body .= "<input type=hidden name=encid value='" . $remote->{'oldenc'} . "'>\n";
         $body .= "<input type=submit value='Yes, mass-convert all my information!'>";
         $body .= "</form> P=)(=HR=)";
     }

     $body .= "(=H1 Conversion by Area H1=)(=P We have defined several areas of information that you might have stored in the past in non-ASCII encodings, and which therefore needs to be converted. You may visit each area in turn and see how the information you stored looks in various encodings, then choose the correct one and convert it to UTF-8. P=)";
     $body .= "(=P Available areas are: P=)";
    
     unless ($encid) { 
         $encid = ($remote->{'oldenc'} ? $remote->{'oldenc'} : '1'); 
     };

     foreach (@areanames) {
         $body .= "(=P <b><a href=\"utf8convert.bml?mode=browse&amp;encid=$encid&amp;area=$_\">$areas{$_}->{'des'}</a></b> P=)";
     }

 }

 if ($mode eq 'browse') {
     # need to display the data in given encoding, if it is not UTF-8
     my $dbcs = LJ::get_cluster_set($remote) if $remote->{'clusterid'};
     $body .= "(=H1 Browse H1=)(=P You are browsing the area <br /><b>$areas{$area}->{'des'}</b>: P=)";
     my $browse = $areas{$area}->{'browse'};
     my ($valid, $disp) = $browse->($dbs, $dbcs, $remote, $encid);
     if ($valid && !defined($FORM{'forceview'})) {
         $body .= "(=H1 No unconverted information H1=)(=P There is no information in this area that is not valid UTF-8. Nothing needs to be done here. P=)";
         $body .= "(=P You can <b><a href=\"utf8convert.bml\">return to the area list</a></b> or <b><a href=\"utf8convert.bml?mode=browse&area=$area&encid=$encid&forceview=1\">force the information to be shown anyway</a></b>. P=)";
     } else {
         $body .= "(=H1 Information needs to be converted H1=)";
         $body .= "(=P Below your information is shown in the encoding <b>$LJ::CACHE_ENCNAMES{$encid}</b>. If it appears correct, press Save to convert and store it in the database. If some or all characters are displayed corrupted, you probably should choose another encoding from the list below and press Browse to see it displayed in that encoding. P=)";
         $body .= "(=HR=)";
         $body .= $disp;
         $body .= "(=HR=)";

         $body .= "(=H1 Save H1=)(=P <form method='post' action='utf8convert.bml'>\n";
         $body .= "<input type=hidden name=mode value='save'>\n";
         $body .= "<input type=hidden name=area value=$area>\n";
         $body .= "<input type=hidden name=encid value='$encid'>\n";
         $body .= "<input type=submit value='Yes, save this text as in this encoding.'>";
         $body .= "</form> P=)";

         $body .= "(=H1 Choose Another H1=)(=P <form method='post' action='utf8convert.bml'>\n";
         $body .= "<input type=hidden name=mode value='browse'>\n";
         $body .= "<input type=hidden name=area value=$area>\n";
         $body .= LJ::html_select({'name'=>'encid', 'selected'=>$encid}, %LJ::CACHE_ENCNAMES);
         $body .= "<input type=submit value='Browse in different encoding.'>";
         $body .= "</form> P=)";

         $body .= "(=P You can also <b><a href=\"utf8convert.bml\">go back to the area list</a></b>. P=)";

     };
 }


 if ($mode eq 'save') {
     $body .= "(=H1 Save H1=)(=P You chose to save the area P=)<p align=center><b>$areas{$area}->{'des'}</b></p>(=P with the encoding value <b>$LJ::CACHE_ENCNAMES{$encid}</b>. P=)";
     $body .= "(=P What this means, precisely, is that all text in that area which is not already in the UTF-8 format will be converted to UTF-8 under the assumption that currently it is stored in the encoding <b>$LJ::CACHE_ENCNAMES{$encid}</b> (the technical name of which is <b>$LJ::CACHE_ENCODINGS{$encid}</b>). If you chose a wrong encoding, the text will display incorrectly after the conversion. P=)";
     $body .= "(=P Are you sure you want to proceed with this operation? P=)";
     
     $body .= "(=P <form method='post' action='utf8convert.bml'>\n";
     $body .= "<input type=hidden name=mode value='save_do'>\n";
     $body .= "<input type=hidden name=area value=$area>\n";
     $body .= "<input type=hidden name=encid value='$encid'>\n";
     $body .= "<input type=submit value='Yes, proceed to save.'>";
     $body .= "</form>";
     $body .= "<form method='post' action='utf8convert.bml'>\n";
     $body .= "<input type=submit value='No, go back to the area list.'>";
     $body .= "</form> P=)";
 }

 if ($mode eq 'saveall') {
     $body .= "(=H1 Save All H1=)(=P You chose to save all the miscellaneous information available with the encoding value <b>$LJ::CACHE_ENCNAMES{$encid}</b>. P=)";
     $body .= "(=P What this means, precisely, is that all text you have ever submitted to LiveJournal, except actual entries and comments, that is not already in the UTF-8 format will be converted to UTF-8 under the assumption that currently it is stored in the encoding <b>$LJ::CACHE_ENCNAMES{$encid}</b> (the technical name of which is <b>$LJ::CACHE_ENCODINGS{$encid}</b>). If you chose a wrong encoding, the text will display incorrectly after the conversion. P=)";
     $body .= "(=P Are you sure you want to proceed with this operation? P=)";
     $body .= "(=P <form method='post' action='utf8convert.bml'>\n";
     $body .= "<input type=hidden name=mode value='saveall_do'>\n";
     $body .= "<input type=hidden name=area value=$area>\n";
     $body .= "<input type=hidden name=encid value='$encid'>\n";
     $body .= "<input type=submit value='Yes, proceed to save.'>";
     $body .= "</form>";
     $body .= "<form method='post' action='utf8convert.bml'>\n";
     $body .= "<input type=submit value='No, go back to the area list.'>";
     $body .= "</form> P=)";
 }

 if ($mode eq 'save_do') {
     my $dbcs = LJ::get_cluster_set($remote) if $remote->{'clusterid'};
     $body .= "(=H1 Saving H1=)(=P Attempting to convert the area <br /><b>$areas{$area}->{'des'}</b>... P=)";
     my $save = $areas{$area}->{'save'};
     my ($success, $message) = $save->($dbs, $dbcs, $remote, $encid);
     if ($success) {
         $body .= "(=H1 Success H1=)(=P Converted successfully. P=)";
         $body .= $message;
     } else {
         $body .= "(=H1 Error H1=)(=P There was an error during the conversion. $message P=)";
     }
 }

 if ($mode eq 'saveall_do') {
     my $dbcs = LJ::get_cluster_set($remote) if $remote->{'clusterid'};
     $body .= "(=H1 Saving H1=)(=P Attempting to convert everything... P=)";
     foreach (@areanames) {
         $body .= "(=P Trying to convert <b>$areas{$_}->{'des'}</b>... P=)";
         my $save = $areas{$_}->{'save'};
         my ($success, $message) = $save->($dbs, $dbcs, $remote, $encid);
         if ($success) {
             $body .= "(=H1 Success H1=)(=P Converted successfully. P=)";
             $body .= $message;
         } else {
             $body .= "(=H1 Error H1=)(=P There was an error during the conversion. $message P=)";
         }
     }
 }

  return;

 sub browse_personals {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $db = $dbcs || $dbs;  # AVVA: what? -brad
     my $dbr = $dbs->{'reader'};
     my $ret = "";
     my ($name, $bio, $groups);

     LJ::load_user_props($dbr, $u, qw(url urlname));
     $name = $u->{'name'};
     if ($u->{'has_bio'} eq "Y") {
         ($bio) = LJ::dbs_selectrow_array($db, "SELECT bio FROM userbio WHERE userid=$u->{'userid'}");
     };
     $groups = "";
     $sth = $dbr->prepare("SELECT groupname FROM friendgroup WHERE userid=$u->{'userid'}");
     $sth->execute;
     while (($_) = $sth->fetchrow_array) {
         $groups .= $_ . ' ';
     };

     my $valid = LJ::is_utf8($name . ' ' . $u->{'url'} . ' ' . $u->{'urlname'} . ' ' . $bio . ' ' . $groups);

     convert(\$name, $encid);
     convert(\$u->{'url'}, $encid);
     convert(\$u->{'urlname'}, $encid);
     convert(\$bio, $encid) if $bio;
     convert(\$groups, $encid);

     $ret = "<b>Name:</b> $name<br />";
     $ret .= "<b>Website URL:</b> $u->{'url'}<br />";
     $ret .= "<b>URL name:</b> $u->{'urlname'}<br />";
     $ret .= "<b>Bio:</b> $bio<br />" if $bio;
     $ret .= "<b>Names of friend groups:</b> $groups<br />";
     return $valid, $ret;
 }

 sub browse_interests {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $ret = "";
     my $interests = "";
     my $sth = $dbh->prepare("SELECT i.interest FROM interests i, userinterests ui WHERE i.intid=ui.intid AND ui.userid=$u->{'userid'}");
     $sth->execute;
     while(($_) = $sth->fetchrow_array) {
         $interests .= $_ . ' ';
     }

     my $valid = LJ::is_utf8($interests);

     convert(\$interests, $encid);

     $ret = "<b>Interests:</b> $interests<br />";
     return $valid, $ret;
 }

 sub browse_pickwd {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $ret = "";
     my $kwds = "";
     my $sth = $dbh->prepare("SELECT k.keyword FROM keywords k, userpicmap up WHERE k.kwid=up.kwid AND up.userid=$u->{'userid'}");
     $sth->execute;
     while(($_) = $sth->fetchrow_array) {
         $kwds .= $_ . ' ';
     }

     my $valid = LJ::is_utf8($kwds);

     convert(\$kwds, $encid);

     $ret = "<b>Picture keywords:</b> $kwds<br />";
     return $valid, $ret;
 }

 sub browse_polls {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $sth;
     my $ret = "";
     my $valid = 1;

     # first get some of the pollids of this user
     my @pollids;
     $sth = $dbr->prepare("SELECT pollid FROM poll WHERE posterid=$u->{'userid'} ".
                          "LIMIT 50");
     $sth->execute;
     while (my ($pid) = $sth->fetchrow_array) {
         push @pollids, $pid;
     }
     unless (@pollids) {
         $ret .= "You have no polls defined.";
         return 1, $ret;
     }
     my $pids = join(',', @pollids);

     my @strings; my $limit = 5; my $nlimit = 10;
     $sth = $dbr->prepare("SELECT name FROM poll WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($name) = $sth->fetchrow_array) {
         push @strings, $name if LJ::is_utf8($name) and --$limit >=0;
         push @strings, $name if !LJ::is_utf8($name) and --$nlimit >=0;
         $valid = 0 unless LJ::is_utf8($name);
     }
     $ret .= "(=P <b>Sample poll names:</b> P=)(=P ";
     foreach (@strings) { convert(\$_, $encid); $ret .= $_ . "<br />"; }
     $ret .= "P=)";

     $limit = 5; $nlimit = 10; @strings = ();
     $sth = $dbr->prepare("SELECT qtext FROM pollquestion WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($question) = $sth->fetchrow_array) {
         push @strings, $question if LJ::is_utf8($question) and --$limit >=0;
         push @strings, $question if !LJ::is_utf8($question) and --$nlimit >=0;
         $valid = 0 unless LJ::is_utf8($question);
     }
     $ret .= "(=P <b>Sample poll questions:</b> P=)(=P ";
     foreach (@strings) { convert(\$_, $encid); $ret .= $_ . "<br />"; }
     $ret .= "P=)";

     $limit = 5; $nlimit = 10; @strings = ();
     $sth = $dbr->prepare("SELECT item FROM pollitem WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($item) = $sth->fetchrow_array) {
         push @strings, $item if LJ::is_utf8($item) and --$limit >=0;
         push @strings, $item if !LJ::is_utf8($item) and --$nlimit >=0;
         $valid = 0 unless LJ::is_utf8($item);
     }
     $ret .= "(=P <b>Sample poll answer choices:</b> P=)(=P ";
     foreach (@strings) { convert(\$_, $encid); $ret .= $_ . "<br />"; }
     $ret .= "P=)";

     $limit = 5; $nlimit = 10; @strings = ();
     $sth = $dbr->prepare("SELECT value FROM pollresult WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($res) = $sth->fetchrow_array) {
         push @strings, $res if LJ::is_utf8($res) and --$limit >=0;
         push @strings, $res if !LJ::is_utf8($res) and --$nlimit >=0;
         $valid = 0 unless LJ::is_utf8($res);
     }
     $ret .= "(=P <b>Sample poll answers:</b> P=)(=P ";
     foreach (@strings) { convert(\$_, $encid); $ret .= $_ . "<br />"; }
     $ret .= "P=)";

     return $valid, $ret;
 }

 sub browse_styles {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbr = $dbs->{'reader'};
     my $ret = "";
     my $anystyles = 0;
     my $valid = 1;

     my $quser = $dbr->quote($u->{'user'});

     my $sth = $dbr->prepare("SELECT styleid, styledes, formatdata FROM style WHERE user=$quser");
     $sth->execute;
     while (my ($styleid, $styledes, $fdata) = $sth->fetchrow_array) {
         $anystyles = 1;
         $valid = 0 unless LJ::is_utf8($styledes) && LJ::is_utf8($fdata);
         my $utfdata = LJ::is_utf8($fdata);
         convert(\$styledes, $encid);
         convert(\$fdata, $encid);

         $ret .= "(=P <b>Style number:</b> $styleid<br />";
         $ret .= "<b>Description:</b> $styledes<br />";
         if ($utfdata) {
             $ret .= "<b>Format data:</b> valid UTF-8<br />";
         } else {
             $ret .= "<b>Format data:</b> contains non-Unicode characters (too large to display)<br />";
         }
         $ret .= "P=)";
     }
     unless ($anystyles) { $ret .= "(=P You have no styles defined. P=)"; }
    
     my ($overrides) = LJ::dbs_selectrow_array($dbs, "SELECT override FROM overrides WHERE user=$quser");
     if ($overrides) {
         $valid = 0 unless LJ::is_utf8($overrides);
         convert(\$overrides, $encid);
         $ret .= "(=P Overrides: P=)";
         $ret .= "(=P $overrides P=)";
     } else { $ret .= "(=P You have no overrides defined. P=)"; }

     return $valid, $ret;
 }

 sub browse_memories {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $ret = "";
     my $valid = 1;

     $ret .= "(=P Keywords used in memories: P=)(=P ";
     my $sth = $dbr->prepare("SELECT DISTINCT k.keyword FROM keywords k, memkeyword mk, memorable m WHERE k.kwid=mk.kwid AND mk.memid=m.memid AND m.userid=$u->{'userid'}");
     $sth->execute;
     while (my ($kw) = $sth->fetchrow_array) {
         $valid = 0 unless LJ::is_utf8($kw);
         convert(\$kw, $encid);
         $ret .= $kw . ' ';
     }
     $ret .= " P=)";
     $ret .= "(=P Sample of memory decriptions: P=)(=P ";
     $sth = $dbr->prepare("SELECT des FROM memorable WHERE userid=$u->{'userid'}");
     $sth->execute;
     my $limit = 15;
     while (my ($des) = $sth->fetchrow_array) {
         $valid = 0 unless LJ::is_utf8($des);
         convert(\$des, $encid);
         $ret .= $des . "<br />" if --$limit >= 0;
     }
     $ret .= " P=)";
     
     return $valid, $ret;
 }

     



 sub save_personals {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $db = $dbcs || $dbs;  # AVVA: what? -brad
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $success = 1;
     my $message = "";
     my $sth;

     my ($name, $bio, $groups);
     my $userid = $u->{'userid'};

     # convert name
     $name = $u->{'name'};
     unless (LJ::is_utf8($name)) {
         convert(\$name, $encid);
         my $qname = $dbh->quote($name);
         $dbh->do("UPDATE user SET name=$qname WHERE userid=$userid");
         if ($dbh->err) {
             return 0, "Database error: $dbh->errstr";
         }
         $message .= "(=P Converted the name. P=)";
     }

     # convert url/urlname
     LJ::load_user_props($dbr, $u, qw(url urlname));
     foreach my $prop (qw(url urlname)) {
         unless(LJ::is_utf8($u->{$prop})) {
             convert(\$u->{$prop}, $encid);
             LJ::set_userprop($dbs, $u->{'userid'}, $prop, $u->{$prop});
             $message .= "(=P Converted userprop: $prop . P=)";
         }
     }
     
     # convert bio
     if ($u->{'has_bio'} eq "Y") {
         ($bio) = LJ::dbs_selectrow_array($db, "SELECT bio FROM userbio WHERE userid=$userid");
         unless (LJ::is_utf8($bio)) {
             convert(\$bio, $encid);
             my $dbbio = $db->{'dbh'};
             my $qbio = $dbbio->quote($bio);
             $dbbio->do("UPDATE userbio SET bio=$qbio WHERE userid=$userid");
             if ($dbh->err) {
                 return 0, "Database error: $dbh->errstr";
             }
             $message .= "(=P Converted the bio. P=)";
         }
     }

     # convert groups
     $groups = {};
     $sth = $dbh->prepare("SELECT groupnum, groupname FROM friendgroup WHERE userid=$userid ORDER BY sortorder");
     $sth->execute;
     if ($dbh->err) {
         return 0, "Database error: $dbh->errstr";
     }

     while ($_ = $sth->fetchrow_hashref) {
         $groups->{$_->{'groupnum'}} = $_->{'groupname'};
     }

     my $converted_groups = 0;

     foreach(keys %$groups) {
         unless(LJ::is_utf8($groups->{$_})) {
             my $name = $groups->{$_};
             convert(\$name, $encid);
             my $qname = $dbh->quote($name);
             $dbh->do("UPDATE friendgroup SET groupname=$qname WHERE userid=$userid AND groupnum=$_");
             if ($dbh->err) {
                 return 0, "Database error: $dbh->errstr";
             }
             $converted_groups = 1;
         }
     }
     if ($converted_groups) {
         $message .= "(=P Converted friend groups. P=)";
     }

     return $success, $message;
 }

 sub save_interests {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $success = 1;
     my $message = "";
     my $sth;

     # this is basically a ripoff from editinfo.bml
     # TODO: abstract into 
     # LJ::change_interests($dbs, $u, $newinterests)
     # or something like that
     
     $sth = $dbr->prepare("SELECT i.interest, i.intid FROM interests i, userinterests ui WHERE i.intid=ui.intid AND ui.userid=$u->{'userid'}");
     $sth->execute;
     my %interests = ();
     while ($_ = $sth->fetchrow_hashref) {
         $interests{$_->{'interest'}} = $_->{'intid'};
     }
     my @ints;
     my $changed = 0;
     foreach(keys %interests) {
         unless (LJ::is_utf8($_)) {
             convert(\$_, $encid);
             $changed = 1;
         }
         push @ints, $_;
     }
     if ($changed) {
         LJ::set_interests($dbs, $u->{'userid'}, \%interests, \@ints);
     }

     $message = "Converted interests" if $changed;

     return 1, $message;
 } 

 sub save_pickwd {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $success = 1;
     my $message = "";
     my $sth;
     my $userid = $u->{'userid'};

     my %kwds;

     my $sth = $dbr->prepare("SELECT k.keyword, k.kwid FROM keywords k, userpicmap up WHERE k.kwid=up.kwid AND up.userid=$userid");
     $sth->execute;
     while($_ = $sth->fetchrow_hashref) {
         $kwds{$_->{'keyword'}} = $_->{'kwid'};
     }
     my $changed = 0;
     foreach my $keyword (keys %kwds) {
         next if LJ::is_utf8($keyword);
         $changed = 1;
         my $kw = $keyword;
         convert(\$kw, $encid);
         my $newid = LJ::get_keyword_id($dbs, $kw);
         $dbh->do("UPDATE userpicmap SET kwid=$newid WHERE userid=$userid AND kwid=$kwds{$keyword}");
     }
     if ($changed) {
         $message = "(=P Converted picture keywords. P=)";
     }
     return 1, $message;
 }

 sub save_polls {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $success = 1;
     my $message = "";
     my $sth;
     my $changed = 0;

     # convert poll names
     my @pollids;
     $sth = $dbr->prepare("SELECT pollid, name FROM poll WHERE posterid=$u->{'userid'}");
     $sth->execute;
     while (my ($pid,$name) = $sth->fetchrow_array) {
         push @pollids, $pid;
         next if LJ::is_utf8($name);
         convert(\$name, $encid);
         my $qname = $dbh->quote($name);
         $dbh->do("UPDATE poll SET name=$qname WHERE pollid=$pid");
         $changed = 1;
     }
     if ($changed) {
         $message .= "(=P Converted poll names. P=)";
     }

     my $pids = join(',', @pollids);

     # convert poll questions
     $changed = 0;
     $sth = $dbr->prepare("SELECT pollid, pollqid, qtext FROM pollquestion WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($pid, $pqid, $text) = $sth->fetchrow_array) {
         next if LJ::is_utf8($text);
         convert(\$text, $encid);
         my $qtext = $dbh->quote($text);
         $dbh->do("UPDATE pollquestion SET qtext=$qtext WHERE pollid=$pid AND pollqid=$pqid");
         $changed = 1;
     }
     if ($changed) {
         $message .= "(=P Converted poll questions. P=)";
     }

     # convert poll items
     $changed = 0;
     $sth = $dbr->prepare("SELECT pollid, pollqid, pollitid, item FROM pollitem WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($pid, $pqid, $pitid, $item) = $sth->fetchrow_array) {
         next if LJ::is_utf8($item);
         convert(\$item, $encid);
         my $qitem = $dbh->quote($item);
         $dbh->do("UPDATE pollitem SET item=$qitem WHERE pollid=$pid AND pollqid=$pqid AND pollitid=$pitid");
         $changed = 1;
     }
     if ($changed) {
         $message .= "(=P Converted poll items. P=)";
     }

     # convert poll results
     $changed = 0;
     $sth = $dbr->prepare("SELECT pollid, pollqid, userid, value FROM pollresult WHERE pollid IN ($pids)");
     $sth->execute;
     while (my ($pid, $pqid, $userid, $res) = $sth->fetchrow_array) {
         next if LJ::is_utf8($res);
         convert(\$res, $encid);
         my $qres = $dbh->quote($res);
         $dbh->do("UPDATE pollresult SET value=$qres WHERE pollid=$pid AND pollqid=$pqid AND userid=$userid");
         $changed = 1;
     }
     if ($changed) {
         $message .= "(=P Converted poll results. P=)";
     }

     return 1, $message;

 }

 sub save_styles {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $success = 1;
     my $message = "";
     my $sth;
     my $changed = 0;

     my $quser = $dbr->quote($u->{'user'});

     my $sth = $dbr->prepare("SELECT styleid, styledes, formatdata FROM style WHERE user=$quser");
     $sth->execute;
     while (my ($styleid, $styledes, $fdata) = $sth->fetchrow_array) { 
         next if LJ::is_utf8($styledes) && LJ::is_utf8($fdata);
         convert(\$styledes, $encid);
         convert(\$fdata, $encid);
         my $newdes = $dbh->quote($styledes);
         my $newdata = $dbh->quote($fdata);
         $dbh->do("UPDATE style SET styledes=$newdes, formatdata=$newdata WHERE styleid=$styleid");
         $changed =1;
     }
     if ($changed) {
         $message .= "(=P Converted styles. P=)";
     }

     my ($overrides) = LJ::dbs_selectrow_array($dbs, "SELECT override FROM overrides WHERE user=$quser");
     if ($overrides && !LJ::is_utf8($overrides)) {
         convert(\$overrides, $encid);
         my $qoverrides = $dbh->quote($overrides);
         $dbh->do("UPDATE overrides SET override=$qoverrides WHERE user=$quser");
         $message .= "(=P Converted overrides. P=)";
     }
     
     return 1, $message;
 }

 sub save_memories {
     my ($dbs, $dbcs, $u, $encid) = @_;
     my $dbh = $dbs->{'dbh'};
     my $dbr = $dbs->{'reader'};
     my $success = 1;
     my $message = "";
     my $changed = 0;
     my $userid = $u->{'userid'};

     my $sth = $dbr->prepare("SELECT DISTINCT k.keyword, k.kwid FROM keywords k, memkeyword mk, memorable m WHERE k.kwid=mk.kwid AND mk.memid=m.memid AND m.userid=$u->{'userid'}");
     $sth->execute;
     my %kwds;
     while (my ($keyword, $kwid) = $sth->fetchrow_array) {
         $kwds{$keyword} = $kwid;
     }
     foreach my $keyword (keys %kwds) {
         next if LJ::is_utf8($keyword);
         $changed = 1;
         my $kw = $keyword;
         convert(\$kw, $encid);
         my $newid = LJ::get_keyword_id($dbs, $kw);
         $dbh->do("UPDATE memkeyword SET kwid=$newid WHERE kwid=$kwds{$keyword}");
     }
     if ($changed) {
         $message .= "(=P Converted memory keywords. P=)";
     }

     # now the memory descriptions
     $changed = 0;
     $sth = $dbr->prepare("SELECT memid, des FROM memorable WHERE userid=$u->{'userid'}");
     $sth->execute;
     while (my ($memid, $des) = $sth->fetchrow_array) {
         next if LJ::is_utf8($des);
         $changed = 1;
         convert(\$des, $encid);
         my $qdes = $dbh->quote($des);
         $dbh->do("UPDATE memorable SET des=$qdes WHERE memid=$memid");
     }
     if ($changed) {
         $message .= "(=P Converted memory descriptions. P=)";
     }
     
     return 1, $message;
 }


 sub convert {
     my ($rtext, $encid) = @_;
     if ($encid && !LJ::is_utf8($$rtext)) {
         my $enc = $LJ::CACHE_ENCODINGS{$encid};
         unless (lc($enc) eq "utf-8") {
             $$rtext = Unicode::MapUTF8::to_utf8({-string=>$$rtext, -charset=>$enc});
         }
         LJ::text_out($rtext);
     }
 }

_CODE=)(=PAGE
TITLE=>(=_CODE return $title; _CODE=)
BODY=>(=_CODE return $body; _CODE=)
PAGE=)
