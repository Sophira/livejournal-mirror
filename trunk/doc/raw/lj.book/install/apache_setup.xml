<chapter id="lj.install.apache_setup">
  <chapterinfo>
    <title>Apache Configuration</title>
  </chapterinfo>
  <title>Apache Configuration</title>
  <formalpara>
    <title>mod_perl</title>
    <para>
      LiveJournal in the past has been server API agnostic, working on
      either FastCGI or mod_perl, but we've dropped FastCGI support.
      There's really no need.  So, you'll need mod_perl ... it's
      everywhere and well supported, and you might already have it on
      your machine.
    </para>
    <para>
      A word of caution, though:  using the dynamically linked mod_perl
      isn't stable, and I don't think it ever has been.  You'll want
      mod_perl statically linked in with your Apache binary.  In Debian,
      the package that provides this is <literal>apache-perl</literal>.
    </para>
  </formalpara>
  <formalpara>
    <title>Apache suEXEC Support</title>
    <para>
      If you want the LiveJournal code to run as a user other than
      what your webserver runs as, then you'll need suEXEC<footnote
      id="suEXEC"><para><ulink
      url="http://httpd.apache.org/docs/suexec.html">Official Apache
      suEXEC documentation</ulink></para></footnote> support in
      Apache.  You're free to figure that out yourself.  We'll assume
      your webserver is running as user <literal>lj</literal>, though it doesn't have
      to run as any certain user to work.
    </para>
    <para>
      In fact, the LiveJournal code never writes to disk, so as long
      as it can write to the database (which is essential, obviously),
      you can run the code as any user, including
      <literal>nobody</literal> or <literal>www-data</literal>, both
      of which are common in out-of-the-box configurations.
    </para>
  </formalpara>
  <formalpara>
    <title>Virtual Hosts</title>
    <para>
      You can run the LiveJournal code inside or outside of a
      <literal>&lt;VirtualHost&gt;</literal> section in Apache's
      <literal>httpd.conf</literal> file.  However, make note that you
      can't (yet) have two VirtualHosts running parallel copies of the
      code.  In the future we'll fix that, but for now if you really
      need two installations on the same machine, you'll need to run
      two sets of Apache processes, listening on different ports.
    </para>
  </formalpara>

  <section id="lj.install.apache_setup.example">
    <title>Example <literal>httpd.conf</literal></title>
    <programlisting><![CDATA[ServerType standalone
ServerRoot "/etc/apache-perl"
PidFile /var/run/apache-perl.pid
ScoreBoardFile /var/run/apache-perl.scoreboard
Timeout 30
KeepAlive Off

MinSpareServers 5
MaxSpareServers 40
StartServers 10
MaxClients 20
MaxRequestsPerChild 500

LoadModule mime_module        /usr/lib/apache/1.3/mod_mime.so
LoadModule autoindex_module   /usr/lib/apache/1.3/mod_autoindex.so
LoadModule dir_module         /usr/lib/apache/1.3/mod_dir.so

Port 80
User lj
Group lj

SendBufferSize 131072

ServerName   www.livejournal.com
PerlSetEnv   LJHOME /home/lj
PerlRequire  /home/lj/cgi-bin/modperl.pl
]]></programlisting>
    <note>
    <para>
      This will work by itself (assuming mod_perl statically linked),
      or you can just tack on parts to your existing config.
    </para>
      <para><filename>/home/lj</filename> is only an example directory. You'll want to use the same directory used in <xref linkend="ljhome_var" />.</para>
    <para>
      If you'd like, you can put those last three lines in a VirtualHost block.
    </para>
    </note>
  </section>
</chapter>