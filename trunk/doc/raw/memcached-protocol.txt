Description of the memcache protocol as implemented by the
way-too-slow bin/memcached.pl:


Setting keys
------------
A client can set a key in the dictionary cache with the set command:

INPUT:

  set <key> <flags> <exptime> <bytes> <data><\n>

    key: one or more non-whitespace character
    flags: one or more non-whitespace character; "-" for no flags.
    exptime: 
       "0" for no expiration.
       any other number (in decimal) for unix time item expires
    bytes: number of octets of upcoming data, after the space.
    \n:  newline character to end the command

OUTPUT:

  "STORED\n"
  
     (on success)

  "CLIENT_ERROR too much data ($bytes_read, not $bytes_expecting)\n"

     (when too much data)

Getting keys:
-------------

The protocol supports getting multiple keys at a time.  The client
sends them all space-delimited and the server ends back what it has,
followed by "END\n":

INPUT:

   get <key>[ <key>]*<\n>

OUTPUT:

   VALUE <key> <flags> <length> <data><\n>
   ...
   ...
   ...
   END

   flags: is "-" if no flags.


Server Version
--------------

INPUT:

   version<\n>

OUTPUT:

   VERSION 2.0<\n>

(not important... mostly an 'echo' command to see if the server's working.
not used by client libraries.)


Stats
-----
Not used by the client API, but critical for performance tuning and ensuring things
are working correctly:

INPUT:

    stats<\n>

OUTPUT:

    STAT items <itemcount><\n>
    STAT bytes <bytecount><\n>
    STAT age <unix_time_of_oldest_item><\n>
    STAT hit <hits><\n>
    STAT miss <misses><\n>
    STAT cmd_get <get_cmd_count><\n>
    STAT cmd_set <set_cmd_count><\n>
    ...
    END<\n>


To reset stats that can be reset:

INPUT:

   stats reset<\n>

OUTPUT:

   RESET<\n>


Cache walking.
--------------

To see what keys are in the cache:

INPUT:

   stats cachedump[ <limit>]<\n>

OUTPUT:

   ITEM <key> "["<bytes> b; <age> s"]"<\n>
   ...
   END

Items are listed from head (most recently accessed) to tail.
Optionally <limit> decimal limits results to first 'n'.


Misc:
-----

Response to empty lines:  nothing.

Response to all other lines:  ERROR<\n>

Server command-line options:

   --MB=<n>      limit size of cache, default 5 MB.
   --port=<n>    listen on 0.0.0.0:<port>, no default.

Description of cache:

   O(1), LRU, constraints on number of bytes per item payload,
   even though metadata will take up more.

   See the recent $LJHOME/cgi-bin/LJ/Cache.pm for an implementation
   you can copy easily into C.


Please, use epoll:

   http://www.xmailserver.org/linux-patches/nio-improve.html
   http://lse.sourceforge.net/epoll/

Also, glib would be nice, since I know it enough to maintain this later, if need be.

For testing, LJ's MemCache.pm works standalone:

$ cat test.pl
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
#!/usr/bin/perl
#

use lib "$ENV{'LJHOME'}/cgi-bin";
use LJ::MemCache;

@LJ::MEMCACHE_SERVERS = ( ["10.0.0.80:11211", 2],
                          ["10.0.0.80:11212", 3], );

LJ::MemCache::set("barzj", [ "one", "two", { 'hash' => "value" }]);
LJ::MemCache::set(1, "one");
LJ::MemCache::set(2, ["two", 2]);
LJ::MemCache::set(3, {"three" => 3});
foreach (4..20) {
    LJ::MemCache::set($_, $_);
}

my $v = LJ::MemCache::get_multi(1..20);
use Data::Dumper;
print Dumper($v);

$v = LJ::MemCache::get(3);
print Dumper($v);
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
