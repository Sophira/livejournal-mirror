<reference id="ljp.api.ref">
  <title>API Documentation</title>
  <refentry id="ljp.api.lj.acct_code_check">
    <refnamediv>
      <refname>LJ::acct_code_check</refname>
      <refpurpose>Checks the validity of a given account code</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::acct_code_check</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>code</parameter></paramdef>
          <paramdef><parameter>err</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>code</title>
          <para>account code to check</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>err</title>
          <para>optional scalar ref to put error message into on failure</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>optional userid which is allowed in the rcptid field, to allow for htdocs/create.bml case when people double click the submit button.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 0 on failure, 1 on validity. sets $$err on failure.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.acct_code_decode">
    <refnamediv>
      <refname>LJ::acct_code_decode</refname>
      <refpurpose>Breaks an account code down into its two parts</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::acct_code_decode</function></funcdef>
          <paramdef><parameter>code</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>code</title>
          <para>12 digit account code</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>list of (account ID, auth code)</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.acct_code_encode">
    <refnamediv>
      <refname>LJ::acct_code_encode</refname>
      <refpurpose>Given an account ID integer and a 5 digit auth code, returns a 12 digit account code.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::acct_code_encode</function></funcdef>
          <paramdef><parameter>acid</parameter></paramdef>
          <paramdef><parameter>auth</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>acid</title>
          <para>account ID, a 4 byte unsigned integer</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>auth</title>
          <para>5 random characters from base 30 alphabet.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>12 digit account code.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.acct_code_generate">
    <refnamediv>
      <refname>LJ::acct_code_generate</refname>
      <refpurpose>Creates an invitation code from an optional userid for use by anybody.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::acct_code_generate</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>Userid to make the invitation code from, else the code will be from userid 0 (system)</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Account/Invite code.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.acid_decode">
    <refnamediv>
      <refname>LJ::acid_decode</refname>
      <refpurpose>Given an acid encoding from <link linkend='ljp.api.lj.acid_encode'>LJ::acid_encode</link>, returns the original decimal number.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::acid_decode</function></funcdef>
          <paramdef><parameter>acid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>acid</title>
          <para>base 30 number from <link linkend='ljp.api.lj.acid_encode'>LJ::acid_encode</link>.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Integer.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.acid_encode">
    <refnamediv>
      <refname>LJ::acid_encode</refname>
      <refpurpose>Given a decimal number, returns base 30 encoding using an alphabet of letters &amp; numbers that are not easily mistaken for each other.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::acid_encode</function></funcdef>
          <paramdef><parameter>number</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>number</title>
          <para>Number to encode in base 30.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Base 30 encoding, alwyas 7 characters long.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.add_friend">
    <refnamediv>
      <refname>LJ::add_friend</refname>
      <refpurpose>Simple interface to add a friend edge.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::add_friend</function></funcdef>
          <paramdef><parameter>dbh</parameter></paramdef>
          <paramdef><parameter>userida</parameter></paramdef>
          <paramdef><parameter>useridb</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbh</title>
          <para>Master database handle.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userida</title>
          <para>Userid of source user (befriender)</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>useridb</title>
          <para>Userid of target user (befriendee)</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 on success (or already friend), 0 on failure (bogus args)</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.ago_text">
    <refnamediv>
      <refname>LJ::ago_text</refname>
      <refpurpose>Converts integer seconds to English time span</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::ago_text</function></funcdef>
          <paramdef><parameter>secondsold</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>secondsold</title>
          <para>The number of seconds from now something was made.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Turns a number of seconds into the largest possible unit of time. "2 weeks", "4 days", or "20 hours".</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>A string with the number of largest units found</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.alldateparts_to_hash">
    <refnamediv>
      <refname>LJ::alldateparts_to_hash</refname>
      <refpurpose>Given a date/time format from MySQL, breaks it into a hash.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::alldateparts_to_hash</function></funcdef>
          <paramdef><parameter>alldatepart</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>alldatepart</title>
          <para>The output of the MySQL function DATE_FORMAT(sometime, "%a %W %b %M %y %Y %c %m %e %d %D %p %i %l %h %k %H")</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>This is used by S1.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Hash (whole, not reference), with keys: dayshort, daylong, monshort, monlong, yy, yyyy, m, mm, d, dd, dth, ap, AP, ampm, AMPM, min, 12h, 12hh, 24h, 24hh</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.are_hooks">
    <refnamediv>
      <refname>LJ::are_hooks</refname>
      <refpurpose>Returns true if the site has one or more hooks installed for the given hookname.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::are_hooks</function></funcdef>
          <paramdef><parameter>hookname</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>hookname</title>
          <para>Name of hook. See doc/hooks.txt.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.auth_fields">
    <refnamediv>
      <refname>LJ::auth_fields</refname>
      <refpurpose>Makes a login form.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::auth_fields</function></funcdef>
          <paramdef><parameter>form</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>form</title>
          <para>The hash of form information, which is used to determine whether to get the current login info and display a concise form, or to display a login form.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>hashref containing 'user' key to force (finds/makes the hpassword)</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Returns a form for either submitting username/password to a script or entering a new username/password.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>The built form</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.auth_fields_2">
    <refnamediv>
      <refname>LJ::auth_fields_2</refname>
      <refpurpose>Makes a login form.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::auth_fields_2</function></funcdef>
          <paramdef><parameter>form</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>form</title>
          <para>Form results from the previous page.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>Journal/password options for changing the login box.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Like [func[LJ::auth_fields]], with a lot more functionality.  Creates the HTML for a login box if user not logged in. Creates a drop-down selection box of possible journals to switch to if user is logged in.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>The resultant HTML form box.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.auth_okay">
    <refnamediv>
      <refname>LJ::auth_okay</refname>
      <refpurpose>Validates a user's password.  The "clear" or "md5" argument must be present, and either the "actual" argument (the correct password) must be set, or the first argument must be a user object ($u) with the 'password' key set.  Note that this is the preferred way to validate a password (as opposed to doing it by hand) since this function will use a pluggable authenticator if one is defined, so LiveJournal installations can be based off an LDAP server, for example.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::auth_okay</function></funcdef>
          <paramdef><parameter>user_u</parameter></paramdef>
          <paramdef><parameter>clear</parameter></paramdef>
          <paramdef><parameter>md5</parameter></paramdef>
          <paramdef><parameter>actual</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>user_u</title>
          <para>Either the user name or a user object.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>clear</title>
          <para>Clear text password the client is sending. (need this or md5)</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>md5</title>
          <para>MD5 of the password the client is sending. (need this or clear). If this value instead of clear, clear can be anything, as md5 validation will take precedence.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>actual</title>
          <para>The actual password for the user.  Ignored if a pluggable authenticator is being used.  Required unless the first argument is a user object instead of a username scalar.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 if authentication succeeded, 0 on failure</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.bad_input">
    <refnamediv>
      <refname>LJ::bad_input</refname>
      <refpurpose>Returns common BML for reporting form validation errors in a bulletted list.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::bad_input</function></funcdef>
          <paramdef><parameter>error</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>error</title>
          <para>A list of errors</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>BML showing errors.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.can_use_journal">
    <refnamediv>
      <refname>LJ::can_use_journal</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::can_use_journal</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.can_view">
    <refnamediv>
      <refname>LJ::can_view</refname>
      <refpurpose>Checks to see if the remote user can view a given journal entry. <b>Note:</b> This is meant for use on single entries at a time, not for calling many times on every entry in a journal.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::can_view</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>remote</parameter></paramdef>
          <paramdef><parameter>item</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>remote</title>
          <para>Hashref of remote user containing 'user' and 'userid' keys if obtained from <link linkend='ljp.api.lj.get_remote'>LJ::get_remote</link> or just 'user' if untrusted and obtained from <link linkend='ljp.api.lj.get_remote_noauth'>LJ::get_remote_noauth</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>item</title>
          <para>Hashref from the 'log' table.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 if remote user can see item</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.canonical_username">
    <refnamediv>
      <refname>LJ::canonical_username</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::canonical_username</function></funcdef>
          <paramdef><parameter>user</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>user</title>
          <para></para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>the canonical username given, or blank if the username is not well-formed</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.check_priv">
    <refnamediv>
      <refname>LJ::check_priv</refname>
      <refpurpose>Check to see if a user has a certain privilege.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::check_priv</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>priv</parameter></paramdef>
          <paramdef><parameter>arg</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>priv</title>
          <para>Priv name to check for (see [dbtable[priv_list]])</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>arg</title>
          <para>Optional argument.  If defined, function only returns true when $remote has a priv of type $priv also with arg $arg, not just any priv of type $priv, which is the behavior without an $arg</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Usually this is used to check the privs of a $remote user. See [func[LJ::get_remote]].  As such, a $u argument of undef is okay to pass: 0 will be returned, as an unknown user can't have any rights.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; true if user has privilege</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.clear_caches">
    <refnamediv>
      <refname>LJ::clear_caches</refname>
      <refpurpose>This function is called from a HUP signal handler and is intentionally very very simple (1 line) so we don't core dump on a system without reentrant libraries.  It just sets a flag to clear the caches at the beginning of the next request (see <link linkend='ljp.api.lj.handle_caches'>LJ::handle_caches</link>). There should be no need to ever call this function directly.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::clear_caches</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.clear_hooks">
    <refnamediv>
      <refname>LJ::clear_hooks</refname>
      <refpurpose>Removes all hooks.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::clear_hooks</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.cmd_buffer_add">
    <refnamediv>
      <refname>LJ::cmd_buffer_add</refname>
      <refpurpose>Schedules some command to be run sometime in the future which would be too slow to do syncronously with the web request.  An example is deleting a journal entry, which requires recursing through a lot of tables and deleting all the appropriate stuff.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::cmd_buffer_add</function></funcdef>
          <paramdef><parameter>db</parameter></paramdef>
          <paramdef><parameter>journalid</parameter></paramdef>
          <paramdef><parameter>cmd</parameter></paramdef>
          <paramdef><parameter>hargs</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>db</title>
          <para>Cluster master db handle to run command on.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journalid</title>
          <para>Journal id command affects.  This is indexed in the [dbtable[cmdbuffer]] table so that all of a user's queued actions can be run before that user is potentially moved between clusters.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>cmd</title>
          <para>Text of the command name.  30 chars max.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>hargs</title>
          <para>Hashref of command arguments.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.cmd_buffer_flush">
    <refnamediv>
      <refname>LJ::cmd_buffer_flush</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::cmd_buffer_flush</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.color_fromdb">
    <refnamediv>
      <refname>LJ::color_fromdb</refname>
      <refpurpose>Takes a value of unknown type from the db and returns an #rrggbb string.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::color_fromdb</function></funcdef>
          <paramdef><parameter>color</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>color</title>
          <para>either a 24-bit decimal number, or an #rrggbb string.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>scalar; #rrggbb string, or undef if unknown input format</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.color_todb">
    <refnamediv>
      <refname>LJ::color_todb</refname>
      <refpurpose>Takes an #rrggbb value and returns a 24-bit decimal number.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::color_todb</function></funcdef>
          <paramdef><parameter>color</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>color</title>
          <para>scalar; an #rrggbb string.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>undef if bogus color, else scalar; 24-bit decimal number, can be up to 8 chars wide as a string.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.create_account">
    <refnamediv>
      <refname>LJ::create_account</refname>
      <refpurpose>Creates a new basic account.  <b>Note:</b> This function is not really too useful but should be extended to be useful so htdocs/create.bml can use it, rather than doing the work itself.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::create_account</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>hashref containing keys 'user', 'name', and 'password'</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>integer of userid created, or 0 on failure.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.date_to_view_links">
    <refnamediv>
      <refname>LJ::date_to_view_links</refname>
      <refpurpose>Returns HTML of date with links to user's journal.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::date_to_view_links</function></funcdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>date</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>date</title>
          <para>date in yyyy-mm-dd form.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>HTML with yyy, mm, and dd all links to respective views.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.days_in_month">
    <refnamediv>
      <refname>LJ::days_in_month</refname>
      <refpurpose>Figures out the number of days in a month.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::days_in_month</function></funcdef>
          <paramdef><parameter>month</parameter></paramdef>
          <paramdef><parameter>year</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>month</title>
          <para>Month</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>year</title>
          <para>Year.  Necessary for February.  If undefined or zero, function will return 29.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Number of days in that month in that year.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.dbs_selectrow_array">
    <refnamediv>
      <refname>LJ::dbs_selectrow_array</refname>
      <refpurpose>Like DBI's selectrow_array, but working on a $dbs preferring the slave.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::dbs_selectrow_array</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>query</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>query</title>
          <para>The select query to run.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Given a dbset and a query, will try to query the slave first. Falls back to master if not in slave yet.  See also [func[LJ::dbs_selectrow_hashref]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>In scalar context, the first column selected.  In list context, the entire row.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.dbs_selectrow_hashref">
    <refnamediv>
      <refname>LJ::dbs_selectrow_hashref</refname>
      <refpurpose>Like DBI's selectrow_hashref, but working on a $dbs preferring the slave.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::dbs_selectrow_hashref</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>query</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>query</title>
          <para>The select query to run.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Given a dbset and a query, will try to query the slave first. Falls back to master if not in slave yet.  See also [func[LJ::dbs_selectrow_array]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Hashref, or undef if no row found in either slave or master.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.debug">
    <refnamediv>
      <refname>LJ::debug</refname>
      <refpurpose>When $LJ::DEBUG is set, logs the given message to $LJ::VAR/debug.log.  Or, if $LJ::DEBUG is 2, then prints to STDOUT.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::debug</function></funcdef>
          <paramdef><parameter>message</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>message</title>
          <para>Message to log.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1 if logging disabled, 0 on failure to open log, 1 otherwise</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.decode_url_string">
    <refnamediv>
      <refname>LJ::decode_url_string</refname>
      <refpurpose>Parse URL-style arg/value pairs into a hash.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::decode_url_string</function></funcdef>
          <paramdef><parameter>buffer</parameter></paramdef>
          <paramdef><parameter>hashref</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>buffer</title>
          <para>Scalar or scalarref of buffer to parse.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>hashref</title>
          <para>Hashref to populate.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; true.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.delete_item">
    <refnamediv>
      <refname>LJ::delete_item</refname>
      <refpurpose>Deletes a journal item from a user's journal that resides in the old schema (cluster0).</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::delete_item</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>journalid</parameter></paramdef>
          <paramdef><parameter>itemid</parameter></paramdef>
          <paramdef><parameter>quick</parameter></paramdef>
          <paramdef><parameter>deleter</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journalid</title>
          <para>Userid of journal to delete item from.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>itemid</title>
          <para>Itemid of item to delete.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>quick</title>
          <para>Optional flag to make the delete be a little quicker when many deletes are occuring.  It just doesn't update lastitemid in [dbtable[userusage]].</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>deleter</title>
          <para>Optional code reference to run to handle a deletion.  Mass-delete tools can use this to batch deletes in table locks for speed.  Arguments to this coderef are ($tablename, $col, @ids).  The default implementation is: "DELETE FROM $table WHERE $col IN (@ids)"</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>This function is deprecated, just as the old schema is deprecated.  In a few months this function will be removed.  The new equivalent to this function is [func[LJ::delete_item2]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.delete_item2">
    <refnamediv>
      <refname>LJ::delete_item2</refname>
      <refpurpose>Deletes a user's journal item from a cluster.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::delete_item2</function></funcdef>
          <paramdef><parameter>dbh</parameter></paramdef>
          <paramdef><parameter>dbcm</parameter></paramdef>
          <paramdef><parameter>journalid</parameter></paramdef>
          <paramdef><parameter>jitemid</parameter></paramdef>
          <paramdef><parameter>quick</parameter></paramdef>
          <paramdef><parameter>anum</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbh</title>
          <para>Master database handle.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>dbcm</title>
          <para>Cluster master database handle</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journalid</title>
          <para>Journal ID item is in.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>jitemid</title>
          <para>Journal itemid of item to delete.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>quick</title>
          <para>Optional boolean.  If set, only [dbtable[log2]] table is deleted from and the rest of the content is deleted later using <link linkend='ljp.api.lj.cmd_buffer_add'>LJ::cmd_buffer_add</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>anum</title>
          <para>The log item's anum, which'll be needed to delete lazily some data in tables which includes the anum, but the log row will already be gone so we'll need to store it for later.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 on success, 0 on failure.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.delete_talkitem">
    <refnamediv>
      <refname>LJ::delete_talkitem</refname>
      <refpurpose>Deletes a comment and associated metadata.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::delete_talkitem</function></funcdef>
          <paramdef><parameter>dbcm</parameter></paramdef>
          <paramdef><parameter>journalid</parameter></paramdef>
          <paramdef><parameter>jtalkid</parameter></paramdef>
          <paramdef><parameter>light</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbcm</title>
          <para>Cluster master db to delete item from.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journalid</title>
          <para>Journalid (userid from [dbtable[user]] to delete comment from). The journal must reside on the $dbcm you provide.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>jtalkid</title>
          <para>The jtalkid of the comment.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>light</title>
          <para>boolean; if true, only mark entry as deleted, so children will thread.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>The tables [dbtable[talk2]], [dbtabke[talkprop2]], [dbtable[talktext2]], and [dbtable[dudata]] are all deleted from, immediately. Unlike [func[LJ::delete_item2]], there is no $quick flag to queue the delete for later, nor is one really necessary, since deleting from 4 tables won't be too slow.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 on success, 0 on failure.# des-dbh: Master database handle.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.delete_user">
    <refnamediv>
      <refname>LJ::delete_user</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::delete_user</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.did_post">
    <refnamediv>
      <refname>LJ::did_post</refname>
      <refpurpose>When web pages using cookie authentication, you can't just trust that the remote user wants to do the action they're requesting.  It's way too easy for people to force other people into making GET requests to a server.  What if a user requested http://server/delete_all_journal.bml and that URL checked the remote user and immediately deleted the whole journal.  Now anybody has to do is embed that address in an image tag and a lot of people's journals will be deleted without them knowing. Cookies should only show pages which make no action.  When an action is being made, check that it's a POST request.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::did_post</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>true if REQUEST_METHOD == "POST"</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.dudata_set">
    <refnamediv>
      <refname>LJ::dudata_set</refname>
      <refpurpose>Record or delete disk usage data for a journal</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::dudata_set</function></funcdef>
          <paramdef><parameter>dbcm</parameter></paramdef>
          <paramdef><parameter>journalid</parameter></paramdef>
          <paramdef><parameter>area</parameter></paramdef>
          <paramdef><parameter>areaid</parameter></paramdef>
          <paramdef><parameter>bytes</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbcm</title>
          <para>Cluster master database handle</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journalid</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>area</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>areaid</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>bytes</title>
          <para></para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.durl">
    <refnamediv>
      <refname>LJ::durl</refname>
      <refpurpose>Decodes a value that's URL-escaped.  See also <link linkend='ljp.api.lj.eurl'>LJ::eurl</link>.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::durl</function></funcdef>
          <paramdef><parameter>string</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>string</title>
          <para>string to be decoded</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>string decoded</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.eall">
    <refnamediv>
      <refname>LJ::eall</refname>
      <refpurpose>Escapes HTML and BML.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::eall</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>Text to escape.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Escaped text.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.ehtml">
    <refnamediv>
      <refname>LJ::ehtml</refname>
      <refpurpose>Escapes a value before it can be put in HTML.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::ehtml</function></funcdef>
          <paramdef><parameter>string</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>string</title>
          <para>string to be escaped</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>string escaped.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.eurl">
    <refnamediv>
      <refname>LJ::eurl</refname>
      <refpurpose>Escapes a value before it can be put in a URL.  See also <link linkend='ljp.api.lj.durl'>LJ::durl</link>.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::eurl</function></funcdef>
          <paramdef><parameter>string</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>string</title>
          <para>string to be escaped</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>string escaped</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.event_register">
    <refnamediv>
      <refname>LJ::event_register</refname>
      <refpurpose>Logs a subscribable event, if anybody's subscribed to it.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::event_register</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>dbc</parameter></paramdef>
          <paramdef><parameter>etype</parameter></paramdef>
          <paramdef><parameter>ejid</parameter></paramdef>
          <paramdef><parameter>eiarg</parameter></paramdef>
          <paramdef><parameter>duserid</parameter></paramdef>
          <paramdef><parameter>diarg</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>dbc</title>
          <para>Cluster master of event</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>etype</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>ejid</title>
          <para>Journalid event occured in.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>eiarg</title>
          <para>4 byte numeric argument</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>duserid</title>
          <para>Event doer's userid</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>diarg</title>
          <para>Event's 4 byte numeric argument</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 on success; 0 on fail.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.exml">
    <refnamediv>
      <refname>LJ::exml</refname>
      <refpurpose>Escapes a value before it can be put in XML.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::exml</function></funcdef>
          <paramdef><parameter>string</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>string</title>
          <para>string to be escaped</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>string escaped.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.expand_embedded">
    <refnamediv>
      <refname>LJ::expand_embedded</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::expand_embedded</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.fill_var_props">
    <refnamediv>
      <refname>LJ::fill_var_props</refname>
      <refpurpose>S1 utility function to interpolate %%variables%% in a variable.  If a modifier is given like %%foo:var%%, then <link linkend='ljp.api.lj.fvp_transform'>LJ::fvp_transform</link> is called.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::fill_var_props</function></funcdef>
          <paramdef><parameter>vars</parameter></paramdef>
          <paramdef><parameter>key</parameter></paramdef>
          <paramdef><parameter>hashref</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>vars</title>
          <para>hashref with keys being S1 vars</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>key</title>
          <para>the variable in the vars hashref we're expanding</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>hashref</title>
          <para>hashref of values that could interpolate.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Expanded string.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.fvp_transform">
    <refnamediv>
      <refname>LJ::fvp_transform</refname>
      <refpurpose>Called from <link linkend='ljp.api.lj.fill_var_props'>LJ::fill_var_props</link> to do trasformations.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::fvp_transform</function></funcdef>
          <paramdef><parameter>transform</parameter></paramdef>
          <paramdef><parameter>vars</parameter></paramdef>
          <paramdef><parameter>hashref</parameter></paramdef>
          <paramdef><parameter>attr</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>transform</title>
          <para>The transformation type.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>vars</title>
          <para>hashref with keys being S1 vars</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>hashref</title>
          <para>hashref of values that could interpolate. (see <link linkend='ljp.api.lj.fill_var_props'>LJ::fill_var_props</link>)</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>attr</title>
          <para>the attribute name that's being interpolated.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Transformed interpolated variable.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_cap">
    <refnamediv>
      <refname>LJ::get_cap</refname>
      <refpurpose>Given a user object or capability class bit mask and a capability/limit name, returns the maximum value allowed for given user or class, considering all the limits in each class the user is a part of.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_cap</function></funcdef>
          <paramdef><parameter>u_cap</parameter></paramdef>
          <paramdef><parameter>capname</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u_cap</title>
          <para>16 bit capability bitmask or a user object from which the bitmask could be obtained</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>capname</title>
          <para>the name of a limit, defined in doc/capabilities.txt</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_cap_min">
    <refnamediv>
      <refname>LJ::get_cap_min</refname>
      <refpurpose>Just like <link linkend='ljp.api.lj.get_cap'>LJ::get_cap</link>, but returns the minimum value. Although it might not make sense at first, some things are better when they're low, like the minimum amount of time a user might have to wait between getting updates or being allowed to refresh a page.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_cap_min</function></funcdef>
          <paramdef><parameter>u_cap</parameter></paramdef>
          <paramdef><parameter>capname</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u_cap</title>
          <para>16 bit capability bitmask or a user object from which the bitmask could be obtained</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>capname</title>
          <para>the name of a limit, defined in doc/capabilities.txt</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_cluster_master">
    <refnamediv>
      <refname>LJ::get_cluster_master</refname>
      <refpurpose>Returns a cluster master for a given user.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_cluster_master</function></funcdef>
          <paramdef><parameter>uarg</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>uarg</title>
          <para>Either a userid scalar or a user object.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>DB handle.  Or undef if master is unavailable.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_cluster_reader">
    <refnamediv>
      <refname>LJ::get_cluster_reader</refname>
      <refpurpose>Returns a cluster slave for a user, or cluster master if no slaves exist.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_cluster_reader</function></funcdef>
          <paramdef><parameter>uarg</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>uarg</title>
          <para>Either a userid scalar or a user object.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>DB handle.  Or undef if all dbs are unavailable.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_cluster_set">
    <refnamediv>
      <refname>LJ::get_cluster_set</refname>
      <refpurpose>Returns a dbset structure for a user's db clusters.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_cluster_set</function></funcdef>
          <paramdef><parameter>uarg</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>uarg</title>
          <para>Either a userid scalar or a user object.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>dbset.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_dbh">
    <refnamediv>
      <refname>LJ::get_dbh</refname>
      <refpurpose>Given one or more roles, returns a database handle.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_dbh</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_dbs">
    <refnamediv>
      <refname>LJ::get_dbs</refname>
      <refpurpose>Returns a set of database handles to master and a slave, if this site is using slave databases.  Only use this once per connection and pass around the same $dbs, since this function calls <link linkend='ljp.api.lj.get_dbh'>LJ::get_dbh</link> which uses cached connections, but validates the connection is still live.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_dbs</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>$dbs (see <link linkend='ljp.api.lj.make_dbs'>LJ::make_dbs</link>)</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_effective_user">
    <refnamediv>
      <refname>LJ::get_effective_user</refname>
      <refpurpose>Given a set of input, will return the effective user to process as.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_effective_user</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>A hash of options to pass.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Is passed a reference to a form hash, a remote hash reference, a reference to an error variable, and a reference to a user hash to possibly fill. Given the form input, it will authenticate and return the user (logged in user, a community, other user) that the remote user requested to do an action with.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>The user to process as.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_form_data">
    <refnamediv>
      <refname>LJ::get_form_data</refname>
      <refpurpose>Loads a hashref with form data from a GET or POST request.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_form_data</function></funcdef>
          <paramdef><parameter>hashref</parameter></paramdef>
          <paramdef><parameter>type</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>hashref</title>
          <para>Hashref to populate with form data.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>type</title>
          <para>If "GET", will ignore POST data.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_friend_items">
    <refnamediv>
      <refname>LJ::get_friend_items</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_friend_items</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_itemid_after">
    <refnamediv>
      <refname>LJ::get_itemid_after</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_itemid_after</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_itemid_before">
    <refnamediv>
      <refname>LJ::get_itemid_before</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_itemid_before</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_itemid_near">
    <refnamediv>
      <refname>LJ::get_itemid_near</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_itemid_near</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_keyword_id">
    <refnamediv>
      <refname>LJ::get_keyword_id</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_keyword_id</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_logtext">
    <refnamediv>
      <refname>LJ::get_logtext</refname>
      <refpurpose>Efficiently retrieves a large number of journal entry text, trying first slave database servers for recent items, then the master in cases of old items the slaves have already disposed of.  See also: <link linkend='ljp.api.lj.get_talktext'>LJ::get_talktext</link>.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_logtext</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
          <paramdef><parameter>itemid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>Optional hashref of special options.  Currently only 'prefersubjects' key is supported, which returns subjects instead of events when there's a subject, and the subject always being undef.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>itemid</title>
          <para>List of itemids to retrieve the subject &amp; text for.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref with keys being itemids, values being [ $subject, $body ]</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_logtext2">
    <refnamediv>
      <refname>LJ::get_logtext2</refname>
      <refpurpose>Efficiently retrieves a large number of journal entry text, trying first slave database servers for recent items, then the master in cases of old items the slaves have already disposed of.  See also: <link linkend='ljp.api.lj.get_talktext2'>LJ::get_talktext2</link>.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_logtext2</function></funcdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
          <paramdef><parameter>jitemid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>Optional hashref of special options.  Currently only 'prefersubjects' key is supported, which returns subjects instead of events when there's a subject, and the subject always being undef.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>jitemid</title>
          <para>List of jitemids to retrieve the subject &amp; text for.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref with keys being jitemids, values being [ $subject, $body ]</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_logtext2multi">
    <refnamediv>
      <refname>LJ::get_logtext2multi</refname>
      <refpurpose>Gets log text from clusters.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_logtext2multi</function></funcdef>
          <paramdef><parameter>idsbyc</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>idsbyc</title>
          <para>A hashref where the key is the clusterid, and the data is an arrayref of [ ownerid, itemid ] array references.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Fetches log text from clusters. Trying slaves first if available.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref with keys being "jid jitemid", values being [ $subject, $body ]</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_mood_picture">
    <refnamediv>
      <refname>LJ::get_mood_picture</refname>
      <refpurpose>Loads a mood icon hashref given a themeid and moodid.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_mood_picture</function></funcdef>
          <paramdef><parameter>themeid</parameter></paramdef>
          <paramdef><parameter>moodid</parameter></paramdef>
          <paramdef><parameter>ref</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>themeid</title>
          <para>Integer; mood themeid.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>moodid</title>
          <para>Integer; mood id.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>ref</title>
          <para>Hashref to load mood icon data into.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Boolean; 1 on success, 0 otherwise.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_newids">
    <refnamediv>
      <refname>LJ::get_newids</refname>
      <refpurpose>Lookup an old global ID and see what journal it belongs to and its new ID.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_newids</function></funcdef>
          <paramdef><parameter>area</parameter></paramdef>
          <paramdef><parameter>oldid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>area</title>
          <para>The "area" of the id.  Legal values are "L" (log), to lookup an old itemid, or "T" (talk) to lookup an old talkid.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>oldid</title>
          <para>The old globally-unique id of the item.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Interface to [dbtable[oldids]] table (URL compatability)</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Undef if non-existent or unconverted, or arrayref of [$userid, $newid].</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_prop">
    <refnamediv>
      <refname>LJ::get_prop</refname>
      <refpurpose>This is used after <link linkend='ljp.api.lj.load_props'>LJ::load_props</link> is called to retrieve a hashref of a row from the given tablename's proplist table. One difference from getting it straight from the database is that the 'id' key is always present, as a copy of the real proplist unique id for that table.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_prop</function></funcdef>
          <paramdef><parameter>table</parameter></paramdef>
          <paramdef><parameter>name</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>table</title>
          <para>the tables to get a proplist hashref from.  can be one of "log", "talk", or "user".</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>name</title>
          <para>the name of the prop to get the hashref of.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref of proplist row from db</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_query_string">
    <refnamediv>
      <refname>LJ::get_query_string</refname>
      <refpurpose>Returns the query string, which can be in a number of spots depending on the webserver &amp; configuration, sadly.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_query_string</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>String; query string.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_recent_items">
    <refnamediv>
      <refname>LJ::get_recent_items</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_recent_items</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_remote">
    <refnamediv>
      <refname>LJ::get_remote</refname>
      <refpurpose>authenticates the user at the remote end based on their cookies and returns a hashref representing them</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_remote</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>criterr</parameter></paramdef>
          <paramdef><parameter>cgi</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>criterr</title>
          <para>scalar ref to set critical error flag.  if set, caller should stop processing whatever it's doing and complain about an invalid login with a link to the logout page.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>cgi</title>
          <para>Optional CGI.pm reference if using in a script which already uses CGI.pm.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref containing 'user' and 'userid' if valid user, else undef.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_remote_noauth">
    <refnamediv>
      <refname>LJ::get_remote_noauth</refname>
      <refpurpose>returns who the remote user says they are, but doesn't check their login token.  disadvantage: insecure, only use when you're not doing anything critical.  advantage:  faster.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_remote_noauth</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref containing only key 'user', not 'userid' like <link linkend='ljp.api.lj.get_remote'>LJ::get_remote</link>.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_shared_journals">
    <refnamediv>
      <refname>LJ::get_shared_journals</refname>
      <refpurpose>Gets an array of shared journals a user has access to.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_shared_journals</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>u</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>An array of shared journals.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_talktext">
    <refnamediv>
      <refname>LJ::get_talktext</refname>
      <refpurpose>Efficiently retrieves a large number of comments, trying first slave database servers for recent items, then the master in cases of old items the slaves have already disposed of.  See also: <link linkend='ljp.api.lj.get_logtext'>LJ::get_logtext</link>.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_talktext</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
          <paramdef><parameter>talkid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>Optional hashref of flags.  Currently supported key: 'onlysubjects', which won't return body text:  $body will be undef.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>talkid</title>
          <para>List of talkids to retrieve the subject &amp; text for.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref with keys being talkids, values being [ $subject, $body ]</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_talktext2">
    <refnamediv>
      <refname>LJ::get_talktext2</refname>
      <refpurpose>Retrieves comment text. Tries slave servers first, then master.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_talktext2</function></funcdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
          <paramdef><parameter>jtalkids</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>A hashref of options. 'usermaster' will force checking of the master only.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>jtalkids</title>
          <para>A list of talkids to get text for.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Efficiently retreives batches of comment text. Will try alternate servers first. See also [func[LJ::get_logtext2]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Hashref with the talkids as keys, values being [ $subject, $event ].</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_urls">
    <refnamediv>
      <refname>LJ::get_urls</refname>
      <refpurpose>Returns a list of all referenced URLs from a string</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_urls</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>Text to extra URLs from</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>list of URLs</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_userid">
    <refnamediv>
      <refname>LJ::get_userid</refname>
      <refpurpose>Returns a userid given a username.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_userid</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>user</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>user</title>
          <para>Username whose userid to look up.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Results cached in memory.  On miss, does DB call.  Not advised to use this many times in a row... only once or twice perhaps per request.  Tons of serialized db requests, even when small, are slow.  Opposite of [func[LJ::get_username]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Userid, or 0 if invalid user.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.get_username">
    <refnamediv>
      <refname>LJ::get_username</refname>
      <refpurpose>Returns a username given a userid.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::get_username</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>user</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>user</title>
          <para>Username whose userid to look up.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Results cached in memory.  On miss, does DB call.  Not advised to use this many times in a row... only once or twice perhaps per request.  Tons of serialized db requests, even when small, are slow.  Opposite of [func[LJ::get_userid]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Userid, or 0 if invalid user.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.handle_caches">
    <refnamediv>
      <refname>LJ::handle_caches</refname>
      <refpurpose>clears caches if the CLEAR_CACHES flag is set from an earlier HUP signal that called <link linkend='ljp.api.lj.clear_caches'>LJ::clear_caches</link>, otherwise does nothing.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::handle_caches</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>true (always) so you can use it in a conjunction of statements in a while loop around the application like: while (LJ::handle_caches() &amp;&amp; FCGI::accept())</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.hash_password">
    <refnamediv>
      <refname>LJ::hash_password</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::hash_password</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.help_icon">
    <refnamediv>
      <refname>LJ::help_icon</refname>
      <refpurpose>Returns BML to show a help link/icon given a help topic, or nothing if the site hasn't defined a URL for that topic.  Optional arguments include HTML/BML to place before and after the link/icon, should it be returned.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::help_icon</function></funcdef>
          <paramdef><parameter>topic</parameter></paramdef>
          <paramdef><parameter>pre</parameter></paramdef>
          <paramdef><parameter>post</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>topic</title>
          <para>Help topic key.  See doc/ljconfig.pl.txt for examples.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>pre</title>
          <para>HTML/BML to place before the help icon.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>post</title>
          <para>HTML/BML to place after the help icon.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.html_check">
    <refnamediv>
      <refname>LJ::html_check</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::html_check</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.html_datetime">
    <refnamediv>
      <refname>LJ::html_datetime</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::html_datetime</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Info</title>
      <para>Parse output later with [func[LJ::html_datetime_decode]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.html_datetime_decode">
    <refnamediv>
      <refname>LJ::html_datetime_decode</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::html_datetime_decode</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Info</title>
      <para>Generate the form controls with [func[LJ::html_datetime]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.html_hidden">
    <refnamediv>
      <refname>LJ::html_hidden</refname>
      <refpurpose>Makes the HTML for a hidden form element</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::html_hidden</function></funcdef>
          <paramdef><parameter>name</parameter></paramdef>
          <paramdef><parameter>val</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>name</title>
          <para>Name of form element (will be HTML escaped)</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>val</title>
          <para>Value of form element (will be HTML escaped)</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>HTML</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.html_select">
    <refnamediv>
      <refname>LJ::html_select</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::html_select</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.html_text">
    <refnamediv>
      <refname>LJ::html_text</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::html_text</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.http_to_time">
    <refnamediv>
      <refname>LJ::http_to_time</refname>
      <refpurpose>Converts HTTP date to Unix time.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::http_to_time</function></funcdef>
          <paramdef><parameter>string</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>string</title>
          <para>HTTP Date.  See RFC 2616 for format.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Wrapper around HTTP::Date::str2time. See also [func[LJ::time_to_http]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>integer; Unix time.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.img">
    <refnamediv>
      <refname>LJ::img</refname>
      <refpurpose>Returns an HTML &amp;lt;img&amp;gt; or &amp;lt;input&amp;gt; tag to an named image code, which each site may define with a different image file with its own dimensions.  This prevents hard-coding filenames &amp; sizes into the source.  The real image data is stored in LJ::Img, which has default values provided in cgi-bin/imageconf.pl but can be overridden in cgi-bin/ljconfig.pl.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::img</function></funcdef>
          <paramdef><parameter>imagecode</parameter></paramdef>
          <paramdef><parameter>type</parameter></paramdef>
          <paramdef><parameter>attrs</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>imagecode</title>
          <para>The unique string key to reference the image.  Not a filename, but the purpose or location of the image.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>type</title>
          <para>By default, the tag returned is an &amp;lt;img&amp;gt; tag, but if 'type' is "input", then an input tag is returned.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>attrs</title>
          <para>Optional hashref of other attributes.  If this isn't a hashref, then it's assumed to be a scalar for the 'name' attribute for input controls.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.is_ascii">
    <refnamediv>
      <refname>LJ::is_ascii</refname>
      <refpurpose>checks if text is pure ASCII</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::is_ascii</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>text to check for being pure 7-bit ASCII text</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1 if text is indeed pure 7-bit, 0 otherwise.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.is_banned">
    <refnamediv>
      <refname>LJ::is_banned</refname>
      <refpurpose>Checks to see if a user is banned from a journal.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::is_banned</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>user</parameter></paramdef>
          <paramdef><parameter>journal</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>user</title>
          <para>User hashref or userid.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journal</title>
          <para>Journal hashref or userid.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 iff user B is banned from journal A</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.is_friend">
    <refnamediv>
      <refname>LJ::is_friend</refname>
      <refpurpose>Checks to see if a user is a friend of another user.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::is_friend</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>usera</parameter></paramdef>
          <paramdef><parameter>userb</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>usera</title>
          <para>Source user hashref or userid.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userb</title>
          <para>Destination user hashref or userid. (can be undef)</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 if user B is a friend of user A or if A == B</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.is_utf8">
    <refnamediv>
      <refname>LJ::is_utf8</refname>
      <refpurpose>check text for UTF-8 validity</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::is_utf8</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>text to check for UTF-8 validity</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1 if text is a valid UTF-8 stream, 0 otherwise.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.is_valid_authaction">
    <refnamediv>
      <refname>LJ::is_valid_authaction</refname>
      <refpurpose>Validates a shared secret (authid/authcode pair)</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::is_valid_authaction</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>aaid</parameter></paramdef>
          <paramdef><parameter>auth</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>aaid</title>
          <para>Integer; the authaction ID.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>auth</title>
          <para>String; the auth string. (random chars the client already got)</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>See [func[LJ::register_authaction]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Hashref of authaction row from database.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.item_link">
    <refnamediv>
      <refname>LJ::item_link</refname>
      <refpurpose>Returns URL to view an individual journal item.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::item_link</function></funcdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>itemid</parameter></paramdef>
          <paramdef><parameter>anum</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>itemid</title>
          <para>Itemid of entry to link to.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>anum</title>
          <para>If present, $u is assumed to be on a cluster and itemid is assumed to not be a $ditemid already, and the $itemid will be turned into one by multiplying by 256 and adding $anum.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>The returned URL may have an ampersand in it.  In an HTML/XML attribute, these must first be escaped by, say, [func[LJ::ehtml]].  This function doesn't return it pre-escaped because the caller may use it in, say, a plain-text email message.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>scalar; unescaped URL string</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.item_toutf8">
    <refnamediv>
      <refname>LJ::item_toutf8</refname>
      <refpurpose>convert one item's subject, text and props to UTF8. item can be an entry or a comment (in which cases props can be left empty, since there are no 8bit talkprops).</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::item_toutf8</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>subject</parameter></paramdef>
          <paramdef><parameter>text</parameter></paramdef>
          <paramdef><parameter>props</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>u</title>
          <para>user hashref of the journal's owner</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>subject</title>
          <para>ref to the item's subject</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>text</title>
          <para>ref to the item's text</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>props</title>
          <para>hashref of the item's props</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>nothing.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.journal_base">
    <refnamediv>
      <refname>LJ::journal_base</refname>
      <refpurpose>Returns URL of a user's journal.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::journal_base</function></funcdef>
          <paramdef><parameter>user</parameter></paramdef>
          <paramdef><parameter>vhost</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>user</title>
          <para>Username of user whose URL to make.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>vhost</title>
          <para>What type of URL.  Acceptable options are "users", to make a http://user.site.com/ URL; "tilde" to make http://site.com/~user/; "community" for http://site.com/community/user; or the default will be http://site.com/users/user</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>The tricky thing is that users with underscores in their usernames can't have some_user.site.com as a hostname, so that's changed into some-user.site.com.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>scalar; a URL.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.ljuser">
    <refnamediv>
      <refname>LJ::ljuser</refname>
      <refpurpose>Make link to userinfo/journal of user.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::ljuser</function></funcdef>
          <paramdef><parameter>user</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>user</title>
          <para>Username to link to.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>Optional hashref to control output.  Currently only recognized key is 'full' which when true causes a link to the mode=full userinfo.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Returns the HTML for an userinfo/journal link pair for a given user name, just like LJUSER does in BML.  But files like cleanhtml.pl and ljpoll.pl need to do that too, but they aren't run as BML.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>HTML with a little head image &amp; bold text link.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_codes">
    <refnamediv>
      <refname>LJ::load_codes</refname>
      <refpurpose>Populates hashrefs with lookup data from the database or from memory, if already loaded in the past.  Examples of such lookup data include state codes, country codes, color name/value mappings, etc.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_codes</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>whatwhere</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>whatwhere</title>
          <para>a hashref with keys being the code types you want to load and their associated values being hashrefs to where you want that data to be populated.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_log_props">
    <refnamediv>
      <refname>LJ::load_log_props</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_log_props</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_log_props2">
    <refnamediv>
      <refname>LJ::load_log_props2</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_log_props2</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_log_props2multi">
    <refnamediv>
      <refname>LJ::load_log_props2multi</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_log_props2multi</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_mood_theme">
    <refnamediv>
      <refname>LJ::load_mood_theme</refname>
      <refpurpose>Loads and caches a mood theme, or returns immediately if already loaded.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_mood_theme</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>themeid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>themeid</title>
          <para>the mood theme ID to load</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_moods">
    <refnamediv>
      <refname>LJ::load_moods</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_moods</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_props">
    <refnamediv>
      <refname>LJ::load_props</refname>
      <refpurpose>Loads and caches one or more of the various *proplist tables: logproplist, talkproplist, and userproplist, which describe the various meta-data that can be stored on log (journal) items, comments, and users, respectively.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_props</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>table</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>table</title>
          <para>a list of tables' proplists to load.  can be one of "log", "talk", or "user".</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_remote">
    <refnamediv>
      <refname>LJ::load_remote</refname>
      <refpurpose>Given a partial remote user hashref (from <link linkend='ljp.api.lj.get_remote'>LJ::get_remote</link>), loads in the rest, unless it's already loaded.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_remote</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>remote</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>remote</title>
          <para>Hashref containing 'user' and 'userid' keys at least.  This hashref will be populated with the rest of the 'user' table data.  If undef, does nothing.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_style_fast">
    <refnamediv>
      <refname>LJ::load_style_fast</refname>
      <refpurpose>Loads a style, and does minimal caching (data sticks for 60 seconds).</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_style_fast</function></funcdef>
          <paramdef><parameter>styleid</parameter></paramdef>
          <paramdef><parameter>dataref</parameter></paramdef>
          <paramdef><parameter>typeref</parameter></paramdef>
          <paramdef><parameter>nocache</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>styleid</title>
          <para>Numeric, primary key.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>dataref</title>
          <para>Dataref to store data in.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>typeref</title>
          <para>Optional dataref to store the style tyep in (undef for none).</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>nocache</title>
          <para>Flag to say don't cache.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Nothing. Modifies a data reference.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_talk_props">
    <refnamediv>
      <refname>LJ::load_talk_props</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_talk_props</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_talk_props2">
    <refnamediv>
      <refname>LJ::load_talk_props2</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_talk_props2</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_user">
    <refnamediv>
      <refname>LJ::load_user</refname>
      <refpurpose>Loads a user record given a username.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_user</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>user</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>user</title>
          <para>Username of user to load.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>From the [dbarg[user]] table.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Hashref with keys being columns of [dbtable[user]] table.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_user_privs">
    <refnamediv>
      <refname>LJ::load_user_privs</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_user_privs</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_user_props">
    <refnamediv>
      <refname>LJ::load_user_props</refname>
      <refpurpose>Given a user hashref, loads the values of the given named properties into that user hashref.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_user_props</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>propname</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>propname</title>
          <para>the name of a property from the userproplist table.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_user_theme">
    <refnamediv>
      <refname>LJ::load_user_theme</refname>
      <refpurpose>Populates a variable hash with color theme data.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_user_theme</function></funcdef>
          <paramdef><parameter>user</parameter></paramdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>vars</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>user</title>
          <para>The username to search for data with.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>vars</title>
          <para>A hashref to fill with color data. Adds keys "color-$coltype" with values $color.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Nothing. Modifies a hash reference.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_userid">
    <refnamediv>
      <refname>LJ::load_userid</refname>
      <refpurpose>Loads a user record given a userid.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_userid</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>Userid of user to load.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>From the [dbarg[user]] table.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Hashref with keys being columns of [dbtable[user]] table.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_userids_multiple">
    <refnamediv>
      <refname>LJ::load_userids_multiple</refname>
      <refpurpose>Loads a number of users at once, efficiently.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_userids_multiple</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>map</parameter></paramdef>
          <paramdef><parameter>have</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>map</title>
          <para>Arrayref of pairs (userid, destination scalarref)</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>have</title>
          <para>Arrayref of user objects caller already has</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>loads a few users at once, their userids given in the keys of $map listref (not hashref: can't have dups).  values of $map listref are scalar refs to put result in.  $have is an optional listref of user object caller already has, but is too lazy to sort by themselves.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Nothing.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.load_userpics">
    <refnamediv>
      <refname>LJ::load_userpics</refname>
      <refpurpose>Loads a bunch of userpic at once.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::load_userpics</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>upics</parameter></paramdef>
          <paramdef><parameter>idlist</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>upics</title>
          <para>hashref to load pictures into, keys being the picids</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>idlist</title>
          <para>arrayref of picids to load</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_auth_code">
    <refnamediv>
      <refname>LJ::make_auth_code</refname>
      <refpurpose>Makes a random string of characters of a given length.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_auth_code</function></funcdef>
          <paramdef><parameter>length</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>length</title>
          <para>length of auth code to return</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>string of random characters, from an alphabet of 30 letters &amp; numbers which aren't easily confused.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_cookie">
    <refnamediv>
      <refname>LJ::make_cookie</refname>
      <refpurpose>Prepares cookie header lines.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_cookie</function></funcdef>
          <paramdef><parameter>name</parameter></paramdef>
          <paramdef><parameter>value</parameter></paramdef>
          <paramdef><parameter>expires</parameter></paramdef>
          <paramdef><parameter>path</parameter></paramdef>
          <paramdef><parameter>domain</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>name</title>
          <para>The name of the cookie.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>value</title>
          <para>The value to set the cookie to.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>expires</title>
          <para>The time (in seconds) when the cookie is supposed to expire. Set this to 0 to expire when the browser closes. Set it to undef to delete the cookie.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>path</title>
          <para>The directory path to bind the cookie to.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>domain</title>
          <para>The domain (or domains) to bind the cookie to.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>An array of cookie lines.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_dbs">
    <refnamediv>
      <refname>LJ::make_dbs</refname>
      <refpurpose>Makes a $dbs structure from a master db handle and optionally a slave.  This function is called from <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.  You shouldn't need to call it yourself.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_dbs</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>$dbs: hashref with 'dbh' (master), 'dbr' (slave or undef), 'has_slave' (boolean) and 'reader' (dbr if defined, else dbh)</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_dbs_from_arg">
    <refnamediv>
      <refname>LJ::make_dbs_from_arg</refname>
      <refpurpose>Convert unknown arg to a dbset.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_dbs_from_arg</function></funcdef>
          <paramdef><parameter>something</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>something</title>
          <para>Either a db handle or a dbset.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Functions use this to let their callers use either db handles or dbsets.  If argument is a single handle, turns it into a dbset.  If already a dbset, just returns it unchanged.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>A dbset.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_graphviz_dot_file">
    <refnamediv>
      <refname>LJ::make_graphviz_dot_file</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_graphviz_dot_file</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_journal">
    <refnamediv>
      <refname>LJ::make_journal</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_journal</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>user</parameter></paramdef>
          <paramdef><parameter>view</parameter></paramdef>
          <paramdef><parameter>remote</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>user</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>view</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>remote</title>
          <para>Hashref of remote user containing 'user' and 'userid' keys if obtained from <link linkend='ljp.api.lj.get_remote'>LJ::get_remote</link> or just 'user' if untrusted and obtained from <link linkend='ljp.api.lj.get_remote_noauth'>LJ::get_remote_noauth</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para></para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_link">
    <refnamediv>
      <refname>LJ::make_link</refname>
      <refpurpose>Takes a group of key=value pairs to append to a url</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_link</function></funcdef>
          <paramdef><parameter>url</parameter></paramdef>
          <paramdef><parameter>vars</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>url</title>
          <para>A string with the URL to append to.  The URL shouldn't have a question mark in it.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>vars</title>
          <para>A hashref of the key=value pairs to append with.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>The finished url</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_remote">
    <refnamediv>
      <refname>LJ::make_remote</refname>
      <refpurpose>Returns a minimal user structure ($remote-like) from a username and userid.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_remote</function></funcdef>
          <paramdef><parameter>user</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>user</title>
          <para>Username.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>User ID.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>hashref with 'user' and 'userid' keys, or undef if either argument was bogus (so caller can pass untrusted input)</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_shared_select">
    <refnamediv>
      <refname>LJ::make_shared_select</refname>
      <refpurpose>Creates a list of shared journals a user has access to for insertion into a drop-down menu.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_shared_select</function></funcdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>form</parameter></paramdef>
          <paramdef><parameter>opts</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>u</title>
          <para>A hashref of a row from the user table, sometimes called a "user object".  Although only initially a row from the user table, gets a lot of tacked onto it from various other LJ API functions.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>form</title>
          <para>The form hash from the previous page.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>opts</title>
          <para>A hash of options to change the types of selections shown.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>The HTML for the options menu.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.make_text_link">
    <refnamediv>
      <refname>LJ::make_text_link</refname>
      <refpurpose>The most pathetic function of them all.  AOL's shitty mail reader interprets all incoming mail as HTML formatted, even if the content type says otherwise.  And AOL users are all too often confused by a a URL that isn't clickable, so to make it easier on them (*sigh*) this function takes a URL and an email address, and if the address is @aol.com, then this function wraps the URL in an anchor tag to its own address.  I'm sorry.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::make_text_link</function></funcdef>
          <paramdef><parameter>url</parameter></paramdef>
          <paramdef><parameter>email</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>url</title>
          <para>URL to return or wrap.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>email</title>
          <para>Email address this is going to.  If it's @aol.com, the URL will be wrapped.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>the same URL, or the URL wrapped in an anchor tag for AOLers</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.mysql_time">
    <refnamediv>
      <refname>LJ::mysql_time</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::mysql_time</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.name_caps">
    <refnamediv>
      <refname>LJ::name_caps</refname>
      <refpurpose>Given a user's capability class bit mask, returns a site-specific string representing the capability class name.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::name_caps</function></funcdef>
          <paramdef><parameter>caps</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>caps</title>
          <para>16 bit capability bitmask</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.name_caps_short">
    <refnamediv>
      <refname>LJ::name_caps_short</refname>
      <refpurpose>Given a user's capability class bit mask, returns a site-specific short string code.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::name_caps_short</function></funcdef>
          <paramdef><parameter>caps</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>caps</title>
          <para>16 bit capability bitmask</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.parse_vars">
    <refnamediv>
      <refname>LJ::parse_vars</refname>
      <refpurpose>Parses S1 style data into hashref.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::parse_vars</function></funcdef>
          <paramdef><parameter>dataref</parameter></paramdef>
          <paramdef><parameter>hashref</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dataref</title>
          <para>Reference to scalar with data to parse. Format is a BML-style full block, as used in the S1 style system.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>hashref</title>
          <para>Hashref to populate with data.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Nothing.  Modifies a hashref.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.prepare_currents">
    <refnamediv>
      <refname>LJ::prepare_currents</refname>
      <refpurpose>do all the current music/mood/weather/whatever stuff.  only used by ljviews.pl.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::prepare_currents</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>args</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>args</title>
          <para>hashref with keys: 'props' (a hashref with itemid keys), 'vars' hashref with keys being S1 variables.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.query_buffer_add">
    <refnamediv>
      <refname>LJ::query_buffer_add</refname>
      <refpurpose>Schedules an insert/update query to be run on a certain table sometime in the near future in a batch with a lot of similar updates, or immediately if the site doesn't provide query buffering.  Returns nothing (no db error code) since there's the possibility it won't run immediately anyway.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::query_buffer_add</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>table</parameter></paramdef>
          <paramdef><parameter>query</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>table</title>
          <para>Table to modify.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>query</title>
          <para>Query that'll update table.  The query <b>must not</b> access any table other than that one, since the update is done inside an explicit table lock for performance.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.query_buffer_flush">
    <refnamediv>
      <refname>LJ::query_buffer_flush</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::query_buffer_flush</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.record_meme">
    <refnamediv>
      <refname>LJ::record_meme</refname>
      <refpurpose>Records a URL reference from a journal entry to the meme table.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::record_meme</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>url</parameter></paramdef>
          <paramdef><parameter>posterid</parameter></paramdef>
          <paramdef><parameter>itemid</parameter></paramdef>
          <paramdef><parameter>journalid</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>url</title>
          <para>URL to log</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>posterid</title>
          <para>Userid of person posting</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>itemid</title>
          <para>Itemid URL appears in.  For non-clustered users, this is just the itemid.  For clustered users, this is the display itemid, which is the jitemid*256+anum from the [dbtable[log2]] table.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>journalid</title>
          <para>Optional, journal id of item, if item is clustered.  Otherwise this should be zero or undef.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.register_authaction">
    <refnamediv>
      <refname>LJ::register_authaction</refname>
      <refpurpose>Registers a secret to have the user validate.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::register_authaction</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
          <paramdef><parameter>action</parameter></paramdef>
          <paramdef><parameter>arg</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>Userid of user to register authaction for.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>action</title>
          <para>Action type to register.   Max chars: 50.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>arg</title>
          <para>Optional argument to attach to the action.  Max chars: 255.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Some things, like requiring a user to validate their email address, require making up a secret, mailing it to the user, then requiring them to give it back (usually in a URL you make for them) to prove they got it.  This function creates a secret, attaching what it's for and an optional argument. Background maintenance jobs keep track of cleaning up old unvalidated secrets.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>0 if there was an error.  Otherwise, a hashref containing keys 'aaid' (the authaction ID) and the 'authcode', a 15 character string of random characters from <link linkend='ljp.api.lj.make_auth_code'>LJ::make_auth_code</link>.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.register_hook">
    <refnamediv>
      <refname>LJ::register_hook</refname>
      <refpurpose>Installs a site-specific hook.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::register_hook</function></funcdef>
          <paramdef><parameter>hookname</parameter></paramdef>
          <paramdef><parameter>subref</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>hookname</title>
          <para>Name of hook. See doc/hooks.txt.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>subref</title>
          <para>Subroutine reference to run later.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Installing multiple hooks per hookname is valid. They're run later in the order they're registered.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.remote_has_priv">
    <refnamediv>
      <refname>LJ::remote_has_priv</refname>
      <refpurpose>Check to see if the given remote user has a certain priviledge</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::remote_has_priv</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Info</title>
      <para>DEPRECATED.  should use load_user_privs + check_priv</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.run_hooks">
    <refnamediv>
      <refname>LJ::run_hooks</refname>
      <refpurpose>Runs all the site-specific hooks of the given name.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::run_hooks</function></funcdef>
          <paramdef><parameter>hookname</parameter></paramdef>
          <paramdef><parameter>args</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>hookname</title>
          <para>Name of hook. See doc/hooks.txt.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>args</title>
          <para>Arguments to be passed to hook.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>list of arrayrefs, one for each hook ran, their contents being their own return values.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.self_link">
    <refnamediv>
      <refname>LJ::self_link</refname>
      <refpurpose>Takes the URI of the current page, and adds the current form data to the url, then adds any additional data to the url.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::self_link</function></funcdef>
          <paramdef><parameter>form</parameter></paramdef>
          <paramdef><parameter>newvars</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>form</title>
          <para>A hashref of the form information from the page.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>newvars</title>
          <para>A hashref of information to add/override to the link.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>scalar; the full url</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.send_mail">
    <refnamediv>
      <refname>LJ::send_mail</refname>
      <refpurpose>Sends email.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::send_mail</function></funcdef>
          <paramdef><parameter>opt</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>opt</title>
          <para>Hashref of arguments.  <b>Required:</b> to, from, subject, body. <b>Optional:</b> toname, fromname, cc, bcc</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.send_statserv">
    <refnamediv>
      <refname>LJ::send_statserv</refname>
      <refpurpose>Sends UDP packet of info to the statistics server.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::send_statserv</function></funcdef>
          <paramdef><parameter>cachename</parameter></paramdef>
          <paramdef><parameter>ip</parameter></paramdef>
          <paramdef><parameter>type</parameter></paramdef>
          <paramdef><parameter>url</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>cachename</title>
          <para>The name to cache this client under. This is can be the logged in username, the value of a guest cookie, or simply "ip" to indicate a cookie-less client.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>ip</title>
          <para>The dotted quad representing the client's IP address.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>type</title>
          <para>What type of client this is. "user", "guest" or "ip".</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>url</title>
          <para>An optional URL of what the client hit.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Nothing.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.server_down_html">
    <refnamediv>
      <refname>LJ::server_down_html</refname>
      <refpurpose>Returns an HTML server down message.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::server_down_html</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>A string with a server down message in HTML.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.set_interests">
    <refnamediv>
      <refname>LJ::set_interests</refname>
      <refpurpose>Change a user's interests</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::set_interests</function></funcdef>
          <paramdef><parameter>dbh</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
          <paramdef><parameter>old</parameter></paramdef>
          <paramdef><parameter>new</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbh</title>
          <para>Master database handle.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>old</title>
          <para></para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>new</title>
          <para></para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.set_userprop">
    <refnamediv>
      <refname>LJ::set_userprop</refname>
      <refpurpose>Sets/deletes a userprop by name for a user.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::set_userprop</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
          <paramdef><parameter>propname</parameter></paramdef>
          <paramdef><parameter>value</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>The userid of the user.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>propname</title>
          <para>The name of the property.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>value</title>
          <para>The value to set to the property.  If undefined or the empty string, then property is deleted.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>This adds or deletes from the [dbtable[userprop]]/[dbtable[userproplite]] tables.  One crappy thing about this interface is that it doesn't allow a batch of userprops to be updated at once, which is the common thing to do.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.start_request">
    <refnamediv>
      <refname>LJ::start_request</refname>
      <refpurpose>Before a new web request is obtained, this should be called to determine if process should die or keep working, clean caches, reload config files, etc.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::start_request</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1 if a new request is to be processed, 0 if process should die.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.statushistory_add">
    <refnamediv>
      <refname>LJ::statushistory_add</refname>
      <refpurpose>Adds a row to a user's statushistory</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::statushistory_add</function></funcdef>
          <paramdef><parameter>dbarg</parameter></paramdef>
          <paramdef><parameter>userid</parameter></paramdef>
          <paramdef><parameter>adminid</parameter></paramdef>
          <paramdef><parameter>shtype</parameter></paramdef>
          <paramdef><parameter>notes</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbarg</title>
          <para>A master database handle ($dbh) or a master/slave set of database handles ($dbs) as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>userid</title>
          <para>The user getting acted on.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>adminid</title>
          <para>The site admin doing the action.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>shtype</title>
          <para>The status history type code.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>notes</title>
          <para>Optional notes associated with this action.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>See the [dbtable[statushistory]] table.</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>boolean; 1 on success, 0 on failure</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.strip_bad_code">
    <refnamediv>
      <refname>LJ::strip_bad_code</refname>
      <refpurpose>Removes malicious/annoying HTML.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::strip_bad_code</function></funcdef>
          <paramdef><parameter>textref</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>textref</title>
          <para>Scalar reference to text to be cleaned.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>This is just a wrapper function around [func[LJ::CleanHTML::clean]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>Nothing.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.text_convert">
    <refnamediv>
      <refname>LJ::text_convert</refname>
      <refpurpose>convert old entries/comments to UTF-8 using user's default encoding</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::text_convert</function></funcdef>
          <paramdef><parameter>dbs</parameter></paramdef>
          <paramdef><parameter>text</parameter></paramdef>
          <paramdef><parameter>u</parameter></paramdef>
          <paramdef><parameter>error</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>dbs</title>
          <para>A master/slave database pair, as generated by <link linkend='ljp.api.lj.get_dbs'>LJ::get_dbs</link>.</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>text</title>
          <para>old possibly non-ASCII text to convert</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>u</title>
          <para>user hashref of the journal's owner</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>error</title>
          <para>ref to a scalar variable which is set to 1 on error</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>converted text or undef on error</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.text_in">
    <refnamediv>
      <refname>LJ::text_in</refname>
      <refpurpose>do appropriate checks on input text. Should be called on all user-generated text.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::text_in</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>text to check</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>1 if the text is valid, 0 if not.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.text_length">
    <refnamediv>
      <refname>LJ::text_length</refname>
      <refpurpose>returns both byte length and character length of a string. In a non-Unicode environment, this means byte length twice. In a Unicode environment, the function assumes that its argument is a valid UTF-8 string.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::text_length</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>the string to measure</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>a list of two values, (byte_length, char_length).</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.text_out">
    <refnamediv>
      <refname>LJ::text_out</refname>
      <refpurpose>force outgoing text into valid UTF-8</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::text_out</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>reference to text to pass to output. Text if modified in-place.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>nothing.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.text_trim">
    <refnamediv>
      <refname>LJ::text_trim</refname>
      <refpurpose>truncate string according to requirements on byte length, char length, or both. "char length" means number of UTF-8 characters if $LJ::UNICODE is set, or the same thing as byte length otherwise.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::text_trim</function></funcdef>
          <paramdef><parameter>text</parameter></paramdef>
          <paramdef><parameter>byte_max</parameter></paramdef>
          <paramdef><parameter>char_max</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>text</title>
          <para>the string to trim</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>byte_max</title>
          <para>maximum allowed length in bytes; if 0, there's no restriction</para>
        </formalpara></listitem>
        <listitem><formalpara>
          <title>char_max</title>
          <para>maximum allowed length in chars; if 0, there's no restriction</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>the truncated string.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.time_to_http">
    <refnamediv>
      <refname>LJ::time_to_http</refname>
      <refpurpose>Converts a Unix time to an HTTP date.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::time_to_http</function></funcdef>
          <paramdef><parameter>time</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>time</title>
          <para>Integer; Unix time.</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Info</title>
      <para>Wrapper around HTTP::Date::time2str to make an HTTP date (RFC 1123 format)  See also [func[LJ::http_to_time]].</para>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>String; RFC 1123 date.</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.trim">
    <refnamediv>
      <refname>LJ::trim</refname>
      <refpurpose>Removes whitespace from left and right side of a string.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::trim</function></funcdef>
          <paramdef><parameter>string</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Arguments</title>
      <itemizedlist>
        <listitem><formalpara>
          <title>string</title>
          <para>string to be trimmed</para>
        </formalpara></listitem>
      </itemizedlist>
    </refsect1>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
    <refsect1>
      <title>Returns:</title>
      <para>string trimmed</para>
    </refsect1>
  </refentry>
  <refentry id="ljp.api.lj.use_diff_db">
    <refnamediv>
      <refname>LJ::use_diff_db</refname>
      <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <title>Use</title>
      <funcsynopsis>
        <funcprototype>
          <funcdef><function>LJ::use_diff_db</function></funcdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>
    <refsect1>
      <title>Source:</title>
      <para><filename>cgi-bin/ljlib.pl</filename></para>
    </refsect1>
  </refentry>
</reference>
